<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="make__unique_8h" kind="file">
    <compoundname>make_unique.h</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includedby refid="scan__performance_8cpp" local="yes">src/bin/perf_regression/scan_performance.cpp</includedby>
    <includedby refid="_example_expression_8cpp" local="yes">src/lib/access/expressions/ExampleExpression.cpp</includedby>
    <includedby refid="_expression_registration_8h" local="yes">src/lib/access/expressions/ExpressionRegistration.h</includedby>
    <includedby refid="_generic_expressions_8h" local="yes">src/lib/access/expressions/GenericExpressions.h</includedby>
    <includedby refid="_transaction_manager_8cpp" local="yes">src/lib/io/TransactionManager.cpp</includedby>
    <incdepgraph>
      <node id="10863">
        <label>utility</label>
      </node>
      <node id="10860">
        <label>src/lib/helper/make_unique.h</label>
        <link refid="make_unique.h"/>
        <childnode refid="10861" relation="include">
        </childnode>
        <childnode refid="10862" relation="include">
        </childnode>
        <childnode refid="10863" relation="include">
        </childnode>
      </node>
      <node id="10862">
        <label>type_traits</label>
      </node>
      <node id="10861">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="10871">
        <label>src/lib/access/expressions/GenericExpressions.h</label>
        <link refid="_generic_expressions_8h"/>
        <childnode refid="10869" relation="include">
        </childnode>
      </node>
      <node id="10870">
        <label>src/lib/access/TableScan.cpp</label>
        <link refid="_table_scan_8cpp"/>
      </node>
      <node id="10866">
        <label>src/lib/access/expressions/ExampleExpression.cpp</label>
        <link refid="_example_expression_8cpp"/>
      </node>
      <node id="10872">
        <label>src/lib/io/TransactionManager.cpp</label>
        <link refid="_transaction_manager_8cpp"/>
      </node>
      <node id="10865">
        <label>src/bin/perf_regression/scan_performance.cpp</label>
        <link refid="scan__performance_8cpp"/>
      </node>
      <node id="10868">
        <label>src/lib/access/expressions/ExpressionRegistration.cpp</label>
        <link refid="_expression_registration_8cpp"/>
      </node>
      <node id="10864">
        <label>src/lib/helper/make_unique.h</label>
        <link refid="make_unique.h"/>
        <childnode refid="10865" relation="include">
        </childnode>
        <childnode refid="10866" relation="include">
        </childnode>
        <childnode refid="10867" relation="include">
        </childnode>
        <childnode refid="10871" relation="include">
        </childnode>
        <childnode refid="10872" relation="include">
        </childnode>
      </node>
      <node id="10869">
        <label>src/lib/access/expressions/GenericExpressions.cpp</label>
        <link refid="_generic_expressions_8cpp"/>
      </node>
      <node id="10867">
        <label>src/lib/access/expressions/ExpressionRegistration.h</label>
        <link refid="_expression_registration_8h"/>
        <childnode refid="10866" relation="include">
        </childnode>
        <childnode refid="10868" relation="include">
        </childnode>
        <childnode refid="10869" relation="include">
        </childnode>
        <childnode refid="10870" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="make__unique_8h_1a13e745a3672b2f6c9eb99b8466c9e9e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt;T&gt; make_unique_helper</definition>
        <argsstring>(std::false_type, Args &amp;&amp;...args)</argsstring>
        <name>make_unique_helper</name>
        <param>
          <type>std::false_type</type>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>From <ulink url="http://channel9.msdn.com/Series/C9-Lectures-Stephan-T-Lavavej-Core-C-/STLCCSeries6#c634889372900373011">http://channel9.msdn.com/Series/C9-Lectures-Stephan-T-Lavavej-Core-C-/STLCCSeries6#c634889372900373011</ulink>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/lanice/src/lib/helper/make_unique.h" line="11" bodyfile="/home/vagrant/lanice/src/lib/helper/make_unique.h" bodystart="11" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="make__unique_8h_1a02f3d14dc66ca501afd42ba2f9a9d6e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt;T&gt; make_unique_helper</definition>
        <argsstring>(std::true_type, Args &amp;&amp;...args)</argsstring>
        <name>make_unique_helper</name>
        <param>
          <type>std::true_type</type>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/lanice/src/lib/helper/make_unique.h" line="16" bodyfile="/home/vagrant/lanice/src/lib/helper/make_unique.h" bodystart="16" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="make__unique_8h_1a0829a5e90a24afd12645b3d48cd08913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt;T&gt; make_unique</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>make_unique</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/lanice/src/lib/helper/make_unique.h" line="25" bodyfile="/home/vagrant/lanice/src/lib/helper/make_unique.h" bodystart="25" bodyend="27"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>SRC_LIB_HELPER_MAKE_UNIQUE</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SRC_LIB_HELPER_MAKE_UNIQUE</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="11" refid="make__unique_8h_1a13e745a3672b2f6c9eb99b8466c9e9e3" refkind="member"><highlight class="normal">std::unique_ptr&lt;T&gt;<sp/><ref refid="make__unique_8h_1a13e745a3672b2f6c9eb99b8466c9e9e3" kindref="member" tooltip="From http://channel9.msdn.com/Series/C9-Lectures-Stephan-T-Lavavej-Core-C-/STLCCSeries6#c634889372900...">make_unique_helper</ref>(std::false_type,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;T&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(std::forward&lt;Args&gt;(args)...));</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="16" refid="make__unique_8h_1a02f3d14dc66ca501afd42ba2f9a9d6e8" refkind="member"><highlight class="normal">std::unique_ptr&lt;T&gt;<sp/><ref refid="make__unique_8h_1a13e745a3672b2f6c9eb99b8466c9e9e3" kindref="member" tooltip="From http://channel9.msdn.com/Series/C9-Lectures-Stephan-T-Lavavej-Core-C-/STLCCSeries6#c634889372900...">make_unique_helper</ref>(std::true_type,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>static_assert(std::extent&lt;T&gt;::value<sp/>==<sp/>0,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;make_unique&lt;T[N]&gt;()<sp/>is<sp/>forbidden,<sp/>please<sp/>use<sp/>make_unique&lt;T[]&gt;().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_extent&lt;T&gt;::type<sp/>U;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;T&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>U[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)]{std::forward&lt;Args&gt;(args)...});</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="25" refid="make__unique_8h_1a0829a5e90a24afd12645b3d48cd08913" refkind="member"><highlight class="normal">std::unique_ptr&lt;T&gt;<sp/><ref refid="make__unique_8h_1a0829a5e90a24afd12645b3d48cd08913" kindref="member">make_unique</ref>(Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_unique_helper&lt;T&gt;(std::is_array&lt;T&gt;(),<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight></codeline>
    </programlisting>
    <location file="/home/vagrant/lanice/src/lib/helper/make_unique.h"/>
  </compounddef>
</doxygen>
