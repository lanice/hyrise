digraph "hyrise::access::AbstractExpression"
{
  edge [fontname="Helvetica",fontsize="11",labelfontname="Helvetica",labelfontsize="11"];
  node [fontname="Helvetica",fontsize="11",shape=record];
  Node1 [label="{hyrise::access::Abstract\lExpression\n||+ ~AbstractExpression()\l+ walk()\l+ match()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{hyrise::access::ExampleExpression\n|- _table\l- _vector\l- _dict\l- _column\l- _value\l- _valueid\l|+ ExampleExpression()\l+ operator()()\l+ match()\l+ walk()\l+ parse()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classhyrise_1_1access_1_1_example_expression.html"];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{SimpleExpression\n||+ walk()\l+ match()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_simple_expression.html"];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{CompoundExpression\n|+ lhs\l+ rhs\l+ one_leg\l- type\l|+ CompoundExpression()\l+ CompoundExpression()\l+ ~CompoundExpression()\l+ walk()\l+ operator()()\l+ add()\l+ isSetup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_compound_expression.html"];
  Node3 -> Node5 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{SimpleFieldExpression\n|# table\l# field\l# field_name\l# input\l|+ SimpleFieldExpression()\l+ SimpleFieldExpression()\l+ SimpleFieldExpression()\l+ SimpleFieldExpression()\l+ ~SimpleFieldExpression()\l+ walk()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_simple_field_expression.html"];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{BetweenExpression\< T \>\n|- lower_bound\l- upper_bound\l- lower_value\l- upper_value\l- valueIdMap\l- lower_value_exists\l- upper_value_exists\l|+ BetweenExpression()\l+ BetweenExpression()\l+ BetweenExpression()\l+ walk()\l+ ~BetweenExpression()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_between_expression.html"];
  Node5 -> Node7 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{EqualsExpression\< T \>\n|+ value\l- lower_bound\l- valueIdMap\l- value_exists\l|+ EqualsExpression()\l+ EqualsExpression()\l+ EqualsExpression()\l+ walk()\l+ ~EqualsExpression()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_equals_expression.html"];
  Node5 -> Node8 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{EqualsExpressionRaw\< T \>\n|+ value\l|+ EqualsExpressionRaw()\l+ EqualsExpressionRaw()\l+ EqualsExpressionRaw()\l+ ~EqualsExpressionRaw()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_equals_expression_raw.html"];
  Node5 -> Node9 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{GenericExpressionValue\l\< T, Op \>\n|- value\l- _operator\l|+ GenericExpressionValue()\l+ GenericExpressionValue()\l+ GenericExpressionValue()\l+ ~GenericExpressionValue()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_generic_expression_value.html"];
  Node5 -> Node10 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{GreaterThanExpression\< T \>\n|- lower_bound\l- value\l- valueIdMap\l- value_exists\l|+ GreaterThanExpression()\l+ GreaterThanExpression()\l+ GreaterThanExpression()\l+ ~GreaterThanExpression()\l+ walk()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_greater_than_expression.html"];
  Node5 -> Node11 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{GreaterThanExpressionRaw\< T \>\n|- value\l|+ GreaterThanExpressionRaw()\l+ GreaterThanExpressionRaw()\l+ GreaterThanExpressionRaw()\l+ ~GreaterThanExpressionRaw()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_greater_than_expression_raw.html"];
  Node5 -> Node12 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{LessThanExpression\< T \>\n|- lower_bound\l- value\l- valueIdMap\l- value_exists\l|+ LessThanExpression()\l+ LessThanExpression()\l+ LessThanExpression()\l+ walk()\l+ ~LessThanExpression()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_less_than_expression.html"];
  Node5 -> Node13 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{LessThanExpressionRaw\< T \>\n|- value\l|+ LessThanExpressionRaw()\l+ LessThanExpressionRaw()\l+ LessThanExpressionRaw()\l+ ~LessThanExpressionRaw()\l+ operator()()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_less_than_expression_raw.html"];
}
