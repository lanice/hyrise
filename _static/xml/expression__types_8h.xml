<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="expression__types_8h" kind="file">
    <compoundname>expression_types.h</compoundname>
    <includes local="no">map</includes>
    <includes local="no">string</includes>
    <includes local="no">json.h</includes>
    <includedby refid="expression__types_8cpp" local="yes">src/lib/access/expressions/expression_types.cpp</includedby>
    <includedby refid="join__predicates_8h" local="yes">src/lib/access/expressions/join_predicates.h</includedby>
    <includedby refid="pred__common_8h" local="yes">src/lib/access/expressions/pred_common.h</includedby>
    <includedby refid="pred__build_expression_8cpp" local="yes">src/lib/access/expressions/pred_buildExpression.cpp</includedby>
    <includedby refid="pred__expression__factory_8h" local="yes">src/lib/access/expressions/pred_expression_factory.h</includedby>
    <includedby refid="lib_2access_2_join_scan_8cpp" local="yes">src/lib/access/JoinScan.cpp</includedby>
    <incdepgraph>
      <node id="2852">
        <label>string</label>
      </node>
      <node id="2851">
        <label>map</label>
      </node>
      <node id="2853">
        <label>json.h</label>
      </node>
      <node id="2850">
        <label>src/lib/access/expressions/expression_types.h</label>
        <link refid="expression_types.h"/>
        <childnode refid="2851" relation="include">
        </childnode>
        <childnode refid="2852" relation="include">
        </childnode>
        <childnode refid="2853" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2870">
        <label>src/bin/perf_regression/SimpleTableScan.cpp</label>
        <link refid="bin_2perf__regression_2_simple_table_scan_8cpp"/>
      </node>
      <node id="2865">
        <label>src/bin/perf_regression/GroupByScan.cpp</label>
        <link refid="bin_2perf__regression_2_group_by_scan_8cpp"/>
      </node>
      <node id="2862">
        <label>src/lib/access/JoinScan.h</label>
        <link refid="_join_scan_8h"/>
        <childnode refid="2863" relation="include">
        </childnode>
        <childnode refid="2864" relation="include">
        </childnode>
      </node>
      <node id="2882">
        <label>src/bin/perf_regression/scan_performance.cpp</label>
        <link refid="scan__performance_8cpp"/>
      </node>
      <node id="2864">
        <label>src/lib/access.h</label>
        <link refid="access_8h"/>
        <childnode refid="2865" relation="include">
        </childnode>
        <childnode refid="2866" relation="include">
        </childnode>
        <childnode refid="2867" relation="include">
        </childnode>
        <childnode refid="2868" relation="include">
        </childnode>
        <childnode refid="2869" relation="include">
        </childnode>
        <childnode refid="2870" relation="include">
        </childnode>
        <childnode refid="2871" relation="include">
        </childnode>
        <childnode refid="2872" relation="include">
        </childnode>
      </node>
      <node id="2858">
        <label>src/lib/access/expressions/pred_BetweenOperation.h</label>
        <link refid="pred___between_operation_8h"/>
        <childnode refid="2859" relation="include">
        </childnode>
      </node>
      <node id="2868">
        <label>src/bin/perf_regression/JoinScan.cpp</label>
        <link refid="bin_2perf__regression_2_join_scan_8cpp"/>
      </node>
      <node id="2859">
        <label>src/lib/access/expressions/predicates.h</label>
        <link refid="predicates_8h"/>
        <childnode refid="2860" relation="include">
        </childnode>
        <childnode refid="2861" relation="include">
        </childnode>
        <childnode refid="2862" relation="include">
        </childnode>
        <childnode refid="2873" relation="include">
        </childnode>
        <childnode refid="2864" relation="include">
        </childnode>
      </node>
      <node id="2871">
        <label>src/bin/perf_regression/SortScan.cpp</label>
        <link refid="bin_2perf__regression_2_sort_scan_8cpp"/>
      </node>
      <node id="2884">
        <label>src/lib/access/expressions/pred_LessThanExpression.h</label>
        <link refid="pred___less_than_expression_8h"/>
        <childnode refid="2859" relation="include">
        </childnode>
      </node>
      <node id="2856">
        <label>src/lib/access/expressions/join_predicates.h</label>
        <link refid="join__predicates_8h"/>
        <childnode refid="2857" relation="include">
        </childnode>
      </node>
      <node id="2875">
        <label>src/lib/access/expressions/pred_buildExpression.h</label>
        <link refid="pred__build_expression_8h"/>
        <childnode refid="2860" relation="include">
        </childnode>
        <childnode refid="2859" relation="include">
        </childnode>
        <childnode refid="2876" relation="include">
        </childnode>
        <childnode refid="2877" relation="include">
        </childnode>
      </node>
      <node id="2881">
        <label>src/lib/access/expressions/pred_EqualsExpression.h</label>
        <link refid="pred___equals_expression_8h"/>
        <childnode refid="2882" relation="include">
        </childnode>
        <childnode refid="2859" relation="include">
        </childnode>
      </node>
      <node id="2869">
        <label>src/bin/perf_regression/ProjectionScan.cpp</label>
        <link refid="bin_2perf__regression_2_projection_scan_8cpp"/>
      </node>
      <node id="2883">
        <label>src/lib/access/expressions/pred_GreaterThanExpression.h</label>
        <link refid="pred___greater_than_expression_8h"/>
        <childnode refid="2859" relation="include">
        </childnode>
      </node>
      <node id="2866">
        <label>src/bin/perf_regression/HashJoin.cpp</label>
        <link refid="_hash_join_8cpp"/>
      </node>
      <node id="2877">
        <label>src/lib/access/SimpleTableScan.cpp</label>
        <link refid="lib_2access_2_simple_table_scan_8cpp"/>
      </node>
      <node id="2861">
        <label>src/lib/access/expressions/pred_expression_factory.h</label>
        <link refid="pred__expression__factory_8h"/>
        <childnode refid="2859" relation="include">
        </childnode>
        <childnode refid="2860" relation="include">
        </childnode>
      </node>
      <node id="2857">
        <label>src/lib/access/expressions/pred_common.h</label>
        <link refid="pred__common_8h"/>
        <childnode refid="2858" relation="include">
        </childnode>
        <childnode refid="2874" relation="include">
        </childnode>
        <childnode refid="2875" relation="include">
        </childnode>
        <childnode refid="2878" relation="include">
        </childnode>
        <childnode refid="2881" relation="include">
        </childnode>
        <childnode refid="2883" relation="include">
        </childnode>
        <childnode refid="2884" relation="include">
        </childnode>
        <childnode refid="2879" relation="include">
        </childnode>
      </node>
      <node id="2879">
        <label>src/lib/access/expressions/pred_PredicateBuilder.h</label>
        <link refid="pred___predicate_builder_8h"/>
        <childnode refid="2859" relation="include">
        </childnode>
        <childnode refid="2880" relation="include">
        </childnode>
      </node>
      <node id="2860">
        <label>src/lib/access/expressions/pred_buildExpression.cpp</label>
        <link refid="pred__build_expression_8cpp"/>
      </node>
      <node id="2863">
        <label>src/lib/access/JoinScan.cpp</label>
        <link refid="lib_2access_2_join_scan_8cpp"/>
      </node>
      <node id="2854">
        <label>src/lib/access/expressions/expression_types.h</label>
        <link refid="expression_types.h"/>
        <childnode refid="2855" relation="include">
        </childnode>
        <childnode refid="2856" relation="include">
        </childnode>
        <childnode refid="2857" relation="include">
        </childnode>
        <childnode refid="2860" relation="include">
        </childnode>
        <childnode refid="2861" relation="include">
        </childnode>
        <childnode refid="2863" relation="include">
        </childnode>
      </node>
      <node id="2867">
        <label>src/bin/perf_regression/HashValueJoin.cpp</label>
        <link refid="_hash_value_join_8cpp"/>
      </node>
      <node id="2878">
        <label>src/lib/access/expressions/pred_CompoundExpression.h</label>
        <link refid="pred___compound_expression_8h"/>
        <childnode refid="2859" relation="include">
        </childnode>
        <childnode refid="2879" relation="include">
        </childnode>
      </node>
      <node id="2876">
        <label>src/lib/access/SimpleRawTableScan.cpp</label>
        <link refid="_simple_raw_table_scan_8cpp"/>
      </node>
      <node id="2874">
        <label>src/lib/access/expressions/pred_SimpleFieldExpression.h</label>
        <link refid="pred___simple_field_expression_8h"/>
        <childnode refid="2857" relation="include">
        </childnode>
        <childnode refid="2859" relation="include">
        </childnode>
      </node>
      <node id="2872">
        <label>src/bin/perf_regression/UnionScan.cpp</label>
        <link refid="bin_2perf__regression_2_union_scan_8cpp"/>
      </node>
      <node id="2855">
        <label>src/lib/access/expressions/expression_types.cpp</label>
        <link refid="expression__types_8cpp"/>
      </node>
      <node id="2873">
        <label>src/lib/access/MergeJoin.hpp</label>
        <link refid="_merge_join_8hpp"/>
        <childnode refid="2864" relation="include">
        </childnode>
      </node>
      <node id="2880">
        <label>src/lib/access/expressions/pred_PredicateBuilder.cpp</label>
        <link refid="pred___predicate_builder_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_predicate_type" prot="public">PredicateType</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720" prot="public" static="no">
        <name>ExpressionType</name>
        <enumvalue id="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a865555c9f2e0458a7078486aa1b3254f" prot="public">
          <name>AND</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a96727447c0ad447987df1c6415aef074" prot="public">
          <name>OR</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a0378ebc895849163b249d0b330257dd6" prot="public">
          <name>NOT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a47e37fde0578f430e743261e91a51139" prot="public">
          <name>EXP_EQ</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.h" line="10" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.h" bodystart="10" bodyend="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="expression__types_8h_1a76fd92e9011f572a00d00383849a5bf5" prot="public" static="no">
        <type>std::map&lt; std::string, <ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4" kindref="member">PredicateType::type</ref> &gt;</type>
        <definition>typedef std::map&lt;std::string, PredicateType::type&gt; predicate_map_t</definition>
        <argsstring></argsstring>
        <name>predicate_map_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.h" line="35" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="expression__types_8h_1a6b227c2086984787afea2b4e490dcd5b" prot="public" static="no">
        <type>std::map&lt; std::string, <ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720" kindref="member">ExpressionType</ref> &gt;</type>
        <definition>typedef std::map&lt;std::string, ExpressionType&gt; expression_map_t</definition>
        <argsstring></argsstring>
        <name>expression_map_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.h" line="36" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="expression__types_8h_1a9aa1d4a3b96198829e669e8f37a9f245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4" kindref="member">PredicateType::type</ref></type>
        <definition>PredicateType::type parsePredicateType</definition>
        <argsstring>(const Json::Value &amp;value)</argsstring>
        <name>parsePredicateType</name>
        <param>
          <type>const Json::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.h" line="38" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.cpp" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="expression__types_8h_1a0da444b0186a6a8d6e3a5970afeec527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720" kindref="member">ExpressionType</ref></type>
        <definition>ExpressionType parseExpressionType</definition>
        <argsstring>(const Json::Value &amp;value)</argsstring>
        <name>parseExpressionType</name>
        <param>
          <type>const Json::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.h" line="39" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.cpp" bodystart="43" bodyend="47"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SRC_LIB_ACCESS_EXPRESSION_TYPES_H_</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SRC_LIB_ACCESS_EXPRESSION_TYPES_H_</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;json.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a96727447c0ad447987df1c6415aef074" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720" kindref="member">ExpressionType</ref><sp/>{<sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a865555c9f2e0458a7078486aa1b3254f" kindref="member">AND</ref><sp/>=<sp/>0,<sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a96727447c0ad447987df1c6415aef074" kindref="member">OR</ref><sp/>=<sp/>1,<sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a0378ebc895849163b249d0b330257dd6" kindref="member">NOT</ref><sp/>=<sp/>2,<sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a47e37fde0578f430e743261e91a51139" kindref="member">EXP_EQ</ref><sp/>=<sp/>3<sp/>};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="struct_predicate_type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_predicate_type" kindref="compound">PredicateType</ref><sp/>{</highlight></codeline>
<codeline lineno="13" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="14" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4aecbf999dec18480f89ed3e7b8f33f746" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_equals_expression" kindref="compound">EqualsExpression</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="15" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a8c0dfd582c27af2f6c00b1cc30e1723b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_less_than_expression" kindref="compound">LessThanExpression</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="16" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a17020976118c2cc2127d0c60d6e17468" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_greater_than_expression" kindref="compound">GreaterThanExpression</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="17" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a72d9c49e33f267f776f86271c8cef637" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_between_expression" kindref="compound">BetweenExpression</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="18" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4ac2077bbe0198712a2bbfa7f02f041e56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_compound_expression" kindref="compound">CompoundExpression</ref><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="19" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a7536be078490f330cb5e61dd057417b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a7536be078490f330cb5e61dd057417b3" kindref="member">NegateExpression</ref><sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="20" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a60bdbd1b416610a640dfffe9919aca6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a60bdbd1b416610a640dfffe9919aca6c" kindref="member">AND</ref><sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="21" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a3ff86da6498bd889c76820144ecfd860" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a3ff86da6498bd889c76820144ecfd860" kindref="member">OR</ref><sp/>=<sp/>7,</highlight></codeline>
<codeline lineno="22" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a40c0fea54ab0a7158cb810684feb1170" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a40c0fea54ab0a7158cb810684feb1170" kindref="member">NOT</ref><sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="23" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4aac2c8f67acde5a3c0af73c254dfd6744" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_equals_expression_raw" kindref="compound">EqualsExpressionRaw</ref><sp/>=<sp/>13,</highlight></codeline>
<codeline lineno="24" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4aa73eaedb5aedf02d4d84010651b32eb1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_less_than_expression_raw" kindref="compound">LessThanExpressionRaw</ref><sp/>=<sp/>14,</highlight></codeline>
<codeline lineno="25" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a48d9b027ddc83f042229dccfc2ad8f03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_greater_than_expression_raw" kindref="compound">GreaterThanExpressionRaw</ref><sp/>=<sp/>15,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4ae6b4899469126b734579c7d3073f1596" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4ae6b4899469126b734579c7d3073f1596" kindref="member">EqualsExpressionValue</ref><sp/>=<sp/>20,</highlight></codeline>
<codeline lineno="28" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a666ecff5c2bf54dc5663302137090fab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a666ecff5c2bf54dc5663302137090fab" kindref="member">GreaterThanExpressionValue</ref><sp/>=<sp/>21,</highlight></codeline>
<codeline lineno="29" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a4ab3d07c49bc4a9299720615b1bb6c3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a4ab3d07c49bc4a9299720615b1bb6c3c" kindref="member">LessThanExpressionValue</ref><sp/>=<sp/>22,</highlight></codeline>
<codeline lineno="30" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4ae9bae8f4842c9c33b711d2d5f1af54a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4ae9bae8f4842c9c33b711d2d5f1af54a4" kindref="member">GreaterThanEqualsExpressionValue</ref><sp/>=<sp/>23,</highlight></codeline>
<codeline lineno="31" refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4ab9c4c3c614968b4b8d420f141dce4c99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4ab9c4c3c614968b4b8d420f141dce4c99" kindref="member">LessThanEqualsExpressionValue</ref><sp/>=<sp/>24</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="expression__types_8h_1a76fd92e9011f572a00d00383849a5bf5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>PredicateType::type&gt;<sp/><ref refid="expression__types_8h_1a76fd92e9011f572a00d00383849a5bf5" kindref="member">predicate_map_t</ref>;</highlight></codeline>
<codeline lineno="36" refid="expression__types_8h_1a6b227c2086984787afea2b4e490dcd5b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>ExpressionType&gt;<sp/><ref refid="expression__types_8h_1a6b227c2086984787afea2b4e490dcd5b" kindref="member">expression_map_t</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4" kindref="member">PredicateType::type</ref><sp/><ref refid="expression__types_8cpp_1a9aa1d4a3b96198829e669e8f37a9f245" kindref="member">parsePredicateType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Json::Value<sp/>&amp;value);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720" kindref="member">ExpressionType</ref><sp/><ref refid="expression__types_8cpp_1a0da444b0186a6a8d6e3a5970afeec527" kindref="member">parseExpressionType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Json::Value<sp/>&amp;value);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>SRC_LIB_ACCESS_EXPRESSION_TYPES_H_</highlight></codeline>
    </programlisting>
    <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.h"/>
  </compounddef>
</doxygen>
