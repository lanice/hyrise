digraph "AbstractResource"
{
  edge [fontname="Helvetica",fontsize="11",labelfontname="Helvetica",labelfontsize="11"];
  node [fontname="Helvetica",fontsize="11",shape=record];
  Node1 [label="{AbstractResource\n||+ ~AbstractResource()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{AbstractHashTable\n||+ AbstractHashTable()\l+ ~AbstractHashTable()\l+ size()\l+ get()\l+ getTable()\l+ getFields()\l+ getFieldCount()\l+ numKeys()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_abstract_hash_table.html",tooltip="HashTable that maps table cells&#39; hashed values of arbitrary columns to their rows."];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{HashTable\< MAP, KEY \>\n|+ map_const_range_t\l# _map\l# _table\l# _fields\l# _numKeys\l# _dirty\l|+ HashTable()\l+ HashTable()\l+ HashTable()\l+ ~HashTable()\l+ stats()\l+ view()\l+ size()\l+ get()\l+ getMapBegin()\l+ getMapEnd()\land 6 more...\l- populate_map()\l- constructPositions()\l- constructPositions()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_hash_table.html",tooltip="HashTable based on a map; key specifies the key for the given map."];
  Node2 -> Node4 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{HashTableView\< MAP,\l KEY \>\n|# _hashTable\l# _begin\l# _end\l# _numKeys\l# _dirty\l|+ HashTableView()\l+ advance()\l+ ~HashTableView()\l+ size()\l+ get()\l+ get()\l+ getMapBegin()\l+ getMapEnd()\l+ getHashTable()\l+ getFields()\l+ getFieldCount()\l+ getTable()\l+ numKeys()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_hash_table_view.html"];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{AbstractIndex\n||+ ~AbstractIndex()\l+ shrink()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_abstract_index.html"];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{InvertedIndex\< T \>\n|- _index\l|+ ~InvertedIndex()\l+ shrink()\l+ InvertedIndex()\l+ getPositionsForKey()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_inverted_index.html"];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{AbstractTable\n|- _uuid\l|+ copy_structure()\l+ copy_structure_modifiable()\l+ copyValueIds()\l+ metadataAt()\l+ metadata()\l+ dictionaryAt()\l+ dictionaryByTableId()\l+ dictionaries()\l+ setDictionaryAt()\l+ typeOfColumn()\land 31 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_abstract_table.html"];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{hyrise::storage::Horizontal\lTable\n|- _parts\l- _offsets\l- _table_id_offsets\l|+ HorizontalTable()\l+ ~HorizontalTable()\l+ metadataAt()\l+ dictionaryAt()\l+ dictionaryByTableId()\l+ setDictionaryAt()\l+ size()\l+ columnCount()\l+ getValueId()\l+ setValueId()\l+ partitionCount()\l+ partitionWidth()\l+ subtableCount()\l+ copy()\l+ debugStructure()\l- partForRow()\l- computeSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classhyrise_1_1storage_1_1_horizontal_table.html"];
  Node7 -> Node9 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{hyrise::storage::Mutable\lVerticalTable\n|- containers\l- column_count\l- container_for_column\l- offset_in_container\l- slice_count\l- container_for_slice\l- slice_offset_in_container\l|+ MutableVerticalTable()\l+ MutableVerticalTable()\l+ ~MutableVerticalTable()\l+ metadataAt()\l+ dictionaryAt()\l+ dictionaryByTableId()\l+ setDictionaryAt()\l+ size()\l+ columnCount()\l+ getValueId()\land 13 more...\l# getOffsetInContainer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classhyrise_1_1storage_1_1_mutable_vertical_table.html"];
  Node7 -> Node10 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{hyrise::storage::SimpleStore\n|- _main\l- _delta\l- _merger\l|+ SimpleStore()\l+ ~SimpleStore()\l+ columnCount()\l+ size()\l+ subtableCount()\l+ metadataAt()\l+ copy_structure_modifiable()\l+ setValue()\l+ getValue()\l+ getValueId()\land 14 more...\l- createDelta()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classhyrise_1_1storage_1_1_simple_store.html"];
  Node7 -> Node11 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{hyrise::storage::Store\n|- main_tables\l- delta\l- merger\l- _cidBeginVector\l- _cidEndVector\l- _tidVector\l|+ Store()\l+ Store()\l+ ~Store()\l+ getMainTables()\l+ setDelta()\l+ getDeltaTable()\l+ deltaOffset()\l+ merge()\l+ setMerger()\l+ resizeDelta()\land 26 more...\l- responsibleTable()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classhyrise_1_1storage_1_1_store.html"];
  Node7 -> Node12 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{hyrise::storage::TableRangeView\n|- _table\l- _start\l- _end\l- _columnCount\l|+ TableRangeView()\l+ ~TableRangeView()\l+ getStart()\l+ subtableCount()\l+ copy()\l+ print()\l+ getTable()\l+ size()\l+ setValueId()\l+ getValueId()\land 12 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classhyrise_1_1storage_1_1_table_range_view.html"];
  Node7 -> Node13 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{PointerCalculator\n|- table\l- pos_list\l- fields\l- slice_for_slice\l- offset_in_slice\l- width_for_slice\l- slice_count\l|+ PointerCalculator()\l+ PointerCalculator()\l+ ~PointerCalculator()\l+ setPositions()\l+ setFields()\l+ intersect()\l+ unite()\l+ concatenate()\l+ getPositions()\l+ getActualTablePositions()\land 20 more...\l+ unite_many()\l+ concatenate_many()\l# updateFieldMapping()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_pointer_calculator.html"];
  Node7 -> Node14 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 [label="{RawTable\n|- _metadata\l- _width\l- _size\l- _offsets\l- _data\l- _endOfData\l- _endOfStorage\l|+ RawTable()\l+ ~RawTable()\l+ size()\l+ columnCount()\l+ reserve()\l+ resize()\l+ metadataAt()\l+ partitionCount()\l+ subtableCount()\l+ copy()\land 17 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_raw_table.html"];
  Node7 -> Node15 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node15 [label="{Table\n|- tuples\l- _metadata\l- _dictionaries\l- width\l- _compressed\l|+ Table()\l+ ~Table()\l+ size()\l+ columnCount()\l+ getValueId()\l+ setValueId()\l+ reserve()\l+ resize()\l+ metadataAt()\l+ dictionaryAt()\land 12 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_table.html"];
  Node1 -> Node16 [dir="back",color="midnightblue",fontsize="11",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node16 [label="{Serial\n|- _serial\l|+ ~Serial()\l+ Serial()\l+ reset()\l+ next()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_serial.html",tooltip="A Serial class that can be used to define auto_increment columns for."];
}
