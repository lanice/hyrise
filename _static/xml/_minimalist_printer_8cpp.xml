<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="_minimalist_printer_8cpp" kind="file">
    <compoundname>MinimalistPrinter.cpp</compoundname>
    <includes refid="_minimalist_printer_8h" local="yes">MinimalistPrinter.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">map</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="yes">gtest/gtest.h</includes>
    <incdepgraph>
      <node id="19326">
        <label>src/lib/testing/MinimalistPrinter.cpp</label>
        <link refid="MinimalistPrinter.cpp"/>
        <childnode refid="19327" relation="include">
        </childnode>
        <childnode refid="19330" relation="include">
        </childnode>
        <childnode refid="19331" relation="include">
        </childnode>
        <childnode refid="19332" relation="include">
        </childnode>
        <childnode refid="19333" relation="include">
        </childnode>
        <childnode refid="19329" relation="include">
        </childnode>
      </node>
      <node id="19332">
        <label>string</label>
      </node>
      <node id="19331">
        <label>map</label>
      </node>
      <node id="19327">
        <label>MinimalistPrinter.h</label>
        <link refid="_minimalist_printer_8h"/>
        <childnode refid="19328" relation="include">
        </childnode>
        <childnode refid="19329" relation="include">
        </childnode>
      </node>
      <node id="19333">
        <label>vector</label>
      </node>
      <node id="19329">
        <label>gtest/gtest.h</label>
      </node>
      <node id="19330">
        <label>algorithm</label>
      </node>
      <node id="19328">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="structhyrise_1_1testing_1_1_printer_impl" prot="public">hyrise::testing::PrinterImpl</innerclass>
    <innernamespace refid="namespacehyrise">hyrise</innernamespace>
    <innernamespace refid="namespacehyrise_1_1testing">hyrise::testing</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_minimalist_printer_8h" kindref="compound">MinimalistPrinter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hyrise<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="structhyrise_1_1testing_1_1_printer_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhyrise_1_1testing_1_1_printer_impl" kindref="compound">PrinterImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="15" refid="structhyrise_1_1testing_1_1_printer_impl_1ada9e96f2fa5324d059663981f0dd53d4" refkind="member"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>std::vector&lt;MinimalistPrinter::test_part_t&gt;<sp/>&gt;<sp/><ref refid="structhyrise_1_1testing_1_1_printer_impl_1ada9e96f2fa5324d059663981f0dd53d4" kindref="member">_tests</ref>;</highlight></codeline>
<codeline lineno="16" refid="structhyrise_1_1testing_1_1_printer_impl_1ab3981bf9ea178fd1ce4c09aa042c6b68" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="structhyrise_1_1testing_1_1_printer_impl_1ab3981bf9ea178fd1ce4c09aa042c6b68" kindref="member">_current_test</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="classhyrise_1_1testing_1_1_minimalist_printer_1ad94bda62b8c0e53aa5f2e919b718e193" refkind="member"><highlight class="normal"><ref refid="classhyrise_1_1testing_1_1_minimalist_printer_1ad94bda62b8c0e53aa5f2e919b718e193" kindref="member">MinimalistPrinter::MinimalistPrinter</ref>()<sp/>:</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>_impl(new<sp/><ref refid="structhyrise_1_1testing_1_1_printer_impl" kindref="compound">PrinterImpl</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="classhyrise_1_1testing_1_1_minimalist_printer_1a6e026d3954acaf71d954d20abd4cb8e7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhyrise_1_1testing_1_1_minimalist_printer_1a6e026d3954acaf71d954d20abd4cb8e7" kindref="member">MinimalistPrinter::OnTestStart</ref>(const<sp/>::testing::TestInfo<sp/>&amp;test_info)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vp<sp/>=<sp/>test_info.value_param();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tp<sp/>=<sp/>test_info.type_param();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="classhyrise_1_1testing_1_1_minimalist_printer_1aa3785117cc9d6e4047d0116ff6b8f64f" kindref="member">_impl</ref>-&gt;_current_test<sp/>=<sp/>std::string()</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>test_info.test_case_name()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>test_info.name()</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>type<sp/>param<sp/>or<sp/>value<sp/>param<sp/>information<sp/>when<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>((vp<sp/>||<sp/>tp)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>(vp<sp/>?<sp/>vp:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>(tp<sp/>?<sp/>tp:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="classhyrise_1_1testing_1_1_minimalist_printer_1aa3785117cc9d6e4047d0116ff6b8f64f" kindref="member">_impl</ref>-&gt;_current_test.c_str());</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="classhyrise_1_1testing_1_1_minimalist_printer_1ad5ecca3f667754350a8e7f0498829155" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhyrise_1_1testing_1_1_minimalist_printer_1ad5ecca3f667754350a8e7f0498829155" kindref="member">MinimalistPrinter::OnTestPartResult</ref>(const<sp/>::testing::TestPartResult<sp/>&amp;test_part_result)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_part_result.failed())<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhyrise_1_1testing_1_1_minimalist_printer_1aa3785117cc9d6e4047d0116ff6b8f64f" kindref="member">_impl</ref>-&gt;_tests[<ref refid="classhyrise_1_1testing_1_1_minimalist_printer_1aa3785117cc9d6e4047d0116ff6b8f64f" kindref="member">_impl</ref>-&gt;_current_test].push_back(test_part_result);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="classhyrise_1_1testing_1_1_minimalist_printer_1ae952b86f7f962dbca188ea81ae6b2a3f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhyrise_1_1testing_1_1_minimalist_printer_1ae952b86f7f962dbca188ea81ae6b2a3f" kindref="member">MinimalistPrinter::OnTestEnd</ref>(const<sp/>::testing::TestInfo<sp/>&amp;test_info)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/><ref refid="classhyrise_1_1testing_1_1_minimalist_printer_1aa3785117cc9d6e4047d0116ff6b8f64f" kindref="member">_impl</ref>-&gt;_current_test.length();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>previously<sp/>printed<sp/>testname<sp/>and<sp/>replace<sp/>with<sp/>.<sp/>or<sp/>F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s%s%s%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(len,<sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">).c_str(),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(len,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>).c_str(),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(len,<sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">).c_str(),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhyrise_1_1testing_1_1_minimalist_printer_1aa3785117cc9d6e4047d0116ff6b8f64f" kindref="member">_impl</ref>-&gt;_tests[<ref refid="classhyrise_1_1testing_1_1_minimalist_printer_1aa3785117cc9d6e4047d0116ff6b8f64f" kindref="member">_impl</ref>-&gt;_current_test].size()<sp/>&gt;<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classhyrise_1_1testing_1_1_minimalist_printer_1a011ef01f6c7509755bedc06e9d93e6bd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhyrise_1_1testing_1_1_minimalist_printer_1a011ef01f6c7509755bedc06e9d93e6bd" kindref="member">MinimalistPrinter::OnTestProgramEnd</ref>(const<sp/>::testing::UnitTest<sp/>&amp;unit)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;_tests<sp/>=<sp/><ref refid="classhyrise_1_1testing_1_1_minimalist_printer_1aa3785117cc9d6e4047d0116ff6b8f64f" kindref="member">_impl</ref>-&gt;_tests;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>failed_tests<sp/>=<sp/>std::accumulate(_tests.begin(),<sp/>_tests.end(),<sp/>0u,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>acc,<sp/>decltype(*_tests.begin())<sp/>value)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc<sp/>+<sp/>value.second.size();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>kvs:<sp/>_tests)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kvs.second.size())</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>kvs.first.c_str());</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>test_part_result:<sp/>kvs.second)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s:%d:<sp/>Failure\n%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.file_name(),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.line_number(),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.summary());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&gt;<sp/>%lu<sp/>errors<sp/>(out<sp/>of<sp/>%lu<sp/>tests)\n&quot;</highlight><highlight class="normal">,<sp/>failed_tests,<sp/>_tests.size());</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hyrise::testing</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/vagrant/lanice/src/lib/testing/MinimalistPrinter.cpp"/>
  </compounddef>
</doxygen>
