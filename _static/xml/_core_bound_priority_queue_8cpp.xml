<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="_core_bound_priority_queue_8cpp" kind="file">
    <compoundname>CoreBoundPriorityQueue.cpp</compoundname>
    <includes refid="_core_bound_priority_queue_8h" local="yes">CoreBoundPriorityQueue.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">sched.h</includes>
    <incdepgraph>
      <node id="18700">
        <label>atomic</label>
      </node>
      <node id="18689">
        <label>AbstractCoreBoundQueue.h</label>
        <link refid="_abstract_core_bound_queue_8h"/>
        <childnode refid="18690" relation="include">
        </childnode>
        <childnode refid="18700" relation="include">
        </childnode>
      </node>
      <node id="18694">
        <label>queue</label>
      </node>
      <node id="18703">
        <label>errno.h</label>
      </node>
      <node id="18697">
        <label>taskscheduler/Task.h</label>
        <link refid="_task_8h"/>
        <childnode refid="18698" relation="include">
        </childnode>
        <childnode refid="18692" relation="include">
        </childnode>
        <childnode refid="18691" relation="include">
        </childnode>
        <childnode refid="18695" relation="include">
        </childnode>
        <childnode refid="18699" relation="include">
        </childnode>
      </node>
      <node id="18699">
        <label>string</label>
      </node>
      <node id="18701">
        <label>tbb/concurrent_priority_queue.h</label>
      </node>
      <node id="18688">
        <label>CoreBoundPriorityQueue.h</label>
        <link refid="_core_bound_priority_queue_8h"/>
        <childnode refid="18689" relation="include">
        </childnode>
        <childnode refid="18698" relation="include">
        </childnode>
        <childnode refid="18694" relation="include">
        </childnode>
        <childnode refid="18701" relation="include">
        </childnode>
      </node>
      <node id="18687">
        <label>src/lib/taskscheduler/CoreBoundPriorityQueue.cpp</label>
        <link refid="CoreBoundPriorityQueue.cpp"/>
        <childnode refid="18688" relation="include">
        </childnode>
        <childnode refid="18702" relation="include">
        </childnode>
        <childnode refid="18703" relation="include">
        </childnode>
        <childnode refid="18704" relation="include">
        </childnode>
        <childnode refid="18705" relation="include">
        </childnode>
        <childnode refid="18706" relation="include">
        </childnode>
      </node>
      <node id="18695">
        <label>condition_variable</label>
      </node>
      <node id="18704">
        <label>string.h</label>
      </node>
      <node id="18698">
        <label>vector</label>
      </node>
      <node id="18690">
        <label>taskscheduler/AbstractTaskQueue.h</label>
        <link refid="_abstract_task_queue_8h"/>
        <childnode refid="18691" relation="include">
        </childnode>
        <childnode refid="18692" relation="include">
        </childnode>
        <childnode refid="18693" relation="include">
        </childnode>
        <childnode refid="18694" relation="include">
        </childnode>
        <childnode refid="18695" relation="include">
        </childnode>
        <childnode refid="18696" relation="include">
        </childnode>
        <childnode refid="18697" relation="include">
        </childnode>
      </node>
      <node id="18702">
        <label>iostream</label>
      </node>
      <node id="18692">
        <label>mutex</label>
      </node>
      <node id="18693">
        <label>thread</label>
      </node>
      <node id="18705">
        <label>algorithm</label>
      </node>
      <node id="18706">
        <label>sched.h</label>
      </node>
      <node id="18696">
        <label>log4cxx/logger.h</label>
      </node>
      <node id="18691">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>CoreBoundPriorityQueue.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Apr<sp/>4,<sp/>2013</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>jwust</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_core_bound_priority_queue_8h" kindref="compound">CoreBoundPriorityQueue.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sched.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="class_core_bound_priority_queue_1a9a2e3accc80e39bb9ef183990db447ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_core_bound_priority_queue_1a9a2e3accc80e39bb9ef183990db447ad" kindref="member">CoreBoundPriorityQueue::executeTask</ref>()<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//infinite<sp/>thread<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//block<sp/>protected<sp/>by<sp/>_threadStatusMutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_abstract_core_bound_queue_1ae3052e927bc180940af268739d3cd156" kindref="member">_status</ref><sp/>==<sp/><ref refid="class_abstract_task_queue_1a181ee22624d1fe15e03534b049ca7447ab5b55d5fec71f3976fb1767477475a69" kindref="member">TO_STOP</ref>)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>task<sp/>and<sp/>execute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Task&gt;<sp/>task;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_core_bound_priority_queue_1acb8f6013cdd474b04c2850f8ed3a1b71" kindref="member">_runQueue</ref>.try_pop(task);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>queue<sp/>to<sp/>_blocked<sp/>as<sp/>we<sp/>run<sp/>task;<sp/>this<sp/>is<sp/>a<sp/>simple<sp/>mechanism<sp/>to<sp/>avoid<sp/>that<sp/>further<sp/>tasks<sp/>are<sp/>pushed<sp/>to<sp/>this<sp/>queue<sp/>if<sp/>a<sp/>long<sp/>running<sp/>task<sp/>is<sp/>executed;<sp/>check<sp/>WSSimpleTaskScheduler<sp/>for<sp/>task<sp/>stealing<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_core_bound_priority_queue_1a01158b703f353404b2403638dc377eb3" kindref="member">_blocked</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//LOG4CXX_DEBUG(logger,<sp/>&quot;Started<sp/>executing<sp/>task&quot;<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>&amp;task<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/>&quot;<sp/>on<sp/>core<sp/>&quot;<sp/>&lt;&lt;<sp/>_core);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Executed<sp/>task<sp/>&quot;<sp/>&lt;&lt;<sp/>task-&gt;vname()<sp/>&lt;&lt;<sp/>&quot;;<sp/>hex<sp/>&quot;<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>&amp;task<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/>&quot;<sp/>on<sp/>core<sp/>&quot;<sp/>&lt;&lt;<sp/>_core&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*task)();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG4CXX_DEBUG(<ref refid="class_abstract_core_bound_queue_1aaa808d78eed24b10236611a12baa90c6" kindref="member">logger</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Executed<sp/>task<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>task-&gt;vname()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>hex<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>&amp;task<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>on<sp/>core<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_abstract_core_bound_queue_1ac95d664429941c1498f375e957646137" kindref="member">_core</ref>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>notify<sp/>done<sp/>observers<sp/>that<sp/>task<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>task-&gt;notifyDoneObservers();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_core_bound_priority_queue_1a01158b703f353404b2403638dc377eb3" kindref="member">_blocked</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>task<sp/>in<sp/>runQueue<sp/>-&gt;<sp/>sleep<sp/>and<sp/>wait<sp/>for<sp/>new<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>queue<sp/>still<sp/>empty<sp/>go<sp/>to<sp/>sleep<sp/>and<sp/>wait<sp/>until<sp/>new<sp/>tasks<sp/>have<sp/>been<sp/>arrived</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_core_bound_priority_queue_1acb8f6013cdd474b04c2850f8ed3a1b71" kindref="member">_runQueue</ref>.size()<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>thread<sp/>is<sp/>about<sp/>to<sp/>stop,<sp/>break<sp/>execution<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_abstract_core_bound_queue_1ae3052e927bc180940af268739d3cd156" kindref="member">_status</ref><sp/>!=<sp/><ref refid="class_abstract_task_queue_1a181ee22624d1fe15e03534b049ca7447abbf46a2afa080c3f9d355c407beaa902" kindref="member">RUN</ref>)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;queue<sp/>&quot;<sp/>&lt;&lt;<sp/>_core<sp/>&lt;&lt;<sp/>&quot;<sp/>sleeping<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>ul(<ref refid="class_abstract_core_bound_queue_1ab57cf781e1daa5985057b5f1a471b5d2" kindref="member">_queueMutex</ref>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_abstract_core_bound_queue_1aef36fd9aa88f29f500516395d3160e36" kindref="member">_condition</ref>.wait(ul);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="class_core_bound_priority_queue_1abfaf0d6f8bf23c305de0cfb01d1924eb" refkind="member"><highlight class="normal"><ref refid="class_core_bound_priority_queue_1abfaf0d6f8bf23c305de0cfb01d1924eb" kindref="member">CoreBoundPriorityQueue::CoreBoundPriorityQueue</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>core):<sp/><ref refid="class_abstract_core_bound_queue" kindref="compound">AbstractCoreBoundQueue</ref>(),<sp/>_blocked(false)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_core_bound_queue_1ac95d664429941c1498f375e957646137" kindref="member">_core</ref><sp/>=<sp/>core;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_core_bound_queue_1a33d99e5749f26892bb2fc917adc52eef" kindref="member">launchThread</ref>(<ref refid="class_abstract_core_bound_queue_1ac95d664429941c1498f375e957646137" kindref="member">_core</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="class_core_bound_priority_queue_1a95f08da33da7ca42df868743ce96bc6d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_core_bound_priority_queue_1a95f08da33da7ca42df868743ce96bc6d" kindref="member">CoreBoundPriorityQueue::push</ref>(std::shared_ptr&lt;Task&gt;<sp/>task)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;TASKQUEUE:<sp/>task:<sp/>&quot;<sp/><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>(void<sp/>*<sp/>)task.get()<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/>&quot;<sp/>pushed<sp/>to<sp/>queue<sp/>&quot;<sp/>&lt;&lt;<sp/>_core<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="class_core_bound_priority_queue_1acb8f6013cdd474b04c2850f8ed3a1b71" kindref="member">_runQueue</ref>.push(task);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_core_bound_queue_1aef36fd9aa88f29f500516395d3160e36" kindref="member">_condition</ref>.notify_one();</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_core_bound_priority_queue_1a425c2ffbc469338374628a3054f9b5df" refkind="member"><highlight class="normal">std::vector&lt;std::shared_ptr&lt;Task&gt;<sp/>&gt;<sp/><ref refid="class_core_bound_priority_queue_1a425c2ffbc469338374628a3054f9b5df" kindref="member">CoreBoundPriorityQueue::stopQueue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_abstract_core_bound_queue_1ae3052e927bc180940af268739d3cd156" kindref="member">_status</ref><sp/>!=<sp/><ref refid="class_abstract_task_queue_1a181ee22624d1fe15e03534b049ca7447a16003f747b26f2b4d59ec96bdbe5d3ed" kindref="member">STOPPED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>thread<sp/>to<sp/>be<sp/>stopped<sp/>is<sp/>either<sp/>executing<sp/>a<sp/>task,<sp/>or<sp/>waits<sp/>for<sp/>the<sp/>condition<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>status<sp/>to<sp/>&quot;TO_STOP&quot;<sp/>so<sp/>that<sp/>the<sp/>thread<sp/>either<sp/>quits<sp/>after<sp/>executing<sp/>the<sp/>task,<sp/>or<sp/>after<sp/>having<sp/>been<sp/>notified<sp/>by<sp/>the<sp/>condition<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lk(<ref refid="class_abstract_core_bound_queue_1ab57cf781e1daa5985057b5f1a471b5d2" kindref="member">_queueMutex</ref>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_abstract_core_bound_queue_1ae3052e927bc180940af268739d3cd156" kindref="member">_status</ref><sp/>=<sp/><ref refid="class_abstract_task_queue_1a181ee22624d1fe15e03534b049ca7447ab5b55d5fec71f3976fb1767477475a69" kindref="member">TO_STOP</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wake<sp/>up<sp/>thread<sp/>in<sp/>case<sp/>thread<sp/>is<sp/>sleeping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_abstract_core_bound_queue_1aef36fd9aa88f29f500516395d3160e36" kindref="member">_condition</ref>.notify_one();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_abstract_core_bound_queue_1a85ec39df5b0715322bd2377d131f61c2" kindref="member">_thread</ref>-&gt;join();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_abstract_core_bound_queue_1a85ec39df5b0715322bd2377d131f61c2" kindref="member">_thread</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//just<sp/>to<sp/>make<sp/>sure<sp/>it<sp/>points<sp/>to<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_abstract_core_bound_queue_1a85ec39df5b0715322bd2377d131f61c2" kindref="member">_thread</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_abstract_core_bound_queue_1ae3052e927bc180940af268739d3cd156" kindref="member">_status</ref><sp/>=<sp/><ref refid="class_abstract_task_queue_1a181ee22624d1fe15e03534b049ca7447a16003f747b26f2b4d59ec96bdbe5d3ed" kindref="member">STOPPED</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_core_bound_priority_queue_1ab48b865d617ed792b2febdd18109d5cd" kindref="member">emptyQueue</ref>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="class_core_bound_priority_queue_1ab48b865d617ed792b2febdd18109d5cd" refkind="member"><highlight class="normal">std::vector&lt;std::shared_ptr&lt;Task&gt;<sp/>&gt;<sp/><ref refid="class_core_bound_priority_queue_1ab48b865d617ed792b2febdd18109d5cd" kindref="member">CoreBoundPriorityQueue::emptyQueue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>empty<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Task&gt;<sp/>&gt;<sp/>tmp;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lk(<ref refid="class_abstract_core_bound_queue_1ab57cf781e1daa5985057b5f1a471b5d2" kindref="member">_queueMutex</ref>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//move<sp/>all<sp/>elements<sp/>to<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Task&gt;<sp/>task;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>size<sp/>=<sp/><ref refid="class_core_bound_priority_queue_1acb8f6013cdd474b04c2850f8ed3a1b71" kindref="member">_runQueue</ref>.size();<sp/>i<sp/>&lt;<sp/>size;<sp/>i++){</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_core_bound_priority_queue_1acb8f6013cdd474b04c2850f8ed3a1b71" kindref="member">_runQueue</ref>.try_pop(task);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.push_back(task);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>empty<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="class_core_bound_priority_queue_1a281535c756c53fbe3bc55582bdab3369" refkind="member"><highlight class="normal"><ref refid="class_core_bound_priority_queue_1a281535c756c53fbe3bc55582bdab3369" kindref="member">CoreBoundPriorityQueue::~CoreBoundPriorityQueue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_abstract_core_bound_queue_1a85ec39df5b0715322bd2377d131f61c2" kindref="member">_thread</ref><sp/>!=<sp/>NULL)<sp/><ref refid="class_core_bound_priority_queue_1a425c2ffbc469338374628a3054f9b5df" kindref="member">stopQueue</ref>();</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/lanice/develop/epic/hyrise/src/lib/taskscheduler/CoreBoundPriorityQueue.cpp"/>
  </compounddef>
</doxygen>
