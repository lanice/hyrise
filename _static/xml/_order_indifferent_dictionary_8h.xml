<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="_order_indifferent_dictionary_8h" kind="file">
    <compoundname>OrderIndifferentDictionary.h</compoundname>
    <includes local="no">exception</includes>
    <includes local="no">vector</includes>
    <includes local="no">map</includes>
    <includes local="no">memory</includes>
    <includes local="no">limits.h</includes>
    <includes refid="storage__types_8h" local="yes">storage/storage_types.h</includes>
    <includes refid="_base_dictionary_8h" local="yes">storage/BaseDictionary.h</includes>
    <includes refid="_dictionary_iterator_8h" local="yes">storage/DictionaryIterator.h</includes>
    <includedby refid="_expression_scan_8cpp" local="yes">src/lib/access/ExpressionScan.cpp</includedby>
    <includedby refid="lib_2access_2_group_by_scan_8cpp" local="yes">src/lib/access/GroupByScan.cpp</includedby>
    <includedby refid="_layouter_8cpp" local="yes">src/lib/access/Layouter.cpp</includedby>
    <includedby refid="_table_builder_8cpp" local="yes">src/lib/storage/TableBuilder.cpp</includedby>
    <includedby refid="_value_id_map_8hpp" local="no">src/lib/storage/ValueIdMap.hpp</includedby>
    <incdepgraph>
      <node id="16259">
        <label>storage/BaseIterator.h</label>
        <link refid="_base_iterator_8h"/>
      </node>
      <node id="16256">
        <label>storage/BaseDictionary.h</label>
        <link refid="_base_dictionary_8h"/>
        <childnode refid="16251" relation="include">
        </childnode>
        <childnode refid="16257" relation="include">
        </childnode>
        <childnode refid="16258" relation="include">
        </childnode>
      </node>
      <node id="16260">
        <label>boost/iterator/iterator_facade.hpp</label>
      </node>
      <node id="16258">
        <label>storage/DictionaryIterator.h</label>
        <link refid="_dictionary_iterator_8h"/>
        <childnode refid="16259" relation="include">
        </childnode>
        <childnode refid="16260" relation="include">
        </childnode>
      </node>
      <node id="16254">
        <label>stdint.h</label>
      </node>
      <node id="16245">
        <label>src/lib/storage/OrderIndifferentDictionary.h</label>
        <link refid="OrderIndifferentDictionary.h"/>
        <childnode refid="16246" relation="include">
        </childnode>
        <childnode refid="16247" relation="include">
        </childnode>
        <childnode refid="16248" relation="include">
        </childnode>
        <childnode refid="16249" relation="include">
        </childnode>
        <childnode refid="16250" relation="include">
        </childnode>
        <childnode refid="16251" relation="include">
        </childnode>
        <childnode refid="16256" relation="include">
        </childnode>
        <childnode refid="16258" relation="include">
        </childnode>
      </node>
      <node id="16253">
        <label>stdexcept</label>
      </node>
      <node id="16252">
        <label>string</label>
      </node>
      <node id="16248">
        <label>map</label>
      </node>
      <node id="16246">
        <label>exception</label>
      </node>
      <node id="16255">
        <label>ostream</label>
      </node>
      <node id="16250">
        <label>limits.h</label>
      </node>
      <node id="16251">
        <label>storage/storage_types.h</label>
        <link refid="storage__types_8h"/>
        <childnode refid="16247" relation="include">
        </childnode>
        <childnode refid="16252" relation="include">
        </childnode>
        <childnode refid="16253" relation="include">
        </childnode>
        <childnode refid="16254" relation="include">
        </childnode>
        <childnode refid="16255" relation="include">
        </childnode>
      </node>
      <node id="16247">
        <label>vector</label>
      </node>
      <node id="16257">
        <label>storage/AbstractDictionary.h</label>
        <link refid="_abstract_dictionary_8h"/>
        <childnode refid="16247" relation="include">
        </childnode>
        <childnode refid="16252" relation="include">
        </childnode>
        <childnode refid="16249" relation="include">
        </childnode>
        <childnode refid="16251" relation="include">
        </childnode>
      </node>
      <node id="16249">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="16279">
        <label>src/bin/perf_regression/ProjectionScan.cpp</label>
        <link refid="bin_2perf__regression_2_projection_scan_8cpp"/>
      </node>
      <node id="16302">
        <label>src/lib/access/expressions/GenericExpressions.h</label>
        <link refid="_generic_expressions_8h"/>
        <childnode refid="16303" relation="include">
        </childnode>
      </node>
      <node id="16288">
        <label>src/lib/access/expressions/pred_CompoundExpression.h</label>
        <link refid="pred___compound_expression_8h"/>
        <childnode refid="16269" relation="include">
        </childnode>
        <childnode refid="16289" relation="include">
        </childnode>
      </node>
      <node id="16293">
        <label>src/lib/access/expressions/pred_GreaterThanExpression.h</label>
        <link refid="pred___greater_than_expression_8h"/>
        <childnode refid="16269" relation="include">
        </childnode>
      </node>
      <node id="16281">
        <label>src/bin/perf_regression/SortScan.cpp</label>
        <link refid="bin_2perf__regression_2_sort_scan_8cpp"/>
      </node>
      <node id="16263">
        <label>src/lib/access/GroupByScan.cpp</label>
        <link refid="lib_2access_2_group_by_scan_8cpp"/>
      </node>
      <node id="16270">
        <label>src/lib/access/expressions/pred_buildExpression.cpp</label>
        <link refid="pred__build_expression_8cpp"/>
      </node>
      <node id="16272">
        <label>src/lib/access/JoinScan.h</label>
        <link refid="_join_scan_8h"/>
        <childnode refid="16273" relation="include">
        </childnode>
        <childnode refid="16274" relation="include">
        </childnode>
      </node>
      <node id="16296">
        <label>src/lib/access/LayoutTable.cpp</label>
        <link refid="_layout_table_8cpp"/>
      </node>
      <node id="16280">
        <label>src/bin/perf_regression/SimpleTableScan.cpp</label>
        <link refid="bin_2perf__regression_2_simple_table_scan_8cpp"/>
      </node>
      <node id="16283">
        <label>src/lib/access/MergeJoin.hpp</label>
        <link refid="_merge_join_8hpp"/>
        <childnode refid="16274" relation="include">
        </childnode>
      </node>
      <node id="16290">
        <label>src/lib/access/expressions/pred_PredicateBuilder.cpp</label>
        <link refid="pred___predicate_builder_8cpp"/>
      </node>
      <node id="16261">
        <label>src/lib/storage/OrderIndifferentDictionary.h</label>
        <link refid="OrderIndifferentDictionary.h"/>
        <childnode refid="16262" relation="include">
        </childnode>
        <childnode refid="16263" relation="include">
        </childnode>
        <childnode refid="16264" relation="include">
        </childnode>
        <childnode refid="16265" relation="include">
        </childnode>
        <childnode refid="16266" relation="include">
        </childnode>
      </node>
      <node id="16299">
        <label>src/lib/storage/Store.h</label>
        <link refid="_store_8h"/>
        <childnode refid="16300" relation="include">
        </childnode>
        <childnode refid="16301" relation="include">
        </childnode>
        <childnode refid="16302" relation="include">
        </childnode>
        <childnode refid="16304" relation="include">
        </childnode>
        <childnode refid="16296" relation="include">
        </childnode>
        <childnode refid="16305" relation="include">
        </childnode>
        <childnode refid="16306" relation="include">
        </childnode>
        <childnode refid="16287" relation="include">
        </childnode>
        <childnode refid="16307" relation="include">
        </childnode>
        <childnode refid="16308" relation="include">
        </childnode>
        <childnode refid="16309" relation="include">
        </childnode>
        <childnode refid="16310" relation="include">
        </childnode>
        <childnode refid="16297" relation="include">
        </childnode>
        <childnode refid="16311" relation="include">
        </childnode>
        <childnode refid="16312" relation="include">
        </childnode>
        <childnode refid="16313" relation="include">
        </childnode>
        <childnode refid="16314" relation="include">
        </childnode>
        <childnode refid="16315" relation="include">
        </childnode>
        <childnode refid="16316" relation="include">
        </childnode>
        <childnode refid="16317" relation="include">
        </childnode>
        <childnode refid="16318" relation="include">
        </childnode>
        <childnode refid="16319" relation="include">
        </childnode>
      </node>
      <node id="16307">
        <label>src/lib/access/storage/JsonTable.cpp</label>
        <link refid="_json_table_8cpp"/>
      </node>
      <node id="16269">
        <label>src/lib/access/expressions/predicates.h</label>
        <link refid="predicates_8h"/>
        <childnode refid="16270" relation="include">
        </childnode>
        <childnode refid="16271" relation="include">
        </childnode>
        <childnode refid="16272" relation="include">
        </childnode>
        <childnode refid="16283" relation="include">
        </childnode>
        <childnode refid="16274" relation="include">
        </childnode>
      </node>
      <node id="16295">
        <label>src/lib/storage/SequentialHeapMerger.h</label>
        <link refid="_sequential_heap_merger_8h"/>
        <childnode refid="16296" relation="include">
        </childnode>
        <childnode refid="16297" relation="include">
        </childnode>
        <childnode refid="16298" relation="include">
        </childnode>
        <childnode refid="16299" relation="include">
        </childnode>
        <childnode refid="16320" relation="include">
        </childnode>
        <childnode refid="16319" relation="include">
        </childnode>
      </node>
      <node id="16315">
        <label>src/lib/storage/AbstractTable.cpp</label>
        <link refid="_abstract_table_8cpp"/>
      </node>
      <node id="16267">
        <label>src/lib/access/expressions/pred_common.h</label>
        <link refid="pred__common_8h"/>
        <childnode refid="16268" relation="include">
        </childnode>
        <childnode refid="16284" relation="include">
        </childnode>
        <childnode refid="16285" relation="include">
        </childnode>
        <childnode refid="16288" relation="include">
        </childnode>
        <childnode refid="16291" relation="include">
        </childnode>
        <childnode refid="16293" relation="include">
        </childnode>
        <childnode refid="16294" relation="include">
        </childnode>
        <childnode refid="16289" relation="include">
        </childnode>
      </node>
      <node id="16275">
        <label>src/bin/perf_regression/GroupByScan.cpp</label>
        <link refid="bin_2perf__regression_2_group_by_scan_8cpp"/>
      </node>
      <node id="16297">
        <label>src/lib/io/Loader.cpp</label>
        <link refid="_loader_8cpp"/>
      </node>
      <node id="16271">
        <label>src/lib/access/expressions/pred_expression_factory.h</label>
        <link refid="pred__expression__factory_8h"/>
        <childnode refid="16269" relation="include">
        </childnode>
        <childnode refid="16270" relation="include">
        </childnode>
      </node>
      <node id="16318">
        <label>src/lib/storage/Store.cpp</label>
        <link refid="_store_8cpp"/>
      </node>
      <node id="16314">
        <label>src/lib/io/TransactionManager.cpp</label>
        <link refid="_transaction_manager_8cpp"/>
      </node>
      <node id="16265">
        <label>src/lib/storage/TableBuilder.cpp</label>
        <link refid="_table_builder_8cpp"/>
      </node>
      <node id="16313">
        <label>src/lib/io/TableDump.cpp</label>
        <link refid="_table_dump_8cpp"/>
      </node>
      <node id="16319">
        <label>src/lib/storage.h</label>
        <link refid="storage_8h"/>
        <childnode refid="16275" relation="include">
        </childnode>
        <childnode refid="16276" relation="include">
        </childnode>
        <childnode refid="16277" relation="include">
        </childnode>
        <childnode refid="16278" relation="include">
        </childnode>
        <childnode refid="16279" relation="include">
        </childnode>
        <childnode refid="16280" relation="include">
        </childnode>
        <childnode refid="16281" relation="include">
        </childnode>
        <childnode refid="16282" relation="include">
        </childnode>
      </node>
      <node id="16291">
        <label>src/lib/access/expressions/pred_EqualsExpression.h</label>
        <link refid="pred___equals_expression_8h"/>
        <childnode refid="16292" relation="include">
        </childnode>
        <childnode refid="16269" relation="include">
        </childnode>
      </node>
      <node id="16292">
        <label>src/bin/perf_regression/scan_performance.cpp</label>
        <link refid="scan__performance_8cpp"/>
      </node>
      <node id="16285">
        <label>src/lib/access/expressions/pred_buildExpression.h</label>
        <link refid="pred__build_expression_8h"/>
        <childnode refid="16270" relation="include">
        </childnode>
        <childnode refid="16269" relation="include">
        </childnode>
        <childnode refid="16286" relation="include">
        </childnode>
        <childnode refid="16287" relation="include">
        </childnode>
      </node>
      <node id="16316">
        <label>src/lib/storage/PointerCalculator.cpp</label>
        <link refid="_pointer_calculator_8cpp"/>
      </node>
      <node id="16304">
        <label>src/lib/access/InsertScan.cpp</label>
        <link refid="_insert_scan_8cpp"/>
      </node>
      <node id="16308">
        <label>src/lib/access/storage/TableIO.cpp</label>
        <link refid="_table_i_o_8cpp"/>
      </node>
      <node id="16298">
        <label>src/lib/storage/SequentialHeapMerger.cpp</label>
        <link refid="_sequential_heap_merger_8cpp"/>
      </node>
      <node id="16321">
        <label>src/lib/storage/Table.cpp</label>
        <link refid="_table_8cpp"/>
      </node>
      <node id="16300">
        <label>src/bin/perf_regression/tx_performance.cpp</label>
        <link refid="tx__performance_8cpp"/>
      </node>
      <node id="16289">
        <label>src/lib/access/expressions/pred_PredicateBuilder.h</label>
        <link refid="pred___predicate_builder_8h"/>
        <childnode refid="16269" relation="include">
        </childnode>
        <childnode refid="16290" relation="include">
        </childnode>
      </node>
      <node id="16311">
        <label>src/lib/io/MPassCSVLoader.cpp</label>
        <link refid="_m_pass_c_s_v_loader_8cpp"/>
      </node>
      <node id="16268">
        <label>src/lib/access/expressions/pred_BetweenOperation.h</label>
        <link refid="pred___between_operation_8h"/>
        <childnode refid="16269" relation="include">
        </childnode>
      </node>
      <node id="16294">
        <label>src/lib/access/expressions/pred_LessThanExpression.h</label>
        <link refid="pred___less_than_expression_8h"/>
        <childnode refid="16269" relation="include">
        </childnode>
      </node>
      <node id="16262">
        <label>src/lib/access/ExpressionScan.cpp</label>
        <link refid="_expression_scan_8cpp"/>
      </node>
      <node id="16287">
        <label>src/lib/access/SimpleTableScan.cpp</label>
        <link refid="lib_2access_2_simple_table_scan_8cpp"/>
      </node>
      <node id="16310">
        <label>src/lib/access/UpdateScan.cpp</label>
        <link refid="_update_scan_8cpp"/>
      </node>
      <node id="16301">
        <label>src/lib/access/Delete.cpp</label>
        <link refid="_delete_8cpp"/>
      </node>
      <node id="16282">
        <label>src/bin/perf_regression/UnionScan.cpp</label>
        <link refid="bin_2perf__regression_2_union_scan_8cpp"/>
      </node>
      <node id="16266">
        <label>src/lib/storage/ValueIdMap.hpp</label>
        <link refid="_value_id_map_8hpp"/>
        <childnode refid="16267" relation="include">
        </childnode>
        <childnode refid="16295" relation="include">
        </childnode>
        <childnode refid="16321" relation="include">
        </childnode>
        <childnode refid="16319" relation="include">
        </childnode>
      </node>
      <node id="16306">
        <label>src/lib/access/PosUpdateScan.cpp</label>
        <link refid="_pos_update_scan_8cpp"/>
      </node>
      <node id="16286">
        <label>src/lib/access/SimpleRawTableScan.cpp</label>
        <link refid="_simple_raw_table_scan_8cpp"/>
      </node>
      <node id="16309">
        <label>src/lib/access/tx/ValidatePositions.cpp</label>
        <link refid="_validate_positions_8cpp"/>
      </node>
      <node id="16273">
        <label>src/lib/access/JoinScan.cpp</label>
        <link refid="lib_2access_2_join_scan_8cpp"/>
      </node>
      <node id="16278">
        <label>src/bin/perf_regression/JoinScan.cpp</label>
        <link refid="bin_2perf__regression_2_join_scan_8cpp"/>
      </node>
      <node id="16274">
        <label>src/lib/access.h</label>
        <link refid="access_8h"/>
        <childnode refid="16275" relation="include">
        </childnode>
        <childnode refid="16276" relation="include">
        </childnode>
        <childnode refid="16277" relation="include">
        </childnode>
        <childnode refid="16278" relation="include">
        </childnode>
        <childnode refid="16279" relation="include">
        </childnode>
        <childnode refid="16280" relation="include">
        </childnode>
        <childnode refid="16281" relation="include">
        </childnode>
        <childnode refid="16282" relation="include">
        </childnode>
      </node>
      <node id="16312">
        <label>src/lib/io/shortcuts.cpp</label>
        <link refid="shortcuts_8cpp"/>
      </node>
      <node id="16276">
        <label>src/bin/perf_regression/HashJoin.cpp</label>
        <link refid="_hash_join_8cpp"/>
      </node>
      <node id="16305">
        <label>src/lib/access/MergeTable.cpp</label>
        <link refid="_merge_table_8cpp"/>
      </node>
      <node id="16303">
        <label>src/lib/access/expressions/GenericExpressions.cpp</label>
        <link refid="_generic_expressions_8cpp"/>
      </node>
      <node id="16317">
        <label>src/lib/storage/PrettyPrinter.cpp</label>
        <link refid="_pretty_printer_8cpp"/>
      </node>
      <node id="16264">
        <label>src/lib/access/Layouter.cpp</label>
        <link refid="_layouter_8cpp"/>
      </node>
      <node id="16320">
        <label>src/lib/storage/TableGenerator.cpp</label>
        <link refid="_table_generator_8cpp"/>
      </node>
      <node id="16284">
        <label>src/lib/access/expressions/pred_SimpleFieldExpression.h</label>
        <link refid="pred___simple_field_expression_8h"/>
        <childnode refid="16267" relation="include">
        </childnode>
        <childnode refid="16269" relation="include">
        </childnode>
      </node>
      <node id="16277">
        <label>src/bin/perf_regression/HashValueJoin.cpp</label>
        <link refid="_hash_value_join_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_order_indifferent_dictionary_iterator" prot="public">OrderIndifferentDictionaryIterator</innerclass>
    <innerclass refid="class_order_indifferent_dictionary" prot="public">OrderIndifferentDictionary</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SRC_LIB_STORAGE_ORDERINDIFFERENTDICTIONARY_H_</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SRC_LIB_STORAGE_ORDERINDIFFERENTDICTIONARY_H_</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="storage__types_8h" kindref="compound">storage/storage_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_base_dictionary_8h" kindref="compound">storage/BaseDictionary.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_dictionary_iterator_8h" kindref="compound">storage/DictionaryIterator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME<sp/>should<sp/>be<sp/>aware<sp/>of<sp/>allocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="19" refid="class_order_indifferent_dictionary_iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_order_indifferent_dictionary_iterator" kindref="compound">OrderIndifferentDictionaryIterator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_base_iterator" kindref="compound">BaseIterator</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="class_order_indifferent_dictionary_iterator_1abcd7cacd84aa92a4efe1ba989b4e6c59" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::map&lt;T,<sp/>value_id_t&gt;::iterator<sp/><ref refid="class_order_indifferent_dictionary_iterator_1abcd7cacd84aa92a4efe1ba989b4e6c59" kindref="member">iterator_t</ref>;</highlight></codeline>
<codeline lineno="23" refid="class_order_indifferent_dictionary_iterator_1ae20a2bf293de8d2b91b056c344e2268b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_order_indifferent_dictionary_iterator_1abcd7cacd84aa92a4efe1ba989b4e6c59" kindref="member">iterator_t</ref><sp/><ref refid="class_order_indifferent_dictionary_iterator_1ae20a2bf293de8d2b91b056c344e2268b" kindref="member">_it</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="class_order_indifferent_dictionary_iterator_1ab692a85e39bb695ef2445c6b5b6c014b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_order_indifferent_dictionary_iterator_1ab692a85e39bb695ef2445c6b5b6c014b" kindref="member">OrderIndifferentDictionaryIterator</ref>():<sp/><ref refid="class_order_indifferent_dictionary_iterator_1ae20a2bf293de8d2b91b056c344e2268b" kindref="member">_it</ref>(<ref refid="csb__tree_8cpp_1ab979d9d4b4923f7c54d6caa6e1a61936" kindref="member">nullptr</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="class_order_indifferent_dictionary_iterator_1af1b5db73b0e98e78426dc728b712711d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_iterator_1af1b5db73b0e98e78426dc728b712711d" kindref="member">OrderIndifferentDictionaryIterator</ref>(<ref refid="class_order_indifferent_dictionary_iterator_1abcd7cacd84aa92a4efe1ba989b4e6c59" kindref="member">iterator_t</ref><sp/>it):<sp/><ref refid="class_order_indifferent_dictionary_iterator_1ae20a2bf293de8d2b91b056c344e2268b" kindref="member">_it</ref>(it)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;order<sp/>indifferent<sp/>dict<sp/>it<sp/>copy<sp/>constr&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="class_order_indifferent_dictionary_iterator_1a61c5a1d30c3c9535a2f696e718a6c90a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_iterator_1a61c5a1d30c3c9535a2f696e718a6c90a" kindref="member">increment</ref>()<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="class_order_indifferent_dictionary_iterator_1ae20a2bf293de8d2b91b056c344e2268b" kindref="member">_it</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="class_order_indifferent_dictionary_iterator_1ac6f8985ad33b0e770827f49ad63142f0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_iterator_1ac6f8985ad33b0e770827f49ad63142f0" kindref="member">equal</ref>(<ref refid="class_base_iterator" kindref="compound">BaseIterator&lt;T&gt;</ref><sp/>*other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_iterator_1ae20a2bf293de8d2b91b056c344e2268b" kindref="member">_it</ref><sp/>==<sp/>((<ref refid="class_order_indifferent_dictionary_iterator" kindref="compound">OrderIndifferentDictionaryIterator&lt;T&gt;</ref><sp/>*)<sp/>other)-&gt;_it;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="class_order_indifferent_dictionary_iterator_1a182f154be3058eb8ecff94b8cd0d1f12" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/>&amp;<ref refid="class_order_indifferent_dictionary_iterator_1a182f154be3058eb8ecff94b8cd0d1f12" kindref="member">dereference</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(T<sp/>&amp;)(*_it).first;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="class_order_indifferent_dictionary_iterator_1a44cb88e3f551e530094c33b9894922b1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="storage__types_8h_1a2552a37cd3427c39d92cb8fd23c90408" kindref="member">value_id_t</ref><sp/><ref refid="class_order_indifferent_dictionary_iterator_1a44cb88e3f551e530094c33b9894922b1" kindref="member">getValueId</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*_it).second;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_order_indifferent_dictionary_iterator_1adb07bcc64a0bdcb8102c163311534a24" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_base_iterator" kindref="compound">BaseIterator&lt;T&gt;</ref><sp/>*<ref refid="class_order_indifferent_dictionary_iterator_1adb07bcc64a0bdcb8102c163311534a24" kindref="member">clone</ref>()<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;t2&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_iterator" kindref="compound">OrderIndifferentDictionaryIterator&lt;T&gt;</ref>(*this);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>An<sp/>unordered<sp/>dictionary<sp/>directly<sp/>returns<sp/>the<sp/>offset<sp/>of<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/>inside<sp/>the<sp/>value<sp/>list.<sp/>An<sp/>auxillary<sp/>structure<sp/>is<sp/>kept<sp/>to<sp/>allow</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/>easy<sp/>sorted<sp/>iteratos<sp/>and<sp/>logarithmic<sp/>finds.</highlight></codeline>
<codeline lineno="59"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="61" refid="class_order_indifferent_dictionary" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_order_indifferent_dictionary" kindref="compound">OrderIndifferentDictionary</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_base_dictionary" kindref="compound">BaseDictionary</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="62" refid="class_order_indifferent_dictionary_1a6f524298c1bce9521aba1f10f5a3cc81" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;T,<sp/>value_id_t&gt;<sp/><ref refid="class_order_indifferent_dictionary_1a6f524298c1bce9521aba1f10f5a3cc81" kindref="member">index_type</ref>;</highlight></codeline>
<codeline lineno="63" refid="class_order_indifferent_dictionary_1adc4bec675ea6a1ec4debdac4ea4aeeba" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/><ref refid="class_order_indifferent_dictionary_1adc4bec675ea6a1ec4debdac4ea4aeeba" kindref="member">vector_type</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>main<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="class_order_indifferent_dictionary_1ad1b2567a28e1d9bb2e842ea359cd50b2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_order_indifferent_dictionary_1a6f524298c1bce9521aba1f10f5a3cc81" kindref="member">index_type</ref><sp/><ref refid="class_order_indifferent_dictionary_1ad1b2567a28e1d9bb2e842ea359cd50b2" kindref="member">_index</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>for<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="class_order_indifferent_dictionary_1ae86ea9b44eab24f1136d0f71348a873d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_order_indifferent_dictionary_1adc4bec675ea6a1ec4debdac4ea4aeeba" kindref="member">vector_type</ref><sp/><ref refid="class_order_indifferent_dictionary_1ae86ea9b44eab24f1136d0f71348a873d" kindref="member">_value_list</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="class_order_indifferent_dictionary_1afe84486cfb8b0e6b7e0e6387773eccad" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1afe84486cfb8b0e6b7e0e6387773eccad" kindref="member">OrderIndifferentDictionary</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_order_indifferent_dictionary_1a8898c55335cfedb7dcc0b6ed1c59b112" kindref="member">reserve</ref>(s);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="class_order_indifferent_dictionary_1a85d4677dc6c9db6f2f5f72ff92594920" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1a85d4677dc6c9db6f2f5f72ff92594920" kindref="member">~OrderIndifferentDictionary</ref>()<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="class_order_indifferent_dictionary_1a208f679aa08786325a9a2c18609bc586" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1a208f679aa08786325a9a2c18609bc586" kindref="member">shrink</ref>()<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_order_indifferent_dictionary_1ae86ea9b44eab24f1136d0f71348a873d" kindref="member">_value_list</ref>.shrink_to_fit();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="class_order_indifferent_dictionary_1a47b4c1454359dad109eea36bee1397fa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1a47b4c1454359dad109eea36bee1397fa" kindref="member">isOrdered</ref>()<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="class_order_indifferent_dictionary_1a273d54f1dbaf3e99019d6e2ae7888d65" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1a273d54f1dbaf3e99019d6e2ae7888d65" kindref="member">size</ref>()<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1ae86ea9b44eab24f1136d0f71348a873d" kindref="member">_value_list</ref>.size();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="class_order_indifferent_dictionary_1ae4e0a298d80959522d1e7ffb70f3f557" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;AbstractDictionary&gt;<sp/><ref refid="class_order_indifferent_dictionary_1ae4e0a298d80959522d1e7ffb70f3f557" kindref="member">copy</ref>()<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>std::make_shared&lt;OrderIndifferentDictionary&lt;T&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;_index<sp/>=<sp/><ref refid="class_order_indifferent_dictionary_1ad1b2567a28e1d9bb2e842ea359cd50b2" kindref="member">_index</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>res-&gt;_value_list<sp/>=<sp/><ref refid="class_order_indifferent_dictionary_1ae86ea9b44eab24f1136d0f71348a873d" kindref="member">_value_list</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="class_order_indifferent_dictionary_1a66443e3b242c6ddc4fd384a427fd589c" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;AbstractDictionary&gt;<sp/><ref refid="class_order_indifferent_dictionary_1a66443e3b242c6ddc4fd384a427fd589c" kindref="member">copy_empty</ref>()<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;OrderIndifferentDictionary&lt;T&gt;&gt;();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="class_order_indifferent_dictionary_1a8898c55335cfedb7dcc0b6ed1c59b112" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1a8898c55335cfedb7dcc0b6ed1c59b112" kindref="member">reserve</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_order_indifferent_dictionary_1ae86ea9b44eab24f1136d0f71348a873d" kindref="member">_value_list</ref>.reserve(s);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="class_order_indifferent_dictionary_1a61c9fb4cc9a17d48e41f654daab1b004" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T<sp/><ref refid="class_order_indifferent_dictionary_1a61c9fb4cc9a17d48e41f654daab1b004" kindref="member">getValueForValueId</ref>(<ref refid="storage__types_8h_1a2552a37cd3427c39d92cb8fd23c90408" kindref="member">value_id_t</ref><sp/>value_id)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1ae86ea9b44eab24f1136d0f71348a873d" kindref="member">_value_list</ref>[value_id];</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="class_order_indifferent_dictionary_1a1224180360438665bb50861b9faf5185" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1a2552a37cd3427c39d92cb8fd23c90408" kindref="member">value_id_t</ref><sp/><ref refid="class_order_indifferent_dictionary_1a1224180360438665bb50861b9faf5185" kindref="member">addValue</ref>(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_order_indifferent_dictionary_1ae86ea9b44eab24f1136d0f71348a873d" kindref="member">_value_list</ref>.push_back(value);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_order_indifferent_dictionary_1adcd2559f7480e827aac24737b2f831e6" kindref="member">addValueToIndex</ref>(value);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1ae86ea9b44eab24f1136d0f71348a873d" kindref="member">_value_list</ref>.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="class_order_indifferent_dictionary_1adcd2559f7480e827aac24737b2f831e6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1adcd2559f7480e827aac24737b2f831e6" kindref="member">addValueToIndex</ref>(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_order_indifferent_dictionary_1ad1b2567a28e1d9bb2e842ea359cd50b2" kindref="member">_index</ref>.insert(std::pair&lt;T,<sp/>value_id_t&gt;(value,<sp/><ref refid="class_order_indifferent_dictionary_1ae86ea9b44eab24f1136d0f71348a873d" kindref="member">_value_list</ref>.size()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="class_order_indifferent_dictionary_1a9966be9830cbee0dea6c0696654d8885" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1a9966be9830cbee0dea6c0696654d8885" kindref="member">isValueIdValid</ref>(<ref refid="storage__types_8h_1a2552a37cd3427c39d92cb8fd23c90408" kindref="member">value_id_t</ref><sp/>value_id)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_id<sp/>&lt;<sp/><ref refid="class_order_indifferent_dictionary_1ae86ea9b44eab24f1136d0f71348a873d" kindref="member">_value_list</ref>.size();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="class_order_indifferent_dictionary_1a82edcb7ee5ded240a845d0629f74ff46" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1a82edcb7ee5ded240a845d0629f74ff46" kindref="member">valueExists</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1ad1b2567a28e1d9bb2e842ea359cd50b2" kindref="member">_index</ref>.count(v)<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>Returns<sp/>the<sp/>value<sp/>id<sp/>given<sp/>a<sp/>value</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Unfortunately<sp/>its<sp/>not<sp/>possible<sp/>to<sp/>not<sp/>perform<sp/>a<sp/>better<sp/>search,<sp/>since</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>value<sp/>lookup<sp/>is<sp/>always<sp/>linear</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@note<sp/>complexity<sp/>is<sp/>O(n)</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>value<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="class_order_indifferent_dictionary_1ae758d5a5fbdb843266e800dd67fe1910" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1a2552a37cd3427c39d92cb8fd23c90408" kindref="member">value_id_t</ref><sp/><ref refid="class_order_indifferent_dictionary_1ae758d5a5fbdb843266e800dd67fe1910" kindref="member">getValueIdForValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_order_indifferent_dictionary_1ad1b2567a28e1d9bb2e842ea359cd50b2" kindref="member">_index</ref>.count(value)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1ad1b2567a28e1d9bb2e842ea359cd50b2" kindref="member">_index</ref>.at(value);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Value<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="class_order_indifferent_dictionary_1a4d8cf722c32ee340967cf968b137167a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="storage__types_8h_1a2552a37cd3427c39d92cb8fd23c90408" kindref="member">value_id_t</ref><sp/><ref refid="class_order_indifferent_dictionary_1a4d8cf722c32ee340967cf968b137167a" kindref="member">getValueIdForValueSmaller</ref>(T<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;This<sp/>cannot<sp/>be<sp/>called<sp/>since<sp/>value<sp/>ids<sp/>have<sp/>no<sp/>ordered<sp/>meaning&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="class_order_indifferent_dictionary_1a236679031df47e8176ea17d1d7172b77" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="storage__types_8h_1a2552a37cd3427c39d92cb8fd23c90408" kindref="member">value_id_t</ref><sp/><ref refid="class_order_indifferent_dictionary_1a236679031df47e8176ea17d1d7172b77" kindref="member">getValueIdForValueGreater</ref>(T<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;This<sp/>cannot<sp/>be<sp/>calles<sp/>since<sp/>value<sp/>ids<sp/>have<sp/>no<sp/>ordered<sp/>meaning&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="class_order_indifferent_dictionary_1acf1e9beb4cd45569ada328f94e38b79e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/><ref refid="class_order_indifferent_dictionary_1acf1e9beb4cd45569ada328f94e38b79e" kindref="member">getSmallestValue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;This<sp/>cannot<sp/>be<sp/>called<sp/>in<sp/>an<sp/>unordered<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="class_order_indifferent_dictionary_1a969777ba99060d121c719be0ec9f0c00" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/><ref refid="class_order_indifferent_dictionary_1a969777ba99060d121c719be0ec9f0c00" kindref="member">getGreatestValue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;This<sp/>cannot<sp/>be<sp/>called<sp/>in<sp/>an<sp/>unordered<sp/>dictionary&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="class_order_indifferent_dictionary_1ac2d753c7b2e1a17efe6de619c39790bf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_dictionary_iterator" kindref="compound">DictionaryIterator&lt;T&gt;</ref><sp/><ref refid="class_order_indifferent_dictionary_1ac2d753c7b2e1a17efe6de619c39790bf" kindref="member">iterator</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>an<sp/>iterator<sp/>pointing<sp/>to<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="class_order_indifferent_dictionary_1a26e21b6478641094226d4dc7e64900d3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_dictionary_iterator" kindref="compound">iterator</ref><sp/><ref refid="class_order_indifferent_dictionary_1a26e21b6478641094226d4dc7e64900d3" kindref="member">begin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1ac2d753c7b2e1a17efe6de619c39790bf" kindref="member">iterator</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_iterator" kindref="compound">OrderIndifferentDictionaryIterator&lt;T&gt;</ref>(<ref refid="class_order_indifferent_dictionary_1ad1b2567a28e1d9bb2e842ea359cd50b2" kindref="member">_index</ref>.begin()));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>an<sp/>empty<sp/>iterator<sp/>that<sp/>marks<sp/>the<sp/>end<sp/>of<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="class_order_indifferent_dictionary_1aed09a8a4d215037f307bd62a36f97871" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_dictionary_iterator" kindref="compound">iterator</ref><sp/><ref refid="class_order_indifferent_dictionary_1aed09a8a4d215037f307bd62a36f97871" kindref="member">end</ref>()<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1ac2d753c7b2e1a17efe6de619c39790bf" kindref="member">iterator</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_iterator" kindref="compound">OrderIndifferentDictionaryIterator&lt;T&gt;</ref>(<ref refid="class_order_indifferent_dictionary_1ad1b2567a28e1d9bb2e842ea359cd50b2" kindref="member">_index</ref>.end()));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="class_order_indifferent_dictionary_1a3fc9d22651a84a9d0fc9a39ef1dc84a6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_order_indifferent_dictionary_1a3fc9d22651a84a9d0fc9a39ef1dc84a6" kindref="member">build_index</ref>()<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_order_indifferent_dictionary_1ae86ea9b44eab24f1136d0f71348a873d" kindref="member">_value_list</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_order_indifferent_dictionary_1adcd2559f7480e827aac24737b2f831e6" kindref="member">addValueToIndex</ref>(<ref refid="class_order_indifferent_dictionary_1ae86ea9b44eab24f1136d0f71348a873d" kindref="member">_value_list</ref>[i]);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>SRC_LIB_STORAGE_ORDERINDIFFERENTDICTIONARY_H_</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/vagrant/lanice/src/lib/storage/OrderIndifferentDictionary.h"/>
  </compounddef>
</doxygen>
