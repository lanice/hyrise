<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="vector__helpers_8h" kind="file">
    <compoundname>vector_helpers.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">functional</includes>
    <includes local="no">numeric</includes>
    <includes local="no">iterator</includes>
    <includedby refid="_generic_expressions_8h" local="yes">src/lib/access/expressions/GenericExpressions.h</includedby>
    <includedby refid="_insert_scan_8cpp" local="yes">src/lib/access/InsertScan.cpp</includedby>
    <includedby refid="_pos_update_scan_8cpp" local="yes">src/lib/access/PosUpdateScan.cpp</includedby>
    <includedby refid="_json_table_8cpp" local="no">src/lib/access/storage/JsonTable.cpp</includedby>
    <includedby refid="_query_parser_8cpp" local="yes">src/lib/access/system/QueryParser.cpp</includedby>
    <includedby refid="_union_all_8cpp" local="yes">src/lib/access/UnionAll.cpp</includedby>
    <includedby refid="_table_dump_8cpp" local="yes">src/lib/io/TableDump.cpp</includedby>
    <includedby refid="_transaction_manager_8cpp" local="yes">src/lib/io/TransactionManager.cpp</includedby>
    <includedby refid="_abstract_merge_strategy_8h" local="no">src/lib/storage/AbstractMergeStrategy.h</includedby>
    <includedby refid="_sequential_heap_merger_8cpp" local="yes">src/lib/storage/SequentialHeapMerger.cpp</includedby>
    <includedby refid="_store_8cpp" local="no">src/lib/storage/Store.cpp</includedby>
    <incdepgraph>
      <node id="11559">
        <label>functional</label>
      </node>
      <node id="11557">
        <label>src/lib/helper/vector_helpers.h</label>
        <link refid="vector_helpers.h"/>
        <childnode refid="11558" relation="include">
        </childnode>
        <childnode refid="11559" relation="include">
        </childnode>
        <childnode refid="11560" relation="include">
        </childnode>
        <childnode refid="11561" relation="include">
        </childnode>
      </node>
      <node id="11561">
        <label>iterator</label>
      </node>
      <node id="11560">
        <label>numeric</label>
      </node>
      <node id="11558">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11584">
        <label>src/bin/perf_regression/ProjectionScan.cpp</label>
        <link refid="bin_2perf__regression_2_projection_scan_8cpp"/>
      </node>
      <node id="11563">
        <label>src/lib/access/expressions/GenericExpressions.h</label>
        <link refid="_generic_expressions_8h"/>
        <childnode refid="11564" relation="include">
        </childnode>
      </node>
      <node id="11562">
        <label>src/lib/helper/vector_helpers.h</label>
        <link refid="vector_helpers.h"/>
        <childnode refid="11563" relation="include">
        </childnode>
        <childnode refid="11565" relation="include">
        </childnode>
        <childnode refid="11566" relation="include">
        </childnode>
        <childnode refid="11567" relation="include">
        </childnode>
        <childnode refid="11568" relation="include">
        </childnode>
        <childnode refid="11569" relation="include">
        </childnode>
        <childnode refid="11570" relation="include">
        </childnode>
        <childnode refid="11571" relation="include">
        </childnode>
        <childnode refid="11572" relation="include">
        </childnode>
        <childnode refid="11605" relation="include">
        </childnode>
        <childnode refid="11602" relation="include">
        </childnode>
      </node>
      <node id="11586">
        <label>src/bin/perf_regression/SortScan.cpp</label>
        <link refid="bin_2perf__regression_2_sort_scan_8cpp"/>
      </node>
      <node id="11591">
        <label>src/lib/access/LayoutTable.cpp</label>
        <link refid="_layout_table_8cpp"/>
      </node>
      <node id="11585">
        <label>src/bin/perf_regression/SimpleTableScan.cpp</label>
        <link refid="bin_2perf__regression_2_simple_table_scan_8cpp"/>
      </node>
      <node id="11588">
        <label>src/lib/storage/Store.h</label>
        <link refid="_store_8h"/>
        <childnode refid="11589" relation="include">
        </childnode>
        <childnode refid="11590" relation="include">
        </childnode>
        <childnode refid="11563" relation="include">
        </childnode>
        <childnode refid="11565" relation="include">
        </childnode>
        <childnode refid="11591" relation="include">
        </childnode>
        <childnode refid="11592" relation="include">
        </childnode>
        <childnode refid="11566" relation="include">
        </childnode>
        <childnode refid="11593" relation="include">
        </childnode>
        <childnode refid="11567" relation="include">
        </childnode>
        <childnode refid="11594" relation="include">
        </childnode>
        <childnode refid="11595" relation="include">
        </childnode>
        <childnode refid="11596" relation="include">
        </childnode>
        <childnode refid="11573" relation="include">
        </childnode>
        <childnode refid="11597" relation="include">
        </childnode>
        <childnode refid="11598" relation="include">
        </childnode>
        <childnode refid="11570" relation="include">
        </childnode>
        <childnode refid="11571" relation="include">
        </childnode>
        <childnode refid="11599" relation="include">
        </childnode>
        <childnode refid="11600" relation="include">
        </childnode>
        <childnode refid="11601" relation="include">
        </childnode>
        <childnode refid="11602" relation="include">
        </childnode>
        <childnode refid="11579" relation="include">
        </childnode>
      </node>
      <node id="11567">
        <label>src/lib/access/storage/JsonTable.cpp</label>
        <link refid="_json_table_8cpp"/>
      </node>
      <node id="11578">
        <label>src/lib/storage/SimpleStoreMerger.cpp</label>
        <link refid="_simple_store_merger_8cpp"/>
      </node>
      <node id="11599">
        <label>src/lib/storage/AbstractTable.cpp</label>
        <link refid="_abstract_table_8cpp"/>
      </node>
      <node id="11580">
        <label>src/bin/perf_regression/GroupByScan.cpp</label>
        <link refid="bin_2perf__regression_2_group_by_scan_8cpp"/>
      </node>
      <node id="11573">
        <label>src/lib/io/Loader.cpp</label>
        <link refid="_loader_8cpp"/>
      </node>
      <node id="11602">
        <label>src/lib/storage/Store.cpp</label>
        <link refid="_store_8cpp"/>
      </node>
      <node id="11571">
        <label>src/lib/io/TransactionManager.cpp</label>
        <link refid="_transaction_manager_8cpp"/>
      </node>
      <node id="11575">
        <label>src/lib/storage/SimpleStore.h</label>
        <link refid="_simple_store_8h"/>
        <childnode refid="11576" relation="include">
        </childnode>
        <childnode refid="11573" relation="include">
        </childnode>
        <childnode refid="11577" relation="include">
        </childnode>
        <childnode refid="11578" relation="include">
        </childnode>
        <childnode refid="11579" relation="include">
        </childnode>
      </node>
      <node id="11570">
        <label>src/lib/io/TableDump.cpp</label>
        <link refid="_table_dump_8cpp"/>
      </node>
      <node id="11579">
        <label>src/lib/storage.h</label>
        <link refid="storage_8h"/>
        <childnode refid="11580" relation="include">
        </childnode>
        <childnode refid="11581" relation="include">
        </childnode>
        <childnode refid="11582" relation="include">
        </childnode>
        <childnode refid="11583" relation="include">
        </childnode>
        <childnode refid="11584" relation="include">
        </childnode>
        <childnode refid="11585" relation="include">
        </childnode>
        <childnode refid="11586" relation="include">
        </childnode>
        <childnode refid="11587" relation="include">
        </childnode>
      </node>
      <node id="11600">
        <label>src/lib/storage/PointerCalculator.cpp</label>
        <link refid="_pointer_calculator_8cpp"/>
      </node>
      <node id="11565">
        <label>src/lib/access/InsertScan.cpp</label>
        <link refid="_insert_scan_8cpp"/>
      </node>
      <node id="11594">
        <label>src/lib/access/storage/TableIO.cpp</label>
        <link refid="_table_i_o_8cpp"/>
      </node>
      <node id="11605">
        <label>src/lib/storage/SequentialHeapMerger.cpp</label>
        <link refid="_sequential_heap_merger_8cpp"/>
      </node>
      <node id="11589">
        <label>src/bin/perf_regression/tx_performance.cpp</label>
        <link refid="tx__performance_8cpp"/>
      </node>
      <node id="11574">
        <label>src/lib/storage/TableMerger.h</label>
        <link refid="_table_merger_8h"/>
        <childnode refid="11575" relation="include">
        </childnode>
        <childnode refid="11577" relation="include">
        </childnode>
        <childnode refid="11588" relation="include">
        </childnode>
        <childnode refid="11603" relation="include">
        </childnode>
        <childnode refid="11604" relation="include">
        </childnode>
        <childnode refid="11579" relation="include">
        </childnode>
      </node>
      <node id="11597">
        <label>src/lib/io/MPassCSVLoader.cpp</label>
        <link refid="_m_pass_c_s_v_loader_8cpp"/>
      </node>
      <node id="11577">
        <label>src/lib/storage/SimpleStore.cpp</label>
        <link refid="_simple_store_8cpp"/>
      </node>
      <node id="11593">
        <label>src/lib/access/SimpleTableScan.cpp</label>
        <link refid="lib_2access_2_simple_table_scan_8cpp"/>
      </node>
      <node id="11596">
        <label>src/lib/access/UpdateScan.cpp</label>
        <link refid="_update_scan_8cpp"/>
      </node>
      <node id="11576">
        <label>src/lib/access/system/ResponseTask.cpp</label>
        <link refid="_response_task_8cpp"/>
      </node>
      <node id="11590">
        <label>src/lib/access/Delete.cpp</label>
        <link refid="_delete_8cpp"/>
      </node>
      <node id="11569">
        <label>src/lib/access/UnionAll.cpp</label>
        <link refid="_union_all_8cpp"/>
      </node>
      <node id="11572">
        <label>src/lib/storage/AbstractMergeStrategy.h</label>
        <link refid="_abstract_merge_strategy_8h"/>
        <childnode refid="11573" relation="include">
        </childnode>
        <childnode refid="11574" relation="include">
        </childnode>
        <childnode refid="11577" relation="include">
        </childnode>
        <childnode refid="11588" relation="include">
        </childnode>
        <childnode refid="11603" relation="include">
        </childnode>
        <childnode refid="11579" relation="include">
        </childnode>
      </node>
      <node id="11587">
        <label>src/bin/perf_regression/UnionScan.cpp</label>
        <link refid="bin_2perf__regression_2_union_scan_8cpp"/>
      </node>
      <node id="11566">
        <label>src/lib/access/PosUpdateScan.cpp</label>
        <link refid="_pos_update_scan_8cpp"/>
      </node>
      <node id="11595">
        <label>src/lib/access/tx/ValidatePositions.cpp</label>
        <link refid="_validate_positions_8cpp"/>
      </node>
      <node id="11604">
        <label>src/lib/storage/TableMerger.cpp</label>
        <link refid="_table_merger_8cpp"/>
      </node>
      <node id="11583">
        <label>src/bin/perf_regression/JoinScan.cpp</label>
        <link refid="bin_2perf__regression_2_join_scan_8cpp"/>
      </node>
      <node id="11598">
        <label>src/lib/io/shortcuts.cpp</label>
        <link refid="shortcuts_8cpp"/>
      </node>
      <node id="11581">
        <label>src/bin/perf_regression/HashJoin.cpp</label>
        <link refid="_hash_join_8cpp"/>
      </node>
      <node id="11592">
        <label>src/lib/access/MergeTable.cpp</label>
        <link refid="_merge_table_8cpp"/>
      </node>
      <node id="11564">
        <label>src/lib/access/expressions/GenericExpressions.cpp</label>
        <link refid="_generic_expressions_8cpp"/>
      </node>
      <node id="11601">
        <label>src/lib/storage/PrettyPrinter.cpp</label>
        <link refid="_pretty_printer_8cpp"/>
      </node>
      <node id="11568">
        <label>src/lib/access/system/QueryParser.cpp</label>
        <link refid="_query_parser_8cpp"/>
      </node>
      <node id="11603">
        <label>src/lib/storage/TableGenerator.cpp</label>
        <link refid="_table_generator_8cpp"/>
      </node>
      <node id="11582">
        <label>src/bin/perf_regression/HashValueJoin.cpp</label>
        <link refid="_hash_value_join_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacehyrise">hyrise</innernamespace>
    <innernamespace refid="namespacehyrise_1_1functional">hyrise::functional</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="vector__helpers_8h_1adf6cbcb5b017489780cfcd3c3a6e4ec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; T &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;T&gt; &gt; convert</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; U &gt;&gt; &amp;source)</argsstring>
        <name>convert</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; U &gt;&gt; &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/lanice/src/lib/helper/vector_helpers.h" line="54" bodyfile="/home/vagrant/lanice/src/lib/helper/vector_helpers.h" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="vector__helpers_8h_1a22a3f0170705d85d42435c25e6f5a15d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Input</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool allValid</definition>
        <argsstring>(Input values)</argsstring>
        <name>allValid</name>
        <param>
          <type>Input</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/lanice/src/lib/helper/vector_helpers.h" line="62" bodyfile="/home/vagrant/lanice/src/lib/helper/vector_helpers.h" bodystart="62" bodyend="64"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>SRC_LIB_HELPERS_VECTOR_HELPERS_H_</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SRC_LIB_HELPERS_VECTOR_HELPERS_H_</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="namespacehyrise_1_1functional" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hyrise<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">functional<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="12" refid="namespacehyrise_1_1functional_1a7de6bac891a2fe69d9b9665d7e86ccd1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1functional_1a7de6bac891a2fe69d9b9665d7e86ccd1" kindref="member">collect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>values,<sp/>F<sp/>func)<sp/>-&gt;<sp/>std::vector&lt;decltype(func(*std::begin(values)))&gt;<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;decltype(func(*std::begin(values)))&gt;<sp/>result_type;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>result_type<sp/>result(values.size());</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(std::begin(values),<sp/>std::end(values),<sp/>std::begin(result),<sp/>func);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="20" refid="namespacehyrise_1_1functional_1af4df4a6f15e5fee18815f89cf363cef6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1functional_1af4df4a6f15e5fee18815f89cf363cef6" kindref="member">foldLeft</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>values,<sp/>U<sp/>initial,<sp/>F<sp/>func<sp/>)<sp/>-&gt;<sp/>U<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::accumulate(values.begin(),<sp/>values.end(),<sp/>initial,<sp/>func);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="25" refid="namespacehyrise_1_1functional_1a89aba730f56007662917f64ed6930696" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1functional_1a89aba730f56007662917f64ed6930696" kindref="member">select</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>values,<sp/>F<sp/>func)<sp/>-&gt;<sp/>T<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>result;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy_if(std::begin(values),<sp/>std::end(values),<sp/>std::back_inserter(result),<sp/>func);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="32" refid="namespacehyrise_1_1functional_1aa5a5d6518ef70d11b4f8a77ee8c6b767" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1functional_1aa5a5d6518ef70d11b4f8a77ee8c6b767" kindref="member">sum</ref>(T<sp/>values,<sp/>U<sp/>initial,<sp/>F<sp/>func<sp/>)<sp/>-&gt;<sp/>U<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>VT<sp/>=<sp/>decltype(*std::begin(values));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::accumulate(values.begin(),<sp/>values.end(),<sp/>initial,<sp/>[func](U<sp/>l,<sp/>VT<sp/>v)<sp/>-&gt;U<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l<sp/>+<sp/>func(<sp/>v);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="40" refid="namespacehyrise_1_1functional_1a920d2572b81eb4dbde35ba73c7288b2b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1functional_1a920d2572b81eb4dbde35ba73c7288b2b" kindref="member">forEachWithIndex</ref>(T<sp/>values,<sp/>F<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>std::begin(values);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::end(values);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>begin<sp/>!=<sp/>end;<sp/>++index,<sp/>++begin)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func(index,<sp/>*begin);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="54" refid="vector__helpers_8h_1adf6cbcb5b017489780cfcd3c3a6e4ec3" refkind="member"><highlight class="normal">std::vector&lt;std::shared_ptr&lt;T&gt;&gt;<sp/><ref refid="vector__helpers_8h_1adf6cbcb5b017489780cfcd3c3a6e4ec3" kindref="member">convert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;U&gt;&gt;&amp;<sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1functional_1a7de6bac891a2fe69d9b9665d7e86ccd1" kindref="member">hyrise::functional::collect</ref>(source,<sp/>[]<sp/>(decltype(*std::begin(source))<sp/>item)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::dynamic_pointer_cast&lt;T&gt;(item);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Input&gt;</highlight></codeline>
<codeline lineno="62" refid="vector__helpers_8h_1a22a3f0170705d85d42435c25e6f5a15d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="vector__helpers_8h_1a22a3f0170705d85d42435c25e6f5a15d" kindref="member">allValid</ref>(Input<sp/>values)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::all_of(std::begin(values),<sp/>std::end(values),<sp/>[]<sp/>(decltype(*begin(values))<sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/vagrant/lanice/src/lib/helper/vector_helpers.h"/>
  </compounddef>
</doxygen>
