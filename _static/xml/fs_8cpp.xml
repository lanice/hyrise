<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="fs_8cpp" kind="file">
    <compoundname>fs.cpp</compoundname>
    <includes refid="fs_8h" local="yes">fs.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">memory</includes>
    <incdepgraph>
      <node id="10568">
        <label>fs.h</label>
        <link refid="fs_8h"/>
        <childnode refid="10569" relation="include">
        </childnode>
      </node>
      <node id="10571">
        <label>stdexcept</label>
      </node>
      <node id="10569">
        <label>string</label>
      </node>
      <node id="10567">
        <label>src/lib/helper/fs.cpp</label>
        <link refid="fs.cpp"/>
        <childnode refid="10568" relation="include">
        </childnode>
        <childnode refid="10570" relation="include">
        </childnode>
        <childnode refid="10571" relation="include">
        </childnode>
        <childnode refid="10572" relation="include">
        </childnode>
      </node>
      <node id="10570">
        <label>unistd.h</label>
      </node>
      <node id="10572">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehyrise">hyrise</innernamespace>
    <innernamespace refid="namespacehyrise_1_1helper">hyrise::helper</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fs_8h" kindref="compound">fs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="namespacehyrise_1_1helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hyrise<sp/>{</highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">helper<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="namespacehyrise_1_1helper_1ac306f944f80aa3a0caaae8f965f81893" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespacehyrise_1_1helper_1ac306f944f80aa3a0caaae8f965f81893" kindref="member">sys_getcwd</ref>()</highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunkSize=255;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxChunks=10240;<sp/></highlight><highlight class="comment">//<sp/>2550<sp/>KiBs<sp/>of<sp/>current<sp/>path<sp/>are<sp/>more<sp/>than<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stackBuffer[chunkSize];<sp/></highlight><highlight class="comment">//<sp/>Stack<sp/>buffer<sp/>for<sp/>the<sp/>&quot;normal&quot;<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(getcwd(stackBuffer,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stackBuffer))!=NULL)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stackBuffer;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(errno!=ERANGE)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>not<sp/>ERANGE,<sp/>so<sp/>we<sp/>don&apos;t<sp/>know<sp/>how<sp/>to<sp/>handle<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>determine<sp/>the<sp/>current<sp/>path.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Of<sp/>course<sp/>you<sp/>may<sp/>choose<sp/>a<sp/>different<sp/>error<sp/>reporting<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ok,<sp/>the<sp/>stack<sp/>buffer<sp/>isn&apos;t<sp/>long<sp/>enough;<sp/>fallback<sp/>to<sp/>heap<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunks=2;<sp/>chunks&lt;maxChunks<sp/>;<sp/>chunks++)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>With<sp/>boost<sp/>use<sp/>scoped_ptr;<sp/>in<sp/>C++0x,<sp/>use<sp/>unique_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>want<sp/>to<sp/>be<sp/>less<sp/>C++<sp/>but<sp/>more<sp/>efficient<sp/>you<sp/>may<sp/>want<sp/>to<sp/>use<sp/>realloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;char&gt;<sp/>cwd(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[chunkSize*chunks]);<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(getcwd(cwd.get(),chunkSize*chunks)!=NULL)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cwd.get();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(errno!=ERANGE)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>not<sp/>ERANGE,<sp/>so<sp/>we<sp/>don&apos;t<sp/>know<sp/>how<sp/>to<sp/>handle<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>determine<sp/>the<sp/>current<sp/>path.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Of<sp/>course<sp/>you<sp/>may<sp/>choose<sp/>a<sp/>different<sp/>error<sp/>reporting<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>determine<sp/>the<sp/>current<sp/>path;<sp/>the<sp/>path<sp/>is<sp/>apparently<sp/>unreasonably<sp/>long&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal">}}</highlight></codeline>
    </programlisting>
    <location file="/home/lanice/develop/epic/hyrise/src/lib/helper/fs.cpp"/>
  </compounddef>
</doxygen>
