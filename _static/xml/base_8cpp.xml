<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="base_8cpp" kind="file">
    <compoundname>base.cpp</compoundname>
    <includes refid="layouter_2base_8h" local="yes">base.h</includes>
    <includes refid="layout__utils_8h" local="yes">layout_utils.h</includes>
    <includes refid="matrix_8h" local="yes">matrix.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">float.h</includes>
    <includes local="no">functional</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">map</includes>
    <includes local="no">sstream</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">list</includes>
    <includes local="no">boost/unordered_set.hpp</includes>
    <includes local="no">boost/algorithm/string.hpp</includes>
    <includes local="no">boost/algorithm/combination.hpp</includes>
    <includes local="no">boost/assign.hpp</includes>
    <includes local="no">boost/foreach.hpp</includes>
    <includes local="no">boost/format.hpp</includes>
    <includes local="no">metis.h</includes>
    <incdepgraph>
      <node id="13075">
        <label>list</label>
      </node>
      <node id="13085">
        <label>boost/algorithm/string.hpp</label>
      </node>
      <node id="13080">
        <label>functional</label>
      </node>
      <node id="13068">
        <label>assert.h</label>
      </node>
      <node id="13079">
        <label>float.h</label>
      </node>
      <node id="13065">
        <label>base.h</label>
        <link refid="layouter_2base_8h"/>
        <childnode refid="13066" relation="include">
        </childnode>
        <childnode refid="13067" relation="include">
        </childnode>
        <childnode refid="13073" relation="include">
        </childnode>
        <childnode refid="13070" relation="include">
        </childnode>
        <childnode refid="13075" relation="include">
        </childnode>
        <childnode refid="13074" relation="include">
        </childnode>
        <childnode refid="13076" relation="include">
        </childnode>
        <childnode refid="13072" relation="include">
        </childnode>
        <childnode refid="13077" relation="include">
        </childnode>
        <childnode refid="13078" relation="include">
        </childnode>
      </node>
      <node id="13069">
        <label>stdlib.h</label>
      </node>
      <node id="13088">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="13089">
        <label>boost/format.hpp</label>
      </node>
      <node id="13076">
        <label>string</label>
      </node>
      <node id="13087">
        <label>boost/assign.hpp</label>
      </node>
      <node id="13083">
        <label>map</label>
      </node>
      <node id="13067">
        <label>matrix.h</label>
        <link refid="matrix_8h"/>
        <childnode refid="13068" relation="include">
        </childnode>
        <childnode refid="13069" relation="include">
        </childnode>
        <childnode refid="13070" relation="include">
        </childnode>
        <childnode refid="13071" relation="include">
        </childnode>
        <childnode refid="13072" relation="include">
        </childnode>
      </node>
      <node id="13073">
        <label>layout_utils.h</label>
        <link refid="layout__utils_8h"/>
        <childnode refid="13074" relation="include">
        </childnode>
        <childnode refid="13072" relation="include">
        </childnode>
      </node>
      <node id="13090">
        <label>metis.h</label>
      </node>
      <node id="13081">
        <label>limits.h</label>
      </node>
      <node id="13072">
        <label>vector</label>
      </node>
      <node id="13084">
        <label>boost/unordered_set.hpp</label>
      </node>
      <node id="13066">
        <label>config.h</label>
        <link refid="config_8h"/>
      </node>
      <node id="13071">
        <label>sstream</label>
      </node>
      <node id="13082">
        <label>math.h</label>
      </node>
      <node id="13070">
        <label>iostream</label>
      </node>
      <node id="13086">
        <label>boost/algorithm/combination.hpp</label>
      </node>
      <node id="13078">
        <label>unordered_map</label>
      </node>
      <node id="13074">
        <label>set</label>
      </node>
      <node id="13077">
        <label>algorithm</label>
      </node>
      <node id="13064">
        <label>src/lib/layouter/base.cpp</label>
        <link refid="base.cpp"/>
        <childnode refid="13065" relation="include">
        </childnode>
        <childnode refid="13073" relation="include">
        </childnode>
        <childnode refid="13067" relation="include">
        </childnode>
        <childnode refid="13077" relation="include">
        </childnode>
        <childnode refid="13079" relation="include">
        </childnode>
        <childnode refid="13080" relation="include">
        </childnode>
        <childnode refid="13081" relation="include">
        </childnode>
        <childnode refid="13082" relation="include">
        </childnode>
        <childnode refid="13083" relation="include">
        </childnode>
        <childnode refid="13071" relation="include">
        </childnode>
        <childnode refid="13078" relation="include">
        </childnode>
        <childnode refid="13075" relation="include">
        </childnode>
        <childnode refid="13084" relation="include">
        </childnode>
        <childnode refid="13085" relation="include">
        </childnode>
        <childnode refid="13086" relation="include">
        </childnode>
        <childnode refid="13087" relation="include">
        </childnode>
        <childnode refid="13088" relation="include">
        </childnode>
        <childnode refid="13089" relation="include">
        </childnode>
        <childnode refid="13090" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structstd_1_1hash_3_01subset__t_01_4" prot="public">std::hash&lt; subset_t &gt;</innerclass>
    <innerclass refid="struct__intermediate" prot="public">_intermediate</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
    <innernamespace refid="namespaceboost_1_1assign">boost::assign</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="base_8cpp_1a4fdfe2597e225ee78646c2f7ecd86d52" prot="public" static="no">
        <type>std::unordered_map&lt; std::string, double &gt;</type>
        <definition>typedef std::unordered_map&lt;std::string, double&gt; cache_t</definition>
        <argsstring></argsstring>
        <name>cache_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/lanice/src/lib/layouter/base.cpp" line="1180" bodyfile="/home/vagrant/lanice/src/lib/layouter/base.cpp" bodystart="1180" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="base_8cpp_1aa780bf7836bea7a89ad280cbf83d7887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string strval</definition>
        <argsstring>(subset_t m)</argsstring>
        <name>strval</name>
        <param>
          <type><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/lanice/src/lib/layouter/base.cpp" line="1159" bodyfile="/home/vagrant/lanice/src/lib/layouter/base.cpp" bodystart="1159" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="base_8cpp_1a9d01ad399f906dd61b7694cfc1d6f414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref></type>
        <definition>subset_t merge_subsets</definition>
        <argsstring>(subset_t base, std::vector&lt; subset_t &gt; &amp;mapping)</argsstring>
        <name>merge_subsets</name>
        <param>
          <type><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref></type>
          <declname>base</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref> &gt; &amp;</type>
          <declname>mapping</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/lanice/src/lib/layouter/base.cpp" line="1169" bodyfile="/home/vagrant/lanice/src/lib/layouter/base.cpp" bodystart="1169" bodyend="1178"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="layouter_2base_8h" kindref="compound">base.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="layout__utils_8h" kindref="compound">layout_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="matrix_8h" kindref="compound">matrix.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/unordered_set.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/combination.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/assign.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/foreach.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/format.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;metis.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">layouter;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::assign;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="35" refid="structstd_1_1hash_3_01subset__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="namespacehyrise_1_1access_1a186e18305f1cfc707e738f2aa04556fa" kindref="member">hash</ref>&lt;<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="structstd_1_1hash_3_01subset__t_01_4_1a7028d5925bc2c7fabeaf2aba650df9db" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1hash_3_01subset__t_01_4_1a7028d5925bc2c7fabeaf2aba650df9db" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned&gt;<sp/>&amp;ref)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>test<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::hash&lt;unsigned<sp/>int&gt;<sp/>h;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t<sp/>:<sp/>ref)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>^=<sp/>(h(t)<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="classlayouter_1_1_query_1abc74eb9424436429a91121abe72cf7e3" refkind="member"><highlight class="normal"><ref refid="classlayouter_1_1_query_1abc74eb9424436429a91121abe72cf7e3" kindref="member">Query::Query</ref>(<ref refid="structlayouter_1_1_layouter_configuration_1ad72467c5f13875107a7397ce19ec1bfe" kindref="member">LayouterConfiguration::access_type_t</ref><sp/>type,<sp/>std::vector&lt;unsigned&gt;<sp/>qA,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>parameter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>weight):</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>type(type),<sp/>queryAttributes(qA),<sp/>parameter(parameter),<sp/>weight(weight)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>std::sort(<ref refid="classlayouter_1_1_query_1a65bede58b78d50e778068c0b195b882b" kindref="member">queryAttributes</ref>.begin(),<sp/><ref refid="classlayouter_1_1_query_1a65bede58b78d50e778068c0b195b882b" kindref="member">queryAttributes</ref>.end());</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classlayouter_1_1_query_1af8ac325b62c74e4c4bc310cb00cb5985" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query_1af8ac325b62c74e4c4bc310cb00cb5985" kindref="member">Query::getContainerWidth</ref>()<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>a,<sp/><ref refid="classlayouter_1_1_query_1a83332d4a1fd8518b5916e782932a1ff7" kindref="member">_container</ref>)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>width<sp/>+=<sp/><ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1a22777663c2ab937a63349ecbbdf46260" kindref="member">attributes</ref>[a];</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classlayouter_1_1_query_1a20ea2b17fdf3ca350038580af0bddded" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query_1a20ea2b17fdf3ca350038580af0bddded" kindref="member">Query::getAttUnion</ref>()<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_query_1a8342b13f2b04c033f3a4216be524bd59" kindref="member">_attributeRefSet</ref>.clear();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_query_1a8342b13f2b04c033f3a4216be524bd59" kindref="member">_attributeRefSet</ref>.insert(<ref refid="classlayouter_1_1_query_1a65bede58b78d50e778068c0b195b882b" kindref="member">queryAttributes</ref>.begin(),<sp/><ref refid="classlayouter_1_1_query_1a65bede58b78d50e778068c0b195b882b" kindref="member">queryAttributes</ref>.end());</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_query_1a8a36c96ebc908bb4de5cf4074b32a43c" kindref="member">_attUnion</ref>.clear();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>l,<sp/><ref refid="classlayouter_1_1_query_1a83332d4a1fd8518b5916e782932a1ff7" kindref="member">_container</ref>)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_query_1a8342b13f2b04c033f3a4216be524bd59" kindref="member">_attributeRefSet</ref>.count(l)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_query_1a8a36c96ebc908bb4de5cf4074b32a43c" kindref="member">_attUnion</ref>.push_back(l);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>std::sort(<ref refid="classlayouter_1_1_query_1a8a36c96ebc908bb4de5cf4074b32a43c" kindref="member">_attUnion</ref>.begin(),<sp/><ref refid="classlayouter_1_1_query_1a8a36c96ebc908bb4de5cf4074b32a43c" kindref="member">_attUnion</ref>.end());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_query_1ae700a3b03cf2810885defd2c78cc75b2" kindref="member">_costModel</ref>.compare(<ref refid="config_8h_1ac349b1745933aeb7cfcbfb7a034f211c" kindref="member">COL_COST</ref>)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_query_1a8a36c96ebc908bb4de5cf4074b32a43c" kindref="member">_attUnion</ref>.push_back(0);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classlayouter_1_1_query_1aabd3f9690a2b7c1178ab3c8d4c3b3484" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query_1aabd3f9690a2b7c1178ab3c8d4c3b3484" kindref="member">Query::containerCost</ref>(std::vector&lt;unsigned&gt;<sp/>container,<sp/><ref refid="classlayouter_1_1_schema" kindref="compound">Schema</ref><sp/>s,<sp/>std::string<sp/>costModel)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_query_1a83332d4a1fd8518b5916e782932a1ff7" kindref="member">_container</ref><sp/><sp/>=<sp/>container;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_query_1ae700a3b03cf2810885defd2c78cc75b2" kindref="member">_costModel</ref><sp/>=<sp/>costModel;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_query_1a423e048c521d9379857b33ca67fe5665" kindref="member">_containerWidth</ref><sp/>=<sp/><ref refid="classlayouter_1_1_query_1af8ac325b62c74e4c4bc310cb00cb5985" kindref="member">getContainerWidth</ref>();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>there<sp/>are<sp/>any<sp/>attributes,<sp/>that<sp/>match<sp/>agains<sp/>the<sp/>given<sp/>containers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_query_1a20ea2b17fdf3ca350038580af0bddded" kindref="member">getAttUnion</ref>();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_query_1a8a36c96ebc908bb4de5cf4074b32a43c" kindref="member">_attUnion</ref>.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_query_1ae700a3b03cf2810885defd2c78cc75b2" kindref="member">_costModel</ref>.compare(<ref refid="config_8h_1a8ff5142b8f9e0750772cdf9b00a8ea7c" kindref="member">HYRISE_COST</ref>)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>cost<sp/>=<sp/><ref refid="classlayouter_1_1_query_1a20d2c5b6cd69e5c1dc75b528a885cf9c" kindref="member">hyriseCost</ref>();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>cost<sp/>=<sp/>INT_MIN;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query_1a75760ace5a0e3fb875e88c9fc0dae107" kindref="member">weight</ref><sp/>*<sp/>cost;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="classlayouter_1_1_query_1a20d2c5b6cd69e5c1dc75b528a885cf9c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query_1a20d2c5b6cd69e5c1dc75b528a885cf9c" kindref="member">Query::hyriseCost</ref>()<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>misses<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_query_1af3fb0c0303409f690638e91124ef23ae" kindref="member">type</ref><sp/>==<sp/><ref refid="structlayouter_1_1_layouter_configuration_1ad72467c5f13875107a7397ce19ec1bfeae654ec3bf230a3adf142b018f9e88a8d" kindref="member">LayouterConfiguration::access_type_fullprojection</ref>)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>misses<sp/>=<sp/><ref refid="classlayouter_1_1_query_1a7e04f02df68aa0751e1b3f29910370a8" kindref="member">hyriseProjection</ref>();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_query_1af3fb0c0303409f690638e91124ef23ae" kindref="member">type</ref><sp/>==<sp/><ref refid="structlayouter_1_1_layouter_configuration_1ad72467c5f13875107a7397ce19ec1bfea8a71501b39100f0efaf5839a295869ba" kindref="member">LayouterConfiguration::access_type_outoforder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>misses<sp/>=<sp/><ref refid="classlayouter_1_1_query_1a30ff88dcf7d37c365428d0c59f47ca87" kindref="member">hyriseOOO</ref>();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>misses<sp/>=<sp/>DBL_MIN;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>misses;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="classlayouter_1_1_query_1a7e04f02df68aa0751e1b3f29910370a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query_1a7e04f02df68aa0751e1b3f29910370a8" kindref="member">Query::hyriseProjection</ref>()<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_query_1a423e048c521d9379857b33ca67fe5665" kindref="member">_containerWidth</ref><sp/>&lt;=<sp/><ref refid="config_8h_1af89f60b07247176687889ade776c8e10" kindref="member">CACHE_LINE_SIZE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ceil(<ref refid="classlayouter_1_1_query_1a423e048c521d9379857b33ca67fe5665" kindref="member">_containerWidth</ref><sp/>*<sp/><ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1aa8ed5bd128984e76303d6230f1c9b5b6" kindref="member">nbTuples</ref><sp/>/<sp/>(<ref refid="config_8h_1af89f60b07247176687889ade776c8e10" kindref="member">CACHE_LINE_SIZE</ref><sp/>*<sp/>1.0));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_query_1a8a36c96ebc908bb4de5cf4074b32a43c" kindref="member">_attUnion</ref>.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>po<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlayouter_1_1_query_1a83332d4a1fd8518b5916e782932a1ff7" kindref="member">_container</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_query_1a83332d4a1fd8518b5916e782932a1ff7" kindref="member">_container</ref>[i]<sp/>==<sp/><ref refid="classlayouter_1_1_query_1a8a36c96ebc908bb4de5cf4074b32a43c" kindref="member">_attUnion</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>po<sp/>+=<sp/><ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1a22777663c2ab937a63349ecbbdf46260" kindref="member">attributes</ref>[<ref refid="classlayouter_1_1_query_1a83332d4a1fd8518b5916e782932a1ff7" kindref="member">_container</ref>[i]];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>pw<sp/>=<sp/><ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1a22777663c2ab937a63349ecbbdf46260" kindref="member">attributes</ref>[<ref refid="classlayouter_1_1_query_1a8a36c96ebc908bb4de5cf4074b32a43c" kindref="member">_attUnion</ref>[0]];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query_1a63db713eac5f05ec1a0dae4231ae6d26" kindref="member">hyrisePartialProjection</ref>(po,<sp/>pw);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query_1aae5f37fa198fc9fc5690c6fa953d3aa1" kindref="member">hyriseEquivalentProjection</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="classlayouter_1_1_query_1a63db713eac5f05ec1a0dae4231ae6d26" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query_1a63db713eac5f05ec1a0dae4231ae6d26" kindref="member">Query::hyrisePartialProjection</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>po,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>pw)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_query_1a423e048c521d9379857b33ca67fe5665" kindref="member">_containerWidth</ref><sp/>-<sp/>pw<sp/>&lt;<sp/><ref refid="config_8h_1af89f60b07247176687889ade776c8e10" kindref="member">CACHE_LINE_SIZE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ceil(<ref refid="classlayouter_1_1_query_1a423e048c521d9379857b33ca67fe5665" kindref="member">_containerWidth</ref><sp/>*<sp/><ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1aa8ed5bd128984e76303d6230f1c9b5b6" kindref="member">nbTuples</ref><sp/>/<sp/>(<ref refid="config_8h_1af89f60b07247176687889ade776c8e10" kindref="member">CACHE_LINE_SIZE</ref><sp/>*<sp/>1.0));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>misses<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbPossibleOffsets<sp/>=<sp/><ref refid="layout__utils_8cpp_1ac40678ad881b5323943b9e63b41e72e9" kindref="member">LCM</ref>(<ref refid="config_8h_1af89f60b07247176687889ade776c8e10" kindref="member">CACHE_LINE_SIZE</ref>,<sp/><ref refid="classlayouter_1_1_query_1a423e048c521d9379857b33ca67fe5665" kindref="member">_containerWidth</ref>)<sp/>/<sp/><ref refid="classlayouter_1_1_query_1a423e048c521d9379857b33ca67fe5665" kindref="member">_containerWidth</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>cases<sp/>creating<sp/>an<sp/>additional<sp/>miss<sp/>are<sp/>all<sp/>the<sp/>cases<sp/>for<sp/>which<sp/>the<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>greater<sp/>than<sp/>the<sp/>transition<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>nbPossibleOffsets;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineoffset<sp/>=<sp/>((r<sp/>*<sp/><ref refid="classlayouter_1_1_query_1a423e048c521d9379857b33ca67fe5665" kindref="member">_containerWidth</ref>)<sp/>+<sp/>po)<sp/>%<sp/><ref refid="config_8h_1af89f60b07247176687889ade776c8e10" kindref="member">CACHE_LINE_SIZE</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>misses<sp/>+=<sp/>ceil((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(lineoffset<sp/>+<sp/>pw)<sp/>/<sp/><ref refid="config_8h_1af89f60b07247176687889ade776c8e10" kindref="member">CACHE_LINE_SIZE</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>averageMisses<sp/>=<sp/>(double)misses<sp/>/<sp/>nbPossibleOffsets;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>misses<sp/>=<sp/>((double)<ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1aa8ed5bd128984e76303d6230f1c9b5b6" kindref="member">nbTuples</ref><sp/>*<sp/>averageMisses);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>misses;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="classlayouter_1_1_query_1aae5f37fa198fc9fc5690c6fa953d3aa1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query_1aae5f37fa198fc9fc5690c6fa953d3aa1" kindref="member">Query::hyriseEquivalentProjection</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSelective)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>offset<sp/>for<sp/>each<sp/>attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>attsOffset(<ref refid="classlayouter_1_1_query_1a83332d4a1fd8518b5916e782932a1ff7" kindref="member">_container</ref>.size());</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlayouter_1_1_query_1a83332d4a1fd8518b5916e782932a1ff7" kindref="member">_container</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>attsOffset[i]<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/><ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1a22777663c2ab937a63349ecbbdf46260" kindref="member">attributes</ref>[<ref refid="classlayouter_1_1_query_1a83332d4a1fd8518b5916e782932a1ff7" kindref="member">_container</ref>[i]];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>containerWidth<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>with<sp/>the<sp/>first<sp/>attribute<sp/>and<sp/>try<sp/>to<sp/>make<sp/>equivalent<sp/>projection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>eqProjectionOffset;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>eqProjectionEnd;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentProjection<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlayouter_1_1_query_1a83332d4a1fd8518b5916e782932a1ff7" kindref="member">_container</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>i<sp/>is<sp/>the<sp/>position<sp/>of<sp/>the<sp/>att<sp/>in<sp/>the<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>att<sp/>is<sp/>the<sp/>attribute<sp/>number<sp/>corresponding<sp/>to<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>att<sp/>=<sp/><ref refid="classlayouter_1_1_query_1a83332d4a1fd8518b5916e782932a1ff7" kindref="member">_container</ref>[i];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>attribute<sp/>is<sp/>projected,<sp/>add<sp/>it<sp/>to<sp/>projection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(<ref refid="classlayouter_1_1_query_1a65bede58b78d50e778068c0b195b882b" kindref="member">queryAttributes</ref>.begin(),<sp/><ref refid="classlayouter_1_1_query_1a65bede58b78d50e778068c0b195b882b" kindref="member">queryAttributes</ref>.end(),<sp/>att)<sp/>==<sp/><ref refid="classlayouter_1_1_query_1a65bede58b78d50e778068c0b195b882b" kindref="member">queryAttributes</ref>.end())</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>att<sp/>is<sp/>not<sp/>projected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentProjection<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>projection,<sp/>add<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentProjection<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eqProjectionOffset.push_back(attsOffset[i]);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eqProjectionEnd.push_back(attsOffset[i]<sp/>+<sp/><ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1a22777663c2ab937a63349ecbbdf46260" kindref="member">attributes</ref>[att]);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>projected<sp/>attribute;<sp/>check<sp/>if<sp/>the<sp/>gap<sp/>is<sp/>big</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gap<sp/>=<sp/>attsOffset[i]<sp/>-<sp/>eqProjectionEnd[currentProjection];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gap<sp/>&lt;<sp/><ref refid="config_8h_1af89f60b07247176687889ade776c8e10" kindref="member">CACHE_LINE_SIZE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>projection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eqProjectionEnd[currentProjection]<sp/>=<sp/>attsOffset[i]<sp/>+<sp/><ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1a22777663c2ab937a63349ecbbdf46260" kindref="member">attributes</ref>[att];</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>projection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentProjection++;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eqProjectionOffset.push_back(attsOffset[i]);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eqProjectionEnd.push_back(attsOffset[i]<sp/>+<sp/><ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1a22777663c2ab937a63349ecbbdf46260" kindref="member">attributes</ref>[att]);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//compute<sp/>the<sp/>gap<sp/>between<sp/>the<sp/>first<sp/>and<sp/>last<sp/>projection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentProjection<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interRowGap<sp/>=<sp/>eqProjectionOffset[0]<sp/>+<sp/>containerWidth<sp/>-<sp/>eqProjectionEnd[currentProjection];</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interRowGap<sp/>&lt;<sp/><ref refid="config_8h_1af89f60b07247176687889ade776c8e10" kindref="member">CACHE_LINE_SIZE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>last<sp/>with<sp/>first<sp/>projection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eqProjectionOffset[0]<sp/>=<sp/>eqProjectionOffset[currentProjection];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eqProjectionEnd[0]<sp/>=<sp/>eqProjectionEnd[0]<sp/>+<sp/>containerWidth;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eqProjectionOffset.pop_back();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eqProjectionEnd.pop_back();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>misses<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>eqProjectionOffset.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>po<sp/>=<sp/>eqProjectionOffset[i];</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pw<sp/>=<sp/>eqProjectionEnd[i]<sp/>-<sp/>po;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isSelective)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>misses<sp/>+=<sp/><ref refid="classlayouter_1_1_query_1a63db713eac5f05ec1a0dae4231ae6d26" kindref="member">hyrisePartialProjection</ref>(po,<sp/>pw);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>misses<sp/>+=<sp/><ref refid="classlayouter_1_1_query_1afb330985b1bc9fedb9abca3ad714b354" kindref="member">hyriseSingleOOO</ref>(po,<sp/>pw);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>misses;</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="classlayouter_1_1_query_1a30ff88dcf7d37c365428d0c59f47ca87" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query_1a30ff88dcf7d37c365428d0c59f47ca87" kindref="member">Query::hyriseOOO</ref>()<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_query_1a8a36c96ebc908bb4de5cf4074b32a43c" kindref="member">_attUnion</ref>.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>po<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlayouter_1_1_query_1a83332d4a1fd8518b5916e782932a1ff7" kindref="member">_container</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_query_1a83332d4a1fd8518b5916e782932a1ff7" kindref="member">_container</ref>[i]<sp/>==<sp/><ref refid="classlayouter_1_1_query_1a8a36c96ebc908bb4de5cf4074b32a43c" kindref="member">_attUnion</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>po<sp/>+=<sp/><ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1a22777663c2ab937a63349ecbbdf46260" kindref="member">attributes</ref>[<ref refid="classlayouter_1_1_query_1a83332d4a1fd8518b5916e782932a1ff7" kindref="member">_container</ref>[i]];</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pw<sp/>=<sp/><ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1a22777663c2ab937a63349ecbbdf46260" kindref="member">attributes</ref>[<ref refid="classlayouter_1_1_query_1a8a36c96ebc908bb4de5cf4074b32a43c" kindref="member">_attUnion</ref>[0]];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query_1afb330985b1bc9fedb9abca3ad714b354" kindref="member">hyriseSingleOOO</ref>(po,<sp/>pw);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query_1aae5f37fa198fc9fc5690c6fa953d3aa1" kindref="member">hyriseEquivalentProjection</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="classlayouter_1_1_query_1afb330985b1bc9fedb9abca3ad714b354" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query_1afb330985b1bc9fedb9abca3ad714b354" kindref="member">Query::hyriseSingleOOO</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>po,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pw)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>misses<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>cacheLineTransitionPoint<sp/>=<sp/>CACHE_LINE_SIZE<sp/>-<sp/>(pw<sp/>%<sp/>CACHE_LINE_SIZE)<sp/>+<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbPossibleOffsets<sp/>=<sp/><ref refid="layout__utils_8cpp_1ac40678ad881b5323943b9e63b41e72e9" kindref="member">LCM</ref>(<ref refid="config_8h_1af89f60b07247176687889ade776c8e10" kindref="member">CACHE_LINE_SIZE</ref>,<sp/><ref refid="classlayouter_1_1_query_1a423e048c521d9379857b33ca67fe5665" kindref="member">_containerWidth</ref>)<sp/>/<sp/><ref refid="classlayouter_1_1_query_1a423e048c521d9379857b33ca67fe5665" kindref="member">_containerWidth</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>nbPossibleOffsets;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineoffset<sp/>=<sp/>((r<sp/>*<sp/><ref refid="classlayouter_1_1_query_1a423e048c521d9379857b33ca67fe5665" kindref="member">_containerWidth</ref>)<sp/>+<sp/>po)<sp/>%<sp/><ref refid="config_8h_1af89f60b07247176687889ade776c8e10" kindref="member">CACHE_LINE_SIZE</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>misses<sp/>+=<sp/>ceil((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(lineoffset<sp/>+<sp/>pw)<sp/>/<sp/><ref refid="config_8h_1af89f60b07247176687889ade776c8e10" kindref="member">CACHE_LINE_SIZE</ref>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>averageMisses<sp/>=<sp/>(double)misses<sp/>/<sp/>nbPossibleOffsets;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>misses<sp/>=<sp/>((double)<ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1aa8ed5bd128984e76303d6230f1c9b5b6" kindref="member">nbTuples</ref><sp/>*<sp/>averageMisses);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>divide<sp/>in<sp/>the<sp/>traditional<sp/>two<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_query_1a423e048c521d9379857b33ca67fe5665" kindref="member">_containerWidth</ref><sp/>-<sp/>pw<sp/>&lt;<sp/><ref refid="config_8h_1af89f60b07247176687889ade776c8e10" kindref="member">CACHE_LINE_SIZE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>average<sp/>number<sp/>of<sp/>rows<sp/>in<sp/>a<sp/>cache<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nbRowsInLine<sp/>=<sp/>((double)(<ref refid="config_8h_1af89f60b07247176687889ade776c8e10" kindref="member">CACHE_LINE_SIZE</ref>))<sp/>/<sp/><ref refid="classlayouter_1_1_query_1a423e048c521d9379857b33ca67fe5665" kindref="member">_containerWidth</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>average<sp/>number<sp/>of<sp/>lines<sp/>that<sp/>are<sp/>touched<sp/>for<sp/>each<sp/>projection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rowsToSubstract<sp/>=<sp/>1<sp/>+<sp/>(nbRowsInLine<sp/>-<sp/>1)<sp/>*<sp/><ref refid="classlayouter_1_1_query_1ab64816e62ed87fe91a3d80f98d081530" kindref="member">parameter</ref>;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>misses<sp/>=<sp/>(averageMisses<sp/>*<sp/>((double)<ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1aa8ed5bd128984e76303d6230f1c9b5b6" kindref="member">nbTuples</ref><sp/>*<sp/><ref refid="classlayouter_1_1_query_1ab64816e62ed87fe91a3d80f98d081530" kindref="member">parameter</ref><sp/>/<sp/>rowsToSubstract));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;simple&quot;<sp/>case,<sp/>rows<sp/>are<sp/>independent<sp/>w.r.t.<sp/>misses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>misses<sp/>=<sp/>(int)(averageMisses<sp/>*<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<ref refid="classlayouter_1_1_query_1a16c0e7dbed0b855753f915e830220a81" kindref="member">_schema</ref>.<ref refid="classlayouter_1_1_schema_1aa8ed5bd128984e76303d6230f1c9b5b6" kindref="member">nbTuples</ref><sp/>*<sp/><ref refid="classlayouter_1_1_query_1ab64816e62ed87fe91a3d80f98d081530" kindref="member">parameter</ref>));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>misses;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="classlayouter_1_1_layout_1af9f384b2e613f6872f2611ba6145392c" refkind="member"><highlight class="normal"><ref refid="classlayouter_1_1_layout_1a6664f721daa75463ded6548182b191c5" kindref="member">Layout::Layout</ref>(<ref refid="classlayouter_1_1_layout_1a42a9858dbe687a701d19de4b592ef06b" kindref="member">internal_layout_t</ref><sp/>l):<sp/>_layout(l)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="classlayouter_1_1_layout_1a6664f721daa75463ded6548182b191c5" refkind="member"><highlight class="normal"><ref refid="classlayouter_1_1_layout_1a6664f721daa75463ded6548182b191c5" kindref="member">Layout::Layout</ref>():<sp/>_layout()<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="classlayouter_1_1_layout_1a8aa1a21d48a26adb0e1b90baece66434" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_layout_1a8aa1a21d48a26adb0e1b90baece66434" kindref="member">Layout::operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_layout" kindref="compound">Layout</ref><sp/>&amp;l)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_layout_1aa32ee62c1d4a1c4518f97336c5a697d1" kindref="member">_layout</ref>.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>l.<ref refid="classlayouter_1_1_layout_1aa32ee62c1d4a1c4518f97336c5a697d1" kindref="member">_layout</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned&gt;<sp/>left<sp/>=<sp/><ref refid="classlayouter_1_1_layout_1aa32ee62c1d4a1c4518f97336c5a697d1" kindref="member">_layout</ref>[i];</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned&gt;<sp/>right<sp/>=<sp/>l.<ref refid="classlayouter_1_1_layout_1aa32ee62c1d4a1c4518f97336c5a697d1" kindref="member">_layout</ref>[i];</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left.size()<sp/>!=<sp/>right.size())<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>left.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left[j]<sp/>!=<sp/>right[j])<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="classlayouter_1_1_layout_1ad4a744f4467b5f1b457fc51f47a10f78" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_layout_1ad4a744f4467b5f1b457fc51f47a10f78" kindref="member">Layout::add</ref>(std::vector&lt;unsigned&gt;<sp/>subset)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_layout_1aa32ee62c1d4a1c4518f97336c5a697d1" kindref="member">_layout</ref>.push_back(subset);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>based<sp/>caching<sp/>of<sp/>layouts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>std::set&lt;unsigned&gt;<sp/>tmp(subset.begin(),<sp/>subset.end());</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_layout_1a2b23139b02922fdf9a0aae685cd7eb7b" kindref="member">_cached_layout</ref>.push_back(tmp);</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="classlayouter_1_1_layout_1a4052f97bc91290f85b6696f48ee45fb6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_layout_1a4052f97bc91290f85b6696f48ee45fb6" kindref="member">Layout::removeLast</ref>()<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_layout_1aa32ee62c1d4a1c4518f97336c5a697d1" kindref="member">_layout</ref>.pop_back();</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="classlayouter_1_1_result_1a8445dc53609fdba8ef430e3f1791fd75" refkind="member"><highlight class="normal"><ref refid="classlayouter_1_1_result_1a7ec1236bbdb2e5be11d5a3a5a762f994" kindref="member">Result::Result</ref>(<ref refid="classlayouter_1_1_layout" kindref="compound">Layout</ref><sp/>&amp;l,<sp/>std::vector&lt;double&gt;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_result_1ab87c970ea77a33f924db11f4b3a84ea9" kindref="member">layout</ref><sp/>=<sp/><ref refid="classlayouter_1_1_layout" kindref="compound">Layout</ref>(l);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_result_1a86cc3b6d894483710b6ebeed89851bc6" kindref="member">cost</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_result_1a7371067b303ede998a30a1b5d539013c" kindref="member">totalCost</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlayouter_1_1_result_1a86cc3b6d894483710b6ebeed89851bc6" kindref="member">cost</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_result_1a7371067b303ede998a30a1b5d539013c" kindref="member">totalCost</ref><sp/>+=<sp/><ref refid="classlayouter_1_1_result_1a86cc3b6d894483710b6ebeed89851bc6" kindref="member">cost</ref>[i];</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="classlayouter_1_1_result_1a5b0e0f86e8794e690cea8f808d7e2ca6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_result_1a5b0e0f86e8794e690cea8f808d7e2ca6" kindref="member">Result::operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_result" kindref="compound">Result</ref><sp/>&amp;r)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_result_1a7371067b303ede998a30a1b5d539013c" kindref="member">totalCost</ref><sp/>==<sp/>r.<ref refid="classlayouter_1_1_result_1a7371067b303ede998a30a1b5d539013c" kindref="member">totalCost</ref>;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="classlayouter_1_1_result_1ae10bbdd07f0f95863fe105fc012c3e81" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_result_1ae10bbdd07f0f95863fe105fc012c3e81" kindref="member">Result::layoutEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_result" kindref="compound">Result</ref><sp/>&amp;r)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_result_1ab87c970ea77a33f924db11f4b3a84ea9" kindref="member">layout</ref><sp/>==<sp/>r.<ref refid="classlayouter_1_1_result_1ab87c970ea77a33f924db11f4b3a84ea9" kindref="member">layout</ref>;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="classlayouter_1_1_result_1a0c1ce166c80cc4b41da8e0a7857019b3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_result_1a0c1ce166c80cc4b41da8e0a7857019b3" kindref="member">Result::print</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>s,<sp/><ref refid="classlayouter_1_1_result_1ab87c970ea77a33f924db11f4b3a84ea9" kindref="member">layout</ref>.<ref refid="classlayouter_1_1_layout_1a1072a36ac9df7b58746bde578da18713" kindref="member">raw</ref>())<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>t,<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Cost:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classlayouter_1_1_result_1a7371067b303ede998a30a1b5d539013c" kindref="member">totalCost</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/><ref refid="classlayouter_1_1_result_1a86cc3b6d894483710b6ebeed89851bc6" kindref="member">cost</ref>)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>d;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>]&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="classlayouter_1_1_result_1a8ae2954aaff8258c4993365ff0692200" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classlayouter_1_1_result_1a8ae2954aaff8258c4993365ff0692200" kindref="member">Result::output</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>names,<sp/>types,<sp/>groups;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>std::stringstream<sp/><ref refid="classlayouter_1_1_result_1a8ae2954aaff8258c4993365ff0692200" kindref="member">output</ref>;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>s,<sp/><ref refid="classlayouter_1_1_result_1ab87c970ea77a33f924db11f4b3a84ea9" kindref="member">layout</ref>.<ref refid="classlayouter_1_1_layout_1a1072a36ac9df7b58746bde578da18713" kindref="member">raw</ref>())<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>t,<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>name<sp/>for<sp/>each<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>names.push_back(<ref refid="classlayouter_1_1_result_1a8b4a2a1dffb1af162f63046bf444be91" kindref="member">_names</ref>[t]);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>types.push_back(</highlight><highlight class="stringliteral">&quot;INTEGER&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>groups.push_back(str(boost::format(</highlight><highlight class="stringliteral">&quot;%1%_R&quot;</highlight><highlight class="normal">)<sp/>%<sp/>counter));</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Finalizing<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>output<sp/>&lt;&lt;<sp/>boost::algorithm::join(names,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>output<sp/>&lt;&lt;<sp/>boost::algorithm::join(types,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>output<sp/>&lt;&lt;<sp/>boost::algorithm::join(groups,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output.str();</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="classlayouter_1_1_schema_1a0bc0a43cfb609edb84d759602a80cf01" refkind="member"><highlight class="normal"><ref refid="classlayouter_1_1_schema_1a9d95e96cb60f0b08de67421e34a7d09d" kindref="member">Schema::Schema</ref>(std::vector&lt;unsigned&gt;<sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbA,<sp/>std::vector&lt;std::string&gt;<sp/>an):<sp/>attnames(an),<sp/>nbAttributes(a.size()),<sp/>nbTuples(nbA),<sp/>attributes(a)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="classlayouter_1_1_schema_1af0354e88215259aa28303d91e7b0589c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_schema_1af0354e88215259aa28303d91e7b0589c" kindref="member">Schema::add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query" kindref="compound">Query</ref><sp/>*q)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_schema_1a2aea30a3e87f6045a38fcfcc8720952a" kindref="member">queries</ref>.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_query" kindref="compound">Query</ref>(*q));</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="classlayouter_1_1_schema_1a4a313ee32d41840051f9f6990d29322d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_schema_1a4a313ee32d41840051f9f6990d29322d" kindref="member">Schema::removeLastQuery</ref>()<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_schema_1a2aea30a3e87f6045a38fcfcc8720952a" kindref="member">queries</ref>.pop_back();</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="classlayouter_1_1_schema_1a8335127a929e2d8b829e09948a93fed7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_schema_1a8335127a929e2d8b829e09948a93fed7" kindref="member">Schema::costForSubset</ref>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>t,<sp/>std::string<sp/>costModel)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_queries<sp/>=<sp/><ref refid="classlayouter_1_1_schema_1a2aea30a3e87f6045a38fcfcc8720952a" kindref="member">queries</ref>.size();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>0;<sp/>q<sp/>&lt;<sp/>num_queries;<sp/>++q)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>total<sp/>+=<sp/><ref refid="classlayouter_1_1_schema_1a2aea30a3e87f6045a38fcfcc8720952a" kindref="member">queries</ref>[q]-&gt;containerCost(t,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>costModel);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="classlayouter_1_1_schema_1a0a38653ba81f5236afc104be027a2d84" refkind="member"><highlight class="normal"><ref refid="classlayouter_1_1_schema" kindref="compound">Schema</ref><sp/><ref refid="classlayouter_1_1_schema_1a0a38653ba81f5236afc104be027a2d84" kindref="member">Schema::baseCopy</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_schema" kindref="compound">Schema</ref><sp/>result(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>result.<ref refid="classlayouter_1_1_schema_1a2aea30a3e87f6045a38fcfcc8720952a" kindref="member">queries</ref>.clear();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="classlayouter_1_1_base_layouter_1ab4d68f4aa3fbaa8e01a1c53121158874" refkind="member"><highlight class="normal"><ref refid="classlayouter_1_1_base_layouter_1ab4d68f4aa3fbaa8e01a1c53121158874" kindref="member">BaseLayouter::BaseLayouter</ref>():<sp/>nbLayouts(0)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="classlayouter_1_1_base_layouter_1a9971511224c3c5c152f31bfc0daeff43" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_base_layouter_1a9971511224c3c5c152f31bfc0daeff43" kindref="member">BaseLayouter::layout</ref>(<ref refid="classlayouter_1_1_schema" kindref="compound">Schema</ref><sp/>s,<sp/>std::string<sp/>cM)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1af8584fae815274d94e7c86766abb8b01" kindref="member">costModel</ref><sp/>=<sp/>cM;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a3a68ce4cc4c40dff36c65bd83eb218ef" kindref="member">generateSubSets</ref>();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1aa7efefed6cf84ffb1dae1cb4eb783a18" kindref="member">iterateThroughLayouts</ref>();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>std::sort(<ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.begin(),<sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.end());</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="classlayouter_1_1_base_layouter_1a50096c37d22f587066425a8b52dacee2" refkind="member"><highlight class="normal"><ref refid="classlayouter_1_1_layout_1a42a9858dbe687a701d19de4b592ef06b" kindref="member">Layout::internal_layout_t</ref><sp/><ref refid="classlayouter_1_1_base_layouter_1a50096c37d22f587066425a8b52dacee2" kindref="member">BaseLayouter::eliminateInvalidSubsets</ref>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>reference,<sp/><ref refid="classlayouter_1_1_layout_1a42a9858dbe687a701d19de4b592ef06b" kindref="member">Layout::internal_layout_t</ref><sp/>input)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_layout_1a42a9858dbe687a701d19de4b592ef06b" kindref="member">Layout::internal_layout_t</ref><sp/>result;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>std::set&lt;unsigned&gt;<sp/>initial(reference.begin(),<sp/>reference.end());</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>right,<sp/>input)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initial.count(i)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>right;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463" refid="classlayouter_1_1_base_layouter_1a060ca333d617512dad105ed8b8ac31aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_base_layouter_1a060ca333d617512dad105ed8b8ac31aa" kindref="member">BaseLayouter::iterateLayoutSubsets</ref>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>input,<sp/><ref refid="classlayouter_1_1_layout_1a42a9858dbe687a701d19de4b592ef06b" kindref="member">Layout::internal_layout_t</ref><sp/>subsets)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>front<sp/>=<sp/>input;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_layout_1a42a9858dbe687a701d19de4b592ef06b" kindref="member">Layout::internal_layout_t</ref><sp/>rest<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Eliminate<sp/>all<sp/>invalid<sp/>combinations<sp/>from<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_layout_1a42a9858dbe687a701d19de4b592ef06b" kindref="member">Layout::internal_layout_t</ref><sp/>eliminated<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1a50096c37d22f587066425a8b52dacee2" kindref="member">eliminateInvalidSubsets</ref>(front,<sp/>rest);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>elimSizes;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>t<sp/>:<sp/>eliminated)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>elimSizes.push_back(t.size());</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>upperBound<sp/>=<sp/>eliminated.size()<sp/>&lt;<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref><sp/>?<sp/>eliminated.size()<sp/>:<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>check<sp/>lower<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>lower<sp/>bound<sp/>defines<sp/>how<sp/>many<sp/>partitions<sp/>we<sp/>need<sp/>to<sp/>actually<sp/>make<sp/>a<sp/>valid<sp/>layout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lowerBound<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1a5525bc6bcd2c7c69e56c83d2dc87c7cd" kindref="member">checkLowerBound</ref>(input,<sp/>subsets);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;----<sp/>E<sp/>/<sp/>U<sp/>/<sp/>L<sp/>----&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><ref refid="namespacelayouter_1a8fe7d9ecbfd0b9a1690bca4e2a544fd0" kindref="member">print</ref>(input);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><ref refid="namespacelayouter_1a8fe7d9ecbfd0b9a1690bca4e2a544fd0" kindref="member">print</ref>(eliminated);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>eliminated.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>schema.nbAttributes<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>upperBound<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>lowerBound<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;--------------------&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>lowerBound<sp/>-<sp/>1;<sp/>i<sp/>&lt;=<sp/>upperBound;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>intial<sp/>setting,<sp/>since<sp/>we<sp/>cannot<sp/>swap<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>combi;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>eliminated.size();<sp/>++j)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>combi<sp/>+=<sp/>j;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Combinations<sp/>&quot;<sp/>&lt;&lt;<sp/>eliminated.size()<sp/>&lt;&lt;<sp/>&quot;<sp/>over<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>combinations<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>noAttr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nb<sp/>+=<sp/>input.size();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb<sp/>+=<sp/>elimSizes[combi[j]];</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>&gt;<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++noAttr;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>contLoop;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>front<sp/>to<sp/>layout<sp/>and<sp/>all<sp/>other<sp/>combinations<sp/>here<sp/>and<sp/>check<sp/>if<sp/>they<sp/>are<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_layout" kindref="compound">Layout</ref><sp/>l;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.<ref refid="classlayouter_1_1_layout_1ad4a744f4467b5f1b457fc51f47a10f78" kindref="member">add</ref>(input);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l.<ref refid="classlayouter_1_1_layout_1a7f2f095c25094ec06069eb97122d7a03" kindref="member">canAdd</ref>(eliminated[combi[j]]))<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.<ref refid="classlayouter_1_1_layout_1ad4a744f4467b5f1b457fc51f47a10f78" kindref="member">add</ref>(eliminated[combi[j]]);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>contLoop;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;New<sp/>layout?&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>==<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_result" kindref="compound">Result</ref><sp/>r(l,<sp/><ref refid="classlayouter_1_1_base_layouter_1acca0ce7d35a66394254e27a5f28e1787" kindref="member">getCost</ref>(l));</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ab092b7f07c99e88e6b7d9689caef70fe" kindref="member">nbLayouts</ref>++;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.push_back(r);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal">contLoop:</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++combinations;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(boost::next_combination(combi.begin(),<sp/>combi.begin()<sp/>+<sp/>i,<sp/>combi.end()));</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>combinations<sp/>&lt;&lt;<sp/>&quot;<sp/>/<sp/>&quot;<sp/>&lt;&lt;<sp/>noAttr<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>all<sp/>combinations<sp/>had<sp/>more<sp/>attributes<sp/>than<sp/>we<sp/>can<sp/>add<sp/>to<sp/>the<sp/>table<sp/>we<sp/>can<sp/>break<sp/>the<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>since<sp/>there<sp/>will<sp/>be<sp/>no<sp/>case<sp/>where<sp/>adding<sp/>a<sp/>partition<sp/>will<sp/>have<sp/>std::less<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(combinations<sp/>==<sp/>noAttr)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547" refid="classlayouter_1_1_base_layouter_1a5525bc6bcd2c7c69e56c83d2dc87c7cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_base_layouter_1a5525bc6bcd2c7c69e56c83d2dc87c7cd" kindref="member">BaseLayouter::checkLowerBound</ref>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>input,<sp/><ref refid="classlayouter_1_1_layout_1a42a9858dbe687a701d19de4b592ef06b" kindref="member">Layout::internal_layout_t</ref><sp/>subsets)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>subsets<sp/>by<sp/>size<sp/>descending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_layout_1a42a9858dbe687a701d19de4b592ef06b" kindref="member">Layout::internal_layout_t</ref><sp/>sorted(subsets);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>sort(sorted.begin(),<sp/>sorted.end(),<sp/><ref refid="layout__utils_8cpp_1a189f883d79115f42a69959bdeab0a671" kindref="member">sort_subset_by_size</ref>);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>counted<sp/>=<sp/>input.size();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lowerBound<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sorted.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>counted<sp/>+=<sp/>sorted[i].size();</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(counted<sp/>&lt;=<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++lowerBound;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(counted<sp/>&lt;<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;unsigned&gt;::max();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lowerBound;</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568" refid="classlayouter_1_1_base_layouter_1a007c85e2e986eab1f9372d45a4aaca8b" refkind="member"><highlight class="normal">std::vector&lt;std::vector&lt;subset_t&gt;<sp/>&gt;<sp/><ref refid="classlayouter_1_1_base_layouter_1a007c85e2e986eab1f9372d45a4aaca8b" kindref="member">BaseLayouter::iterateThroughLayoutSubsetsFast</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;subset_t&gt;<sp/>list,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>current_size,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dest_size,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_attr,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>curr_attr)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Recurse<sp/>with<sp/>&quot;<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>current_size<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>dest_size<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>max_attr<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>curr_attr<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;subset_t&gt;<sp/>&gt;<sp/>iterate_result_t;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Recursion<sp/>abortion<sp/>defined<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>1<sp/>or<sp/>list.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>iterate_result_t<sp/>res;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.size()<sp/>+<sp/>curr_attr<sp/>==<sp/>max_attr)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;subset_t&gt;<sp/>tmp<sp/>=<sp/>{x};</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(tmp);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>we<sp/>handle<sp/>the<sp/>main<sp/>part<sp/>of<sp/>the<sp/>recursion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>iterate_result_t<sp/>result;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>list.size())<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FXIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(list.size()<sp/>-<sp/>1<sp/>&lt;<sp/>n<sp/>-<sp/>1<sp/>or<sp/>list.size()<sp/>==<sp/>index+1<sp/>or<sp/>list.size()<sp/>-<sp/>index<sp/>&lt;<sp/>dest_size<sp/>-<sp/>current_size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>result;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>it<sp/>makes<sp/>sense<sp/>to<sp/>proceed<sp/>with<sp/>recursion<sp/>Potential</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>improvement.<sp/>Make<sp/>sure,<sp/>we<sp/>only<sp/>extract<sp/>those<sp/>subsets<sp/>that<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>relevant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>a<sp/>second<sp/>case<sp/>when<sp/>we<sp/>can<sp/>abort:<sp/>If<sp/>we<sp/>know,<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>n-1<sp/>elements<sp/>left<sp/>and<sp/>the<sp/>minimal<sp/>length<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>e.g.<sp/>two<sp/>that<sp/>means<sp/>we<sp/>generate<sp/>at<sp/>lest<sp/>(n-1)*two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attributes,<sp/>if<sp/>this<sp/>number<sp/>is<sp/>too<sp/>large<sp/>we<sp/>will<sp/>abort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>left_list<sp/>=<sp/>list[index];</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;subset_t&gt;<sp/>rest_list(list.begin()<sp/>+<sp/>index<sp/>+<sp/>1,<sp/>list.end());</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>define<sp/>another<sp/>abort<sp/>criterion<sp/>here,<sp/>if<sp/>a<sp/>single<sp/>element</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/><sp/><sp/>from<sp/>our<sp/>current<sp/>pivot<sp/>element<sp/>is<sp/>found<sp/>inside<sp/>another<sp/>element</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/><sp/><sp/><sp/>from<sp/>the<sp/>drill<sp/>down<sp/>list<sp/>we<sp/>can<sp/>safeley<sp/>remove<sp/>these<sp/>elements</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/><sp/><sp/><sp/>from<sp/>the<sp/>list</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;subset_t&gt;<sp/>new_rest;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>rest_list)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>:<sp/>left_list)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r<sp/>:<sp/>x)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>r)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bbb;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_rest.push_back(x);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bbb:</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>rest_list<sp/>=<sp/>new_rest;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rest_list.erase(std::remove_if(rest_list.begin(),<sp/>rest_list.end(),<sp/>[&amp;left_list](subset_t&amp;<sp/>e){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(<sp/>const<sp/>auto&amp;<sp/>f<sp/>:<sp/>left_list)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(std::find(e.begin(),<sp/>e.end(),<sp/>f)<sp/>!=<sp/>left_list.end())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),<sp/>rest_list.end());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>iterate_result_t<sp/>all;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rest_list.size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curr_attr<sp/>+<sp/>rest_list[0].size()<sp/>&lt;=<sp/>max_attr<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(rest_list[0].size()<sp/>*<sp/>(n<sp/>-<sp/>1)<sp/>+<sp/>curr_attr<sp/>&lt;=<sp/>max_attr<sp/>or<sp/>list.size()<sp/>&lt;<sp/>n))<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>all<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1a007c85e2e986eab1f9372d45a4aaca8b" kindref="member">iterateThroughLayoutSubsetsFast</ref>(n<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rest_list,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_size<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest_size,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_attr,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_attr<sp/>+<sp/>list[index].size());</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>part<sp/>:<sp/>all)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Now<sp/>we<sp/>need<sp/>a<sp/>fast<sp/>way<sp/>to<sp/>identify<sp/>that<sp/>we<sp/>will<sp/>not<sp/>have</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>single<sp/>elemnt<sp/>doubled.</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;subset_t&gt;<sp/>tmp<sp/>{list[index]};</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp.insert(tmp.end(),<sp/>part.begin(),<sp/>part.end());</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(tmp);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="663" refid="classlayouter_1_1_base_layouter_1aa7efefed6cf84ffb1dae1cb4eb783a18" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_base_layouter_1aa7efefed6cf84ffb1dae1cb4eb783a18" kindref="member">BaseLayouter::iterateThroughLayouts</ref>()<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>std::sort(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.begin(),<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.end(),<sp/><ref refid="layout__utils_8cpp_1a262ac7552679026b025fa256b65b95df" kindref="member">subset_t_lt</ref>);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_layout" kindref="compound">Layout</ref><sp/>l;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>l.<ref refid="classlayouter_1_1_layout_1ad4a744f4467b5f1b457fc51f47a10f78" kindref="member">add</ref>(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[0]);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_result" kindref="compound">Result</ref><sp/>r(l,<sp/><ref refid="classlayouter_1_1_base_layouter_1acca0ce7d35a66394254e27a5f28e1787" kindref="member">getCost</ref>(l));</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ab092b7f07c99e88e6b7d9689caef70fe" kindref="member">nbLayouts</ref>++;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.push_back(r);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(subsets.size()<sp/>&gt;<sp/>schema.nbAttributes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>an<sp/>issue<sp/>here<sp/>since<sp/>we<sp/>do<sp/>not<sp/>check<sp/>what<sp/>the<sp/>minimum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size<sp/>of<sp/>attribute<sp/>groups<sp/>is<sp/>we<sp/>need<sp/>to<sp/>have.<sp/>If<sp/>we<sp/>have<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>that<sp/>only<sp/>using<sp/>100<sp/>groups<sp/>in<sp/>our<sp/>100<sp/>attribute<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>large<sp/>table<sp/>we<sp/>can<sp/>succeed,<sp/>we<sp/>will<sp/>check<sp/>all<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>possibilities<sp/>before,<sp/>thus<sp/>we<sp/>need<sp/>to<sp/>increase<sp/>the<sp/>start<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>reasonable<sp/>amount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>know<sp/>the<sp/>subsets<sp/>are<sp/>orered<sp/>in<sp/>size,<sp/>we<sp/>can<sp/>deduce<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>minium<sp/>amount<sp/>by<sp/>the<sp/>size<sp/>of<sp/>the<sp/>biggest<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_min<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref><sp/>/<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.back().size();</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start_min;<sp/>i<sp/>&lt;=<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>intermediate_results<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1a007c85e2e986eab1f9372d45a4aaca8b" kindref="member">iterateThroughLayoutSubsetsFast</ref>(i,</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>,</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>intermediate_results)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_layout" kindref="compound">Layout</ref><sp/>l;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t<sp/>:<sp/>x)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.<ref refid="classlayouter_1_1_layout_1ad4a744f4467b5f1b457fc51f47a10f78" kindref="member">add</ref>(t);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_result" kindref="compound">Result</ref><sp/>r(l,<sp/><ref refid="classlayouter_1_1_base_layouter_1acca0ce7d35a66394254e27a5f28e1787" kindref="member">getCost</ref>(l));</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ab092b7f07c99e88e6b7d9689caef70fe" kindref="member">nbLayouts</ref>++;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.push_back(r);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//list&lt;subset_t&gt;<sp/>down(subsets.begin(),<sp/>subsets.end());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Layout<sp/>l;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>iterateThroughLayoutSubsets2(l,<sp/>down);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.size();<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a060ca333d617512dad105ed8b8ac31aa" kindref="member">iterateLayoutSubsets</ref>(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[s],<sp/><ref refid="classlayouter_1_1_layout_1a42a9858dbe687a701d19de4b592ef06b" kindref="member">Layout::internal_layout_t</ref>(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.begin()<sp/>+<sp/>1<sp/>+<sp/>s,<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.end()));</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719" refid="classlayouter_1_1_base_layouter_1a4e8799c8c0368bd7b34813ddb52505da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_base_layouter_1a4e8799c8c0368bd7b34813ddb52505da" kindref="member">BaseLayouter::generateLayouts</ref>(<ref refid="classlayouter_1_1_layout" kindref="compound">Layout</ref><sp/>layout,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iter)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>continue<sp/>if<sp/>we<sp/>are<sp/>save</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>&gt;=<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layout.<ref refid="classlayouter_1_1_layout_1a7a9f702577704d43df12dbc6cde37ae4" kindref="member">size</ref>()<sp/>==<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_result" kindref="compound">Result</ref><sp/>r(layout,<sp/><ref refid="classlayouter_1_1_base_layouter_1acca0ce7d35a66394254e27a5f28e1787" kindref="member">getCost</ref>(layout));</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(r.<ref refid="classlayouter_1_1_result_1ab87c970ea77a33f924db11f4b3a84ea9" kindref="member">layout</ref><sp/>==<sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.back().layout))<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ab092b7f07c99e88e6b7d9689caef70fe" kindref="member">nbLayouts</ref>++;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.push_back(r);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>current<sp/>subset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>currentSubset<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[iter];</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_layout" kindref="compound">Layout</ref><sp/>original<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1a9971511224c3c5c152f31bfc0daeff43" kindref="member">layout</ref>;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_base_layouter_1a6c1996c2ed452c0f8ea3bd11db07771b" kindref="member">tryToAddSubset</ref>(layout,<sp/>currentSubset))<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>to<sp/>the<sp/>layout<sp/>and<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>layout.<ref refid="classlayouter_1_1_layout_1ad4a744f4467b5f1b457fc51f47a10f78" kindref="member">add</ref>(currentSubset);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layout.<ref refid="classlayouter_1_1_layout_1a7a9f702577704d43df12dbc6cde37ae4" kindref="member">size</ref>()<sp/>==<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_result" kindref="compound">Result</ref><sp/>r(layout,<sp/><ref refid="classlayouter_1_1_base_layouter_1acca0ce7d35a66394254e27a5f28e1787" kindref="member">getCost</ref>(layout));</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ab092b7f07c99e88e6b7d9689caef70fe" kindref="member">nbLayouts</ref>++;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.push_back(r);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newIter<sp/>=<sp/>iter<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a4e8799c8c0368bd7b34813ddb52505da" kindref="member">generateLayouts</ref>(layout,<sp/>newIter);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[iter<sp/>+<sp/>1].size()<sp/>+<sp/>original.<ref refid="classlayouter_1_1_layout_1a7a9f702577704d43df12dbc6cde37ae4" kindref="member">size</ref>()<sp/>&lt;=<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>)</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a4e8799c8c0368bd7b34813ddb52505da" kindref="member">generateLayouts</ref>(original,<sp/>iter<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754" refid="classlayouter_1_1_base_layouter_1a6c1996c2ed452c0f8ea3bd11db07771b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_base_layouter_1a6c1996c2ed452c0f8ea3bd11db07771b" kindref="member">BaseLayouter::tryToAddSubset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_layout" kindref="compound">Layout</ref><sp/>&amp;l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>&amp;subset)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l.<ref refid="classlayouter_1_1_layout_1a7a9f702577704d43df12dbc6cde37ae4" kindref="member">size</ref>()<sp/>+<sp/>subset.size()<sp/>&gt;<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>)</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!l.<ref refid="classlayouter_1_1_layout_1a7f2f095c25094ec06069eb97122d7a03" kindref="member">canAdd</ref>(subset))</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767" refid="classlayouter_1_1_base_layouter_1a3a68ce4cc4c40dff36c65bd83eb218ef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_base_layouter_1a3a68ce4cc4c40dff36c65bd83eb218ef" kindref="member">BaseLayouter::generateSubSets</ref>()<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a014d0a4cb191c1c6354e12ef974a9018" kindref="member">generateSubSetsK</ref>(i,<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773" refid="classlayouter_1_1_base_layouter_1a11820adc0ef25896a3ffca6b904296cc" refkind="member"><highlight class="normal">std::vector&lt;subset_t&gt;<sp/><ref refid="classlayouter_1_1_base_layouter_1a11820adc0ef25896a3ffca6b904296cc" kindref="member">BaseLayouter::externalGenerateSubSetsK</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nbAtts)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>s(nbAtts);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbAtts;<sp/>++i)</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>s[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>std::vector&lt;subset_t&gt;<sp/>result;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>result.push_back(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref>(s.begin(),<sp/>s.begin()<sp/>+<sp/>k));</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(boost::next_partial_permutation(s.begin(),<sp/>s.begin()<sp/>+<sp/>k,<sp/>s.end()));</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787" refid="classlayouter_1_1_base_layouter_1a014d0a4cb191c1c6354e12ef974a9018" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_base_layouter_1a014d0a4cb191c1c6354e12ef974a9018" kindref="member">BaseLayouter::generateSubSetsK</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nbAtts)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref><sp/>+=<sp/><ref refid="classlayouter_1_1_base_layouter_1a11820adc0ef25896a3ffca6b904296cc" kindref="member">externalGenerateSubSetsK</ref>(k,<sp/>nbAtts);</highlight></codeline>
<codeline lineno="789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792" refid="classlayouter_1_1_base_layouter_1ac2efd16b7897f7bbe7f50458003f19e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_base_layouter_1ac2efd16b7897f7bbe7f50458003f19e1" kindref="member">BaseLayouter::generateSet</ref>(std::vector&lt;subset_t&gt;<sp/>&amp;ctx,<sp/>std::vector&lt;unsigned&gt;<sp/>s,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>position,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nextInt,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N)<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(position<sp/>==<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>subset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>newSubSet(k);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>k;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newSubSet[i]<sp/>=<sp/>s[i];</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx.push_back(newSubSet);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>nextInt;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>s[position]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ac2efd16b7897f7bbe7f50458003f19e1" kindref="member">generateSet</ref>(ctx,<sp/>s,<sp/>position<sp/>+<sp/>1,<sp/>i<sp/>+<sp/>1,<sp/>k,<sp/>N);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811" refid="classlayouter_1_1_base_layouter_1acca0ce7d35a66394254e27a5f28e1787" refkind="member"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="classlayouter_1_1_base_layouter_1acca0ce7d35a66394254e27a5f28e1787" kindref="member">BaseLayouter::getCost</ref>(<ref refid="classlayouter_1_1_layout" kindref="compound">Layout</ref><sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_queries<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a2aea30a3e87f6045a38fcfcc8720952a" kindref="member">queries</ref>.size();</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>totalCost(num_queries,<sp/>0.0);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>container,<sp/>l.<ref refid="classlayouter_1_1_layout_1a1072a36ac9df7b58746bde578da18713" kindref="member">raw</ref>())<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>0;<sp/>q<sp/>&lt;<sp/>num_queries;<sp/>++q)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>totalCost[q]<sp/>+=<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a2aea30a3e87f6045a38fcfcc8720952a" kindref="member">queries</ref>[q]-&gt;containerCost(container,<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>,<sp/><ref refid="classlayouter_1_1_base_layouter_1af8584fae815274d94e7c86766abb8b01" kindref="member">costModel</ref>);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>totalCost;</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823" refid="classlayouter_1_1_base_layouter_1a0db2c2bb60319c1670e78f5879127fec" refkind="member"><highlight class="normal">std::vector&lt;Result&gt;<sp/><ref refid="classlayouter_1_1_base_layouter_1a0db2c2bb60319c1670e78f5879127fec" kindref="member">BaseLayouter::getNBestResults</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ms<sp/>=<sp/>n<sp/>&lt;<sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.size()<sp/>?<sp/>n<sp/>:<sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.size();</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>std::vector&lt;Result&gt;<sp/>rs<sp/>=<sp/>std::vector&lt;Result&gt;(ms);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ms;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>rs[i]<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>[i];</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>rs[i].setNames(<ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a3e70daefd9a90b4d7acead64da2a07d5" kindref="member">getAttributeNames</ref>());</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rs;</highlight></codeline>
<codeline lineno="831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833" refid="classlayouter_1_1_base_layouter_1a9419bfcfa6a9429f58b7aacc881470c6" refkind="member"><highlight class="normal"><ref refid="classlayouter_1_1_result" kindref="compound">Result</ref><sp/><ref refid="classlayouter_1_1_base_layouter_1a9419bfcfa6a9429f58b7aacc881470c6" kindref="member">BaseLayouter::getBestResult</ref>(std::string<sp/>newCostModel)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_result" kindref="compound">Result</ref><sp/>r<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.front();</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>r.<ref refid="classlayouter_1_1_result_1af6bd1645fe2fbabb3b48f512bdfaebba" kindref="member">setNames</ref>(<ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a3e70daefd9a90b4d7acead64da2a07d5" kindref="member">getAttributeNames</ref>());</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839" refid="classlayouter_1_1_base_layouter_1a51af2b313475ef25d5ceed137b72cdb5" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="classlayouter_1_1_base_layouter_1a51af2b313475ef25d5ceed137b72cdb5" kindref="member">BaseLayouter::getAttributeNames</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a3e70daefd9a90b4d7acead64da2a07d5" kindref="member">getAttributeNames</ref>();</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843" refid="classlayouter_1_1_base_layouter_1ac2db931313133cefbd1102ed0d5be068" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_base_layouter_1ac2db931313133cefbd1102ed0d5be068" kindref="member">BaseLayouter::getRowCost</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>layout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>;<sp/>++i)</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.push_back(i);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a8335127a929e2d8b829e09948a93fed7" kindref="member">costForSubset</ref>(tmp,<sp/><ref refid="classlayouter_1_1_base_layouter_1af8584fae815274d94e7c86766abb8b01" kindref="member">costModel</ref>);</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852" refid="classlayouter_1_1_base_layouter_1a45906ffddd07523044763e595a55478c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_base_layouter_1a45906ffddd07523044763e595a55478c" kindref="member">BaseLayouter::getColumnCost</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.push_back(i);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a8335127a929e2d8b829e09948a93fed7" kindref="member">costForSubset</ref>(tmp,<sp/><ref refid="classlayouter_1_1_base_layouter_1af8584fae815274d94e7c86766abb8b01" kindref="member">costModel</ref>);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864" refid="classlayouter_1_1_fast_candidate_layouter_1aecab3aa454871a104221e53428433b74" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1aecab3aa454871a104221e53428433b74" kindref="member">FastCandidateLayouter::layout</ref>(<ref refid="classlayouter_1_1_schema" kindref="compound">Schema</ref><sp/>s,<sp/>std::string<sp/>costModel)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.clear();</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.clear();</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1ae33d4a01d27cdbf29a863b5dc1677140" kindref="member">_mapping</ref>.clear();</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref><sp/>=<sp/>std::vector&lt;std::set&lt;unsigned&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>costModel<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1af8584fae815274d94e7c86766abb8b01" kindref="member">costModel</ref>;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>part<sp/>where<sp/>the<sp/>relevant<sp/>subsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_candidate_layouter_1ab59af9130dfba12e39f36a1d68c2717c" kindref="member">generateCandidateList</ref>();</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>subset<sp/>mapping<sp/>for<sp/>primary<sp/>partitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1ae33d4a01d27cdbf29a863b5dc1677140" kindref="member">_mapping</ref>.push_back(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref>(<ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>[i].begin(),<sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>[i].end()));</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>Create<sp/>the<sp/>required<sp/>partitions<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>partitions(<ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>.size()<sp/>-<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>partitions[i<sp/>-<sp/>1]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>initial(1,<sp/>0);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1a64bbf994af3892530cd2d964bec03b66" kindref="member">generateResults</ref>(initial,<sp/>partitions);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remap<sp/>result,<sp/>based<sp/>on<sp/>partitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>std::vector&lt;subset_t&gt;<sp/>mappedResult;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>s,<sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1adaaab1442715c71b2c00a0df4c21a346" kindref="member">result</ref>)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>newSubset;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j,<sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1ae33d4a01d27cdbf29a863b5dc1677140" kindref="member">_mapping</ref>[i])</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newSubset<sp/>+=<sp/>j;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>mappedResult<sp/>+=<sp/>newSubset;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1adaaab1442715c71b2c00a0df4c21a346" kindref="member">result</ref><sp/>=<sp/>mappedResult;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>costs;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>s,<sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1adaaab1442715c71b2c00a0df4c21a346" kindref="member">result</ref>)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>costs.push_back(schema.costForSubset(s,<sp/><ref refid="config_8h_1a8ff5142b8f9e0750772cdf9b00a8ea7c" kindref="member">HYRISE_COST</ref>));</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_layout" kindref="compound">Layout</ref><sp/>l(<ref refid="classlayouter_1_1_fast_candidate_layouter_1adaaab1442715c71b2c00a0df4c21a346" kindref="member">result</ref>);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_result" kindref="compound">Result</ref><sp/>r(l,<sp/>costs);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.push_back(r);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal">}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916" refid="classlayouter_1_1_fast_candidate_layouter_1abc054187fcf33e1ed14c419cfb8a2302" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1abc054187fcf33e1ed14c419cfb8a2302" kindref="member">FastCandidateLayouter::costFor</ref>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>first)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1adaaab1442715c71b2c00a0df4c21a346" kindref="member">result</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>first)</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j,<sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1ae33d4a01d27cdbf29a863b5dc1677140" kindref="member">_mapping</ref>[i])</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>tmp.push_back(j);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a8335127a929e2d8b829e09948a93fed7" kindref="member">costForSubset</ref>(tmp,<sp/><ref refid="config_8h_1a8ff5142b8f9e0750772cdf9b00a8ea7c" kindref="member">HYRISE_COST</ref>);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1adaaab1442715c71b2c00a0df4c21a346" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927" refid="classlayouter_1_1_fast_candidate_layouter_1a4b80d38ffd481288ee66017479e504e0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1abc054187fcf33e1ed14c419cfb8a2302" kindref="member">FastCandidateLayouter::costFor</ref>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>first,<sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>second)<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1abc054187fcf33e1ed14c419cfb8a2302" kindref="member">costFor</ref>(first)<sp/>+<sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1abc054187fcf33e1ed14c419cfb8a2302" kindref="member">costFor</ref>(second);</highlight></codeline>
<codeline lineno="929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931" refid="classlayouter_1_1_fast_candidate_layouter_1a64bbf994af3892530cd2d964bec03b66" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1a64bbf994af3892530cd2d964bec03b66" kindref="member">FastCandidateLayouter::generateResults</ref>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>initial,<sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_layout_1a42a9858dbe687a701d19de4b592ef06b" kindref="member">Layout::internal_layout_t</ref><sp/>intermediate;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>next;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.size()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>initial.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1adaaab1442715c71b2c00a0df4c21a346" kindref="member">result</ref><sp/>+=<sp/>initial;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>combined(initial);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>combined<sp/>+=<sp/>other.front();</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>compare<sp/>the<sp/>cost<sp/>for<sp/>all<sp/>possibilities,<sp/>both,<sp/>merged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>singleCost<sp/>=<sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1abc054187fcf33e1ed14c419cfb8a2302" kindref="member">costFor</ref>(initial,<sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref>(1,<sp/>other.front()));</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mergedCost<sp/>=<sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1abc054187fcf33e1ed14c419cfb8a2302" kindref="member">costFor</ref>(combined);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a8fe7d9ecbfd0b9a1690bca4e2a544fd0" kindref="member">print</ref>(combined);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a8fe7d9ecbfd0b9a1690bca4e2a544fd0" kindref="member">print</ref>(initial);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a8fe7d9ecbfd0b9a1690bca4e2a544fd0" kindref="member">print</ref>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref>(1,<sp/>other.front()));</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1abc054187fcf33e1ed14c419cfb8a2302" kindref="member">costFor</ref>(initial)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1abc054187fcf33e1ed14c419cfb8a2302" kindref="member">costFor</ref>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref>(1,<sp/>other.front()))<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;SC<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>singleCost<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MC<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mergedCost<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(singleCost<sp/>&lt;<sp/>min)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intermediate.clear();</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intermediate<sp/>+=<sp/>initial,<sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref>(1,<sp/>other.front());</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref>(other.begin()<sp/>+<sp/>1,<sp/>other.end());</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>singleCost;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mergedCost<sp/>&lt;<sp/>min)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intermediate.clear();</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intermediate<sp/>+=<sp/>combined;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref>(other.begin()<sp/>+<sp/>1,<sp/>other.end());</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>mergedCost;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(boost::next_partial_permutation(other.begin(),<sp/>other.begin()<sp/>+<sp/>1,<sp/><sp/>other.end()));</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Finished<sp/>calculation,<sp/>checking<sp/>for<sp/>result<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>intermediate.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>single<sp/>cost<sp/>are<sp/>better,<sp/>proceed<sp/>separate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intermediate.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1adaaab1442715c71b2c00a0df4c21a346" kindref="member">result</ref><sp/>+=<sp/>intermediate.front();</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.begin()<sp/>+<sp/>1<sp/>!=<sp/>other.end())<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a8fe7d9ecbfd0b9a1690bca4e2a544fd0" kindref="member">print</ref>(intermediate.back());</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a8fe7d9ecbfd0b9a1690bca4e2a544fd0" kindref="member">print</ref>(next);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1a64bbf994af3892530cd2d964bec03b66" kindref="member">generateResults</ref>(intermediate.back(),<sp/>next);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1adaaab1442715c71b2c00a0df4c21a346" kindref="member">result</ref><sp/>+=<sp/>intermediate.back();</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.begin()<sp/>+<sp/>1<sp/>!=<sp/>other.end())</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1a64bbf994af3892530cd2d964bec03b66" kindref="member">generateResults</ref>(intermediate.front(),<sp/>next);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_fast_candidate_layouter_1adaaab1442715c71b2c00a0df4c21a346" kindref="member">result</ref><sp/>+=<sp/>intermediate.front();</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997" refid="classlayouter_1_1_candidate_layouter_1a26f4565f706b8b97e54c270d8006fcd1" refkind="member"><highlight class="normal"><ref refid="classlayouter_1_1_candidate_layouter_1a26f4565f706b8b97e54c270d8006fcd1" kindref="member">CandidateLayouter::CandidateLayouter</ref>():<sp/><ref refid="classlayouter_1_1_base_layouter" kindref="compound">BaseLayouter</ref>(),<sp/>_candidateList()<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000" refid="classlayouter_1_1_candidate_layouter_1af28114f3cd74d47b40ecdd0f06aadc15" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_candidate_layouter_1af28114f3cd74d47b40ecdd0f06aadc15" kindref="member">CandidateLayouter::layout</ref>(<ref refid="classlayouter_1_1_schema" kindref="compound">Schema</ref><sp/>s,<sp/>std::string<sp/>cM)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.clear();</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.clear();</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref><sp/>=<sp/>std::vector&lt;std::set&lt;unsigned&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1af8584fae815274d94e7c86766abb8b01" kindref="member">costModel</ref><sp/>=<sp/>cM;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>part<sp/>where<sp/>the<sp/>relevant<sp/>subsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_candidate_layouter_1ab59af9130dfba12e39f36a1d68c2717c" kindref="member">generateCandidateList</ref>();</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_candidate_layouter_1ab751daba06fbc2c442ea3e650388cf71" kindref="member">combineCandidates</ref>();</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Finish<sp/>the<sp/>job<sp/>and<sp/>search<sp/>for<sp/>the<sp/>perfect<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>std::sort(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.begin(),<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.end(),<sp/><ref refid="layout__utils_8cpp_1a262ac7552679026b025fa256b65b95df" kindref="member">subset_t_lt</ref>);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>bit<sp/>vector<sp/>with<sp/>all<sp/>valid<sp/>subsets,<sp/>initially<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>subsets<sp/>are<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>validSubsets(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.size(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>uncheckedSubsets(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.size(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cache<sp/>cost<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;subset_t,<sp/>double&gt;<sp/>cache;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reduce<sp/>the<sp/>number<sp/>of<sp/>subsets<sp/>to<sp/>examine<sp/>for<sp/>building<sp/>the<sp/>final</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>layout.<sp/>The<sp/>main<sp/>idea<sp/>in<sp/>this<sp/>sub-step<sp/>is<sp/>to<sp/>identify<sp/>all<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>merged<sp/>sub-groups<sp/>that<sp/>yield<sp/>equal<sp/>cost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>subsets<sp/>are<sp/>smaller<sp/>than<sp/>a<sp/>single<sp/>attribute,<sp/>ignore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[index].size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>currentSize<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[index].size();</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>end<sp/>of<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stop<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stop<sp/>&lt;<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.size())</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[++stop].size()<sp/>&gt;<sp/>currentSize)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>for<sp/>each<sp/>element<sp/>inside<sp/>this<sp/>block,<sp/>find<sp/>possible<sp/>partners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>index;<sp/>i<sp/>&lt;<sp/>stop;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uncheckedSubsets[i])</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache.count(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[i])<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache[<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[i]]<sp/>=<sp/>schema.costForSubset(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[i],<sp/><ref refid="config_8h_1a8ff5142b8f9e0750772cdf9b00a8ea7c" kindref="member">HYRISE_COST</ref>);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>cache[<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[i]];</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>compare<sp/>with<sp/>all<sp/>other<sp/>subsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>stop;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uncheckedSubsets[j]<sp/>&amp;&amp;<sp/><ref refid="layout__utils_8cpp_1a4f75765b29f31b5cb5178d67d4cb32c2" kindref="member">subset_t_content_equal</ref>(subsets[i],<sp/>subsets[j]))<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncheckedSubsets[j]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>test;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache.count(subsets[j])<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache[subsets[j]]<sp/>=<sp/>schema.costForSubset(subsets[j],<sp/><ref refid="config_8h_1a8ff5142b8f9e0750772cdf9b00a8ea7c" kindref="member">HYRISE_COST</ref>);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>=<sp/>cache[subsets[j]];</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>test)</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validSubsets[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>std::vector&lt;subset_t&gt;<sp/>newList;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>validSubsets.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(validSubsets[i])</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newList.push_back(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[i]);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref><sp/>=<sp/>newList;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1aa7efefed6cf84ffb1dae1cb4eb783a18" kindref="member">iterateThroughLayouts</ref>();</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>std::sort(<ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.begin(),<sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.end());</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085" refid="classlayouter_1_1_candidate_layouter_1ab59af9130dfba12e39f36a1d68c2717c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_candidate_layouter_1ab59af9130dfba12e39f36a1d68c2717c" kindref="member">CandidateLayouter::generateCandidateList</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(<ref refid="classlayouter_1_1_query" kindref="compound">Query</ref><sp/>*<sp/>q,<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a2aea30a3e87f6045a38fcfcc8720952a" kindref="member">queries</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;unsigned&gt;<sp/>newQuery;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>q-&gt;<ref refid="classlayouter_1_1_query_1a65bede58b78d50e778068c0b195b882b" kindref="member">queryAttributes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newQuery.insert(i);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>.push_back(newQuery);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::set&lt;unsigned&gt;<sp/>&gt;<sp/>newSets;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(std::set&lt;unsigned&gt;<sp/>&amp;oldSet,<sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;unsigned&gt;<sp/>intersect;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>newQuery)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldSet.count(i)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>set<sp/>and<sp/>the<sp/>existing<sp/>set<sp/>intersect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>attribute<sp/>to<sp/>the<sp/>intersection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intersect.insert(i);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>intersect)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newQuery.erase(i);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldSet.erase(i);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>track<sp/>of<sp/>which<sp/>sets<sp/>to<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newSets.push_back(intersect);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>new<sp/>sets,<sp/>i.e.<sp/>add<sp/>query<sp/>and<sp/>intersect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>.push_back(newQuery);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(std::set&lt;unsigned&gt;<sp/>newSet,<sp/>newSets)<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>.push_back(newSet);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>empty<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned&gt;<sp/>toDelete;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>[i].size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toDelete.push_back(i);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>toDelete.size();<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>.erase(<ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>.begin()<sp/>+<sp/>toDelete[i<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>a<sp/>set<sp/>for<sp/>those<sp/>attributes<sp/>that<sp/>are<sp/>never<sp/>queried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>std::set&lt;unsigned&gt;<sp/>neverQueried;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<ref refid="classlayouter_1_1_schema_1a42edf8cfb82aecc5827980be5d5a5205" kindref="member">nbAttributes</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>queried<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(std::set&lt;unsigned&gt;<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">,<sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">set</highlight><highlight class="normal">.<ref refid="classlayouter_1_1_base_layouter_1a6e76630eaf8939a9365cc8a795e41e73" kindref="member">count</ref>(i)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queried<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!queried)<sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>neverQueried.insert(i);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neverQueried.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>.push_back(neverQueried);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159" refid="base_8cpp_1aa780bf7836bea7a89ad280cbf83d7887" refkind="member"><highlight class="normal">std::string<sp/><ref refid="base_8cpp_1aa780bf7836bea7a89ad280cbf83d7887" kindref="member">strval</ref>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>strs;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>strs<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strs.str();</highlight></codeline>
<codeline lineno="1166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169" refid="base_8cpp_1a9d01ad399f906dd61b7694cfc1d6f414" refkind="member"><highlight class="normal"><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/><ref refid="base_8cpp_1a9d01ad399f906dd61b7694cfc1d6f414" kindref="member">merge_subsets</ref>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>base,<sp/>std::vector&lt;subset_t&gt;<sp/>&amp;mapping)<sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>result;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j,<sp/>mapping[i])<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(j);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180" refid="base_8cpp_1a4fdfe2597e225ee78646c2f7ecd86d52" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::unordered_map&lt;std::string,<sp/>double&gt;<sp/><ref refid="base_8cpp_1a4fdfe2597e225ee78646c2f7ecd86d52" kindref="member">cache_t</ref>;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Intermediate<sp/>Result<sp/>Structure<sp/>to<sp/>capture<sp/>cost<sp/>and<sp/>mappings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183" refid="struct__intermediate" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__intermediate" kindref="compound">_intermediate</ref><sp/>{</highlight></codeline>
<codeline lineno="1184" refid="struct__intermediate_1af24225a6008c2ff798148d4b23013dd5" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;subset_t&gt;<sp/><ref refid="struct__intermediate_1af24225a6008c2ff798148d4b23013dd5" kindref="member">single</ref>;</highlight></codeline>
<codeline lineno="1185" refid="struct__intermediate_1ae84f75ac3f9c13f11bc7b91c214ce904" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct__intermediate_1ae84f75ac3f9c13f11bc7b91c214ce904" kindref="member">single_cost</ref>;</highlight></codeline>
<codeline lineno="1186" refid="struct__intermediate_1a653a78c2821b0e1388cd0c6e62c4fe8f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/><ref refid="struct__intermediate_1a653a78c2821b0e1388cd0c6e62c4fe8f" kindref="member">merged</ref>;</highlight></codeline>
<codeline lineno="1187" refid="struct__intermediate_1a353f2a2cf38bcacc547ec07da8ff9404" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct__intermediate_1a353f2a2cf38bcacc547ec07da8ff9404" kindref="member">merge_cost</ref>;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189" refid="struct__intermediate_1ab9880e158839e7ac7a22133d8b2d216a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct__intermediate" kindref="compound">_intermediate</ref><sp/><ref refid="struct__intermediate_1ab9880e158839e7ac7a22133d8b2d216a" kindref="member">create</ref>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>base,<sp/>std::vector&lt;subset_t&gt;<sp/>&amp;mapping,<sp/><ref refid="classlayouter_1_1_schema" kindref="compound">Schema</ref><sp/>&amp;schema,<sp/>std::string<sp/>&amp;costModel,<sp/><ref refid="base_8cpp_1a4fdfe2597e225ee78646c2f7ecd86d52" kindref="member">cache_t</ref><sp/>&amp;cache)<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__intermediate" kindref="compound">_intermediate</ref><sp/>res;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>res.<ref refid="struct__intermediate_1ae84f75ac3f9c13f11bc7b91c214ce904" kindref="member">single_cost</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>res.<ref refid="struct__intermediate_1a353f2a2cf38bcacc547ec07da8ff9404" kindref="member">merge_cost</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tmp_val;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res.<ref refid="struct__intermediate_1af24225a6008c2ff798148d4b23013dd5" kindref="member">single</ref>.push_back(mapping[i]);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp_val<sp/>=<sp/><ref refid="base_8cpp_1aa780bf7836bea7a89ad280cbf83d7887" kindref="member">strval</ref>(mapping[i]);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache.count(tmp_val)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache[tmp_val]<sp/>=<sp/>schema.<ref refid="classlayouter_1_1_schema_1a8335127a929e2d8b829e09948a93fed7" kindref="member">costForSubset</ref>(mapping[i],<sp/>costModel);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res.<ref refid="struct__intermediate_1ae84f75ac3f9c13f11bc7b91c214ce904" kindref="member">single_cost</ref><sp/>+=<sp/>cache[tmp_val];</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//res.single_cost<sp/>+=<sp/>schema.costForSubset(mapping[i],<sp/>costModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j,<sp/>mapping[i])<sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.<ref refid="struct__intermediate_1a653a78c2821b0e1388cd0c6e62c4fe8f" kindref="member">merged</ref>.push_back(j);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>res.<ref refid="struct__intermediate_1a353f2a2cf38bcacc547ec07da8ff9404" kindref="member">merge_cost</ref><sp/>=<sp/>schema.<ref refid="classlayouter_1_1_schema_1a8335127a929e2d8b829e09948a93fed7" kindref="member">costForSubset</ref>(res.<ref refid="struct__intermediate_1a653a78c2821b0e1388cd0c6e62c4fe8f" kindref="member">merged</ref>,<sp/>costModel);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218" refid="classlayouter_1_1_candidate_layouter_1a467445f4ad85a20c8e62bfd7bfb2f2f2" refkind="member"><highlight class="normal">std::vector&lt;subset_t&gt;<sp/><ref refid="classlayouter_1_1_candidate_layouter_1a467445f4ad85a20c8e62bfd7bfb2f2f2" kindref="member">CandidateLayouter::externalCombineCandidates</ref>(std::vector&lt;std::set&lt;<sp/>unsigned&gt;<sp/>&gt;<sp/>candidateList)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>std::vector&lt;subset_t&gt;<sp/>mapping;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>candidateList.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>mapping.push_back(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref>(candidateList[i].begin(),<sp/>candidateList[i].end()));</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cache<sp/>to<sp/>avoid<sp/>frequent<sp/>recalculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><ref refid="base_8cpp_1a4fdfe2597e225ee78646c2f7ecd86d52" kindref="member">cache_t</ref><sp/>_cache;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>first<sp/>step<sp/>is<sp/>to<sp/>build<sp/>a<sp/>list<sp/>of<sp/>permutations<sp/>of<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//candidate<sp/>list,<sp/>so<sp/>that<sp/>if<sp/>the<sp/>input<sp/>is<sp/>[1][2,3]<sp/>-&gt;<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//will<sp/>be<sp/>[1],<sp/>[2,3],<sp/>[1,2,3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>std::vector&lt;subset_t&gt;<sp/>result;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>tmp(candidateList.size(),<sp/>0);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>initial;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>the<sp/>current<sp/>permutation<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>candidateList.size();<sp/>++j)</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp[j]<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/><ref refid="classlayouter_1_1_candidate_layouter_1a7764edaec8599996af030193e9006e3e" kindref="member">candidateMergePath</ref>(initial,<sp/>tmp,<sp/>mapping,<sp/>_cache);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247" refid="classlayouter_1_1_candidate_layouter_1a7764edaec8599996af030193e9006e3e" refkind="member"><highlight class="normal">std::vector&lt;subset_t&gt;<sp/><ref refid="classlayouter_1_1_candidate_layouter_1a7764edaec8599996af030193e9006e3e" kindref="member">CandidateLayouter::candidateMergePath</ref>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>initial,<sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>rest,<sp/>std::vector&lt;subset_t&gt;<sp/>&amp;mapping,<sp/>std::unordered_map&lt;std::string,<sp/>double&gt;<sp/>&amp;_cache)<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>std::vector&lt;subset_t&gt;<sp/>result;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>combined(initial);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>combined.push_back(rest.front());</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__intermediate" kindref="compound">_intermediate</ref><sp/>c<sp/>=<sp/><ref refid="struct__intermediate_1ab9880e158839e7ac7a22133d8b2d216a" kindref="member">_intermediate::create</ref>(combined,<sp/>mapping,<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>,<sp/><ref refid="classlayouter_1_1_base_layouter_1af8584fae815274d94e7c86766abb8b01" kindref="member">costModel</ref>,<sp/>_cache);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c.<ref refid="struct__intermediate_1af24225a6008c2ff798148d4b23013dd5" kindref="member">single</ref>.size()<sp/>==<sp/>1<sp/>||<sp/>c.<ref refid="struct__intermediate_1a353f2a2cf38bcacc547ec07da8ff9404" kindref="member">merge_cost</ref><sp/>&lt;<sp/>c.<ref refid="struct__intermediate_1ae84f75ac3f9c13f11bc7b91c214ce904" kindref="member">single_cost</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Append<sp/>the<sp/>intermediate<sp/>merged<sp/>list<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(c.<ref refid="struct__intermediate_1a653a78c2821b0e1388cd0c6e62c4fe8f" kindref="member">merged</ref>);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rest.begin()<sp/>+<sp/>1<sp/>!=<sp/>rest.end())<sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>down(rest.begin()<sp/>+<sp/>1,<sp/>rest.end());</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;subset_t&gt;<sp/>tmp<sp/>=<sp/><ref refid="classlayouter_1_1_candidate_layouter_1a7764edaec8599996af030193e9006e3e" kindref="member">candidateMergePath</ref>(combined,<sp/>down,<sp/>mapping,<sp/>_cache);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>t,<sp/>tmp)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(t);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(boost::next_partial_permutation(rest.begin(),<sp/>rest.begin()<sp/>+<sp/>1,<sp/>rest.end()));</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272" refid="classlayouter_1_1_candidate_layouter_1ab751daba06fbc2c442ea3e650388cf71" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_candidate_layouter_1ab751daba06fbc2c442ea3e650388cf71" kindref="member">CandidateLayouter::combineCandidates</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref><sp/>=<sp/><ref refid="classlayouter_1_1_candidate_layouter_1a467445f4ad85a20c8e62bfd7bfb2f2f2" kindref="member">externalCombineCandidates</ref>(<ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_divide_and_conquer_layouter_1a1e6be75adc37970062e3a82c723c3e36" kindref="member">layouter::DivideAndConquerLayouter::numCuts</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280" refid="classlayouter_1_1_divide_and_conquer_layouter_1a5b219150452034db8e83e4e2176e7e82" refkind="member"><highlight class="normal"><ref refid="classlayouter_1_1_divide_and_conquer_layouter_1a5b219150452034db8e83e4e2176e7e82" kindref="member">DivideAndConquerLayouter::DivideAndConquerLayouter</ref>():<sp/><ref refid="classlayouter_1_1_candidate_layouter" kindref="compound">CandidateLayouter</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284" refid="classlayouter_1_1_divide_and_conquer_layouter_1a375e91a1216c374c34ca6d195cc5d921" refkind="member"><highlight class="normal"><ref refid="class_matrix" kindref="compound">Matrix&lt;int&gt;</ref><sp/><ref refid="classlayouter_1_1_divide_and_conquer_layouter_1a375e91a1216c374c34ca6d195cc5d921" kindref="member">DivideAndConquerLayouter::createAffinityMatrix</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>the<sp/>initial<sp/>empty<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix&lt;int&gt;</ref><sp/>d(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.size());</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>make<sp/>the<sp/>big<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.size()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>subsetToCheck<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[i];</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>otherSubset<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[j];</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>check<sp/>both<sp/>subsets<sp/>if<sp/>they<sp/>appear<sp/>in<sp/>the<sp/>queries<sp/>together</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="classlayouter_1_1_query" kindref="compound">Query</ref><sp/>*<sp/>q,<sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref>.<sp/>queries)<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subset_t::iterator<sp/>l<sp/>=<sp/>std::find_first_of(q-&gt;<ref refid="classlayouter_1_1_query_1a65bede58b78d50e778068c0b195b882b" kindref="member">queryAttributes</ref>.begin(),</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q-&gt;<ref refid="classlayouter_1_1_query_1a65bede58b78d50e778068c0b195b882b" kindref="member">queryAttributes</ref>.end(),</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subsetToCheck.begin(),</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subsetToCheck.end());</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subset_t::iterator<sp/>r<sp/>=<sp/>std::find_first_of(q-&gt;<ref refid="classlayouter_1_1_query_1a65bede58b78d50e778068c0b195b882b" kindref="member">queryAttributes</ref>.begin(),</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q-&gt;<ref refid="classlayouter_1_1_query_1a65bede58b78d50e778068c0b195b882b" kindref="member">queryAttributes</ref>.end(),</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherSubset.begin(),</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherSubset.end());</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>!=<sp/>q-&gt;<ref refid="classlayouter_1_1_query_1a65bede58b78d50e778068c0b195b882b" kindref="member">queryAttributes</ref>.end()<sp/>&amp;&amp;<sp/>r<sp/>!=<sp/>q-&gt;<ref refid="classlayouter_1_1_query_1a65bede58b78d50e778068c0b195b882b" kindref="member">queryAttributes</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Found<sp/>a<sp/>hit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>d.get(i,<sp/>j)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.set(j,<sp/>i,<sp/>tmp);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.set(i,<sp/>j,<sp/>tmp);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322" refid="classlayouter_1_1_divide_and_conquer_layouter_1a08d8edff7952c22c65281d271137b581" refkind="member"><highlight class="normal">std::vector&lt;std::vector&lt;set_subset_t&gt;<sp/>&gt;<sp/><ref refid="classlayouter_1_1_divide_and_conquer_layouter_1a08d8edff7952c22c65281d271137b581" kindref="member">DivideAndConquerLayouter::partitionGraph</ref>(<ref refid="class_matrix" kindref="compound">Matrix&lt;int&gt;</ref><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><ref refid="structadj__t" kindref="compound">adj_t</ref><sp/>t<sp/>=<sp/>m.<ref refid="class_matrix_1a81dcdbb9ff4487d21726b3d0641791b1" kindref="member">buildAdjacency</ref>();</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numvertices<sp/>=<sp/>m.<ref refid="class_matrix_1a7572a6a37fb51f6ebe067e271375047d" kindref="member">numVertices</ref>();</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>options[METIS_NOPTIONS];</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/>METIS_SetDefaultOptions(options);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>options[METIS_OPTION_PTYPE]<sp/>=<sp/>METIS_PTYPE_KWAY;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>options[METIS_OPTION_OBJTYPE]<sp/>=<sp/>METIS_OBJTYPE_CUT;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>options[METIS_OPTION_NUMBERING]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//options[METIS_OPTION_DBGLVL]<sp/>=<sp/>METIS_DBG_INFO<sp/>|<sp/>METIS_DBG_MEMORY<sp/>|<sp/>METIS_DBG_COARSEN;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>options[METIS_OPTION_DBGLVL]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncon<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>K<sp/>defines<sp/>the<sp/>size<sp/>of<sp/>the<sp/>parition,<sp/>while<sp/>k<sp/>is<sp/>the<sp/>number<sp/>of<sp/>cuts<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>partitioner<sp/>will<sp/>have<sp/>to<sp/>do,<sp/>so<sp/>we<sp/>can<sp/>calculate<sp/>k<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dividing<sp/>P/K</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nparts<sp/>=<sp/>numvertices<sp/>&gt;<sp/><ref refid="classlayouter_1_1_divide_and_conquer_layouter_1a1e6be75adc37970062e3a82c723c3e36" kindref="member">numCuts</ref><sp/>?<sp/>numvertices<sp/>/<sp/><ref refid="classlayouter_1_1_divide_and_conquer_layouter_1a1e6be75adc37970062e3a82c723c3e36" kindref="member">numCuts</ref><sp/>:<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>-<sp/>1<sp/>&lt;<sp/>numCuts<sp/>?<sp/>numvertices<sp/>-<sp/>1<sp/>:<sp/>numCuts;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nparts<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>nparts<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edgecut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*part<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>malloc(1<sp/>*<sp/>numvertices<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(numvertices));</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>METIS_PartGraphKway(&amp;numvertices,<sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>Vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ncon,<sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>balancing<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.<ref refid="structadj__t_1af5917a4cb4dfb8c0cd26ee8f829d6866" kindref="member">xadj</ref>,</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.<ref refid="structadj__t_1a9d503ee08f20f0191c7c5f526cf5e8ea" kindref="member">adjncy</ref>,</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>vertices<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>vertices<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.<ref refid="structadj__t_1ae77150a33320b0febfb36cb2b877386b" kindref="member">adjwgt</ref>,<sp/></highlight><highlight class="comment">//<sp/>edege<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;nparts,<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>parts<sp/>to<sp/>partition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>targeted<sp/>partition<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>ubvec,<sp/>load<sp/>imbalance<sp/>bla<sp/>bla</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options,</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;edgecut,</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part);<sp/></highlight><highlight class="comment">//<sp/>result<sp/>parts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/>METIS_OK)<sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>nparts<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Based<sp/>on<sp/>the<sp/>partitions<sp/>of<sp/>the<sp/>graph,<sp/>we<sp/>can<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>the<sp/>subsets<sp/>to<sp/>new<sp/>subsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;set_subset_t&gt;<sp/>&gt;<sp/>candidatePartitions(nparts);<sp/></highlight><highlight class="comment">//<sp/>Create<sp/>at<sp/>least<sp/>nparts<sp/>buckets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numvertices;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current<sp/>=<sp/>part[i];</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelayouter_1aec12d8e69cf2bd6fc00d80094a3a0fd0" kindref="member">set_subset_t</ref><sp/>oldsubset<sp/>=<sp/><ref refid="namespacelayouter_1aec12d8e69cf2bd6fc00d80094a3a0fd0" kindref="member">set_subset_t</ref>(<ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[i].begin(),<sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>[i].end());</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>subsets<sp/>over</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>candidatePartitions[current].push_back(oldsubset);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>result<sp/>may<sp/>contain<sp/>empty<sp/>partitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>candidatePartitions;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Graph<sp/>Partitioning<sp/>Seriously<sp/>Failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384" refid="classlayouter_1_1_divide_and_conquer_layouter_1a8977ced6f6b9cec2ce32bc155fdd8e77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlayouter_1_1_divide_and_conquer_layouter_1a8977ced6f6b9cec2ce32bc155fdd8e77" kindref="member">DivideAndConquerLayouter::layout</ref>(<ref refid="classlayouter_1_1_schema" kindref="compound">Schema</ref><sp/>s,<sp/>std::string<sp/>cm)<sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.clear();</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.clear();</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="classlayouter_1_1_schema_1a2aea30a3e87f6045a38fcfcc8720952a" kindref="member">queries</ref>.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_candidate_layouter_1af28114f3cd74d47b40ecdd0f06aadc15" kindref="member">CandidateLayouter::layout</ref>(s,<sp/>cm);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref><sp/>=<sp/>std::vector&lt;std::set&lt;unsigned&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1add31da0cb128c19ccd33d08b2b876a07" kindref="member">schema</ref><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1af8584fae815274d94e7c86766abb8b01" kindref="member">costModel</ref><sp/>=<sp/>cm;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>part<sp/>where<sp/>the<sp/>relevant<sp/>subsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_candidate_layouter_1ab59af9130dfba12e39f36a1d68c2717c" kindref="member">generateCandidateList</ref>();</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.clear();</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(std::set&lt;unsigned&gt;<sp/>l,<sp/><ref refid="classlayouter_1_1_candidate_layouter_1acc320f5cf0b1c9f41fee1e0e66ca8349" kindref="member">_candidateList</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.push_back(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref>(l.begin(),<sp/>l.end()));</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix&lt;int&gt;</ref><sp/>m<sp/>=<sp/><ref refid="classlayouter_1_1_divide_and_conquer_layouter_1a375e91a1216c374c34ca6d195cc5d921" kindref="member">createAffinityMatrix</ref>();</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>result<sp/>of<sp/>the<sp/>partitioning<sp/>operation<sp/>is<sp/>a<sp/>list<sp/>of<sp/>parition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lists<sp/>that<sp/>are<sp/>layouted<sp/>independently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;set_subset_t&gt;<sp/>&gt;<sp/>partitions<sp/>=<sp/><ref refid="classlayouter_1_1_divide_and_conquer_layouter_1a08d8edff7952c22c65281d271137b581" kindref="member">partitionGraph</ref>(m);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>partitions<sp/>variable<sp/>holds<sp/>a<sp/>list<sp/>of<sp/>subset<sp/>lists,<sp/>which<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//layouted<sp/>individually.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref>.clear();</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbAtt<sp/>=<sp/>schema.nbAttributes;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/>std::vector&lt;subset_t&gt;<sp/>global;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(std::vector&lt;set_subset_t&gt;<sp/>tmp,<sp/>partitions)<sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>empty<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;subset_t&gt;<sp/>permutations<sp/>=<sp/><ref refid="classlayouter_1_1_candidate_layouter_1a467445f4ad85a20c8e62bfd7bfb2f2f2" kindref="member">externalCombineCandidates</ref>(tmp);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;unsigned&gt;<sp/>current;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>t<sp/>:<sp/>permutations)</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>u:<sp/>t)</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current.insert(u);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>schema.nbAttributes<sp/>=<sp/>current.size();</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref><sp/>=<sp/>permutations;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.clear();</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1aa7efefed6cf84ffb1dae1cb4eb783a18" kindref="member">iterateThroughLayouts</ref>();</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(<ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.begin(),<sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.end());</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_result" kindref="compound">Result</ref><sp/>r<sp/>=<sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>[0];</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlayouter_1_1_layout" kindref="compound">Layout</ref><sp/>l<sp/>=<sp/>r.layout;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacelayouter_1a9779582085930cc6fb80f4f2b27dfd9e" kindref="member">subset_t</ref><sp/>t<sp/>:<sp/>l.<ref refid="classlayouter_1_1_layout_1a1072a36ac9df7b58746bde578da18713" kindref="member">raw</ref>())</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>global<sp/>+=<sp/>t;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>schema.nbAttributes<sp/>=<sp/>nbAtt;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1ad52e710aa81331ff2c1a2caddde0f2de" kindref="member">subsets</ref><sp/>=<sp/>global;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Finish<sp/>the<sp/>job<sp/>and<sp/>search<sp/>for<sp/>the<sp/>perfect<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><ref refid="classlayouter_1_1_base_layouter_1aa7efefed6cf84ffb1dae1cb4eb783a18" kindref="member">iterateThroughLayouts</ref>();</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/>std::sort(<ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.begin(),<sp/><ref refid="classlayouter_1_1_base_layouter_1a0655d7dff96b8eff715a053b1e46737b" kindref="member">results</ref>.end());</highlight></codeline>
<codeline lineno="1451"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/vagrant/lanice/src/lib/layouter/base.cpp"/>
  </compounddef>
</doxygen>
