<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="pred___compound_expression_8h" kind="file">
    <compoundname>pred_CompoundExpression.h</compoundname>
    <includes refid="pred__common_8h" local="yes">pred_common.h</includes>
    <includedby refid="predicates_8h" local="yes">src/lib/access/expressions/predicates.h</includedby>
    <includedby refid="pred___predicate_builder_8h" local="yes">src/lib/access/expressions/pred_PredicateBuilder.h</includedby>
    <incdepgraph>
      <node id="3360">
        <label>atomic</label>
      </node>
      <node id="3352">
        <label>limits</label>
      </node>
      <node id="3371">
        <label>assert.h</label>
      </node>
      <node id="3369">
        <label>storage/ValueIdMap.hpp</label>
        <link refid="_value_id_map_8hpp"/>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3373" relation="include">
        </childnode>
      </node>
      <node id="3363">
        <label>storage/AbstractResource.h</label>
        <link refid="_abstract_resource_8h"/>
      </node>
      <node id="3368">
        <label>boost/iterator/iterator_facade.hpp</label>
      </node>
      <node id="3350">
        <label>cstdint</label>
      </node>
      <node id="3357">
        <label>storage/AbstractTable.h</label>
        <link refid="_abstract_table_8h"/>
        <childnode refid="3352" relation="include">
        </childnode>
        <childnode refid="3353" relation="include">
        </childnode>
        <childnode refid="3347" relation="include">
        </childnode>
        <childnode refid="3346" relation="include">
        </childnode>
        <childnode refid="3351" relation="include">
        </childnode>
        <childnode refid="3349" relation="include">
        </childnode>
        <childnode refid="3358" relation="include">
        </childnode>
        <childnode refid="3361" relation="include">
        </childnode>
        <childnode refid="3363" relation="include">
        </childnode>
        <childnode refid="3364" relation="include">
        </childnode>
        <childnode refid="3354" relation="include">
        </childnode>
      </node>
      <node id="3355">
        <label>stdint.h</label>
      </node>
      <node id="3349">
        <label>helper/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3350" relation="include">
        </childnode>
        <childnode refid="3351" relation="include">
        </childnode>
        <childnode refid="3352" relation="include">
        </childnode>
        <childnode refid="3353" relation="include">
        </childnode>
        <childnode refid="3346" relation="include">
        </childnode>
      </node>
      <node id="3361">
        <label>helper/unique_id.h</label>
        <link refid="unique__id_8h"/>
        <childnode refid="3350" relation="include">
        </childnode>
        <childnode refid="3362" relation="include">
        </childnode>
      </node>
      <node id="3347">
        <label>stdexcept</label>
      </node>
      <node id="3351">
        <label>string</label>
      </node>
      <node id="3379">
        <label>join_predicates.h</label>
        <link refid="join__predicates_8h"/>
        <childnode refid="3349" relation="include">
        </childnode>
        <childnode refid="3377" relation="include">
        </childnode>
      </node>
      <node id="3375">
        <label>map</label>
      </node>
      <node id="3374">
        <label>exception</label>
      </node>
      <node id="3356">
        <label>ostream</label>
      </node>
      <node id="3378">
        <label>json.h</label>
      </node>
      <node id="3376">
        <label>limits.h</label>
      </node>
      <node id="3367">
        <label>storage/BaseIterator.h</label>
        <link refid="_base_iterator_8h"/>
      </node>
      <node id="3345">
        <label>pred_common.h</label>
        <link refid="pred__common_8h"/>
        <childnode refid="3346" relation="include">
        </childnode>
        <childnode refid="3347" relation="include">
        </childnode>
        <childnode refid="3348" relation="include">
        </childnode>
        <childnode refid="3349" relation="include">
        </childnode>
        <childnode refid="3354" relation="include">
        </childnode>
        <childnode refid="3357" relation="include">
        </childnode>
        <childnode refid="3369" relation="include">
        </childnode>
        <childnode refid="3377" relation="include">
        </childnode>
        <childnode refid="3379" relation="include">
        </childnode>
        <childnode refid="3380" relation="include">
        </childnode>
        <childnode refid="3382" relation="include">
        </childnode>
      </node>
      <node id="3373">
        <label>storage/OrderIndifferentDictionary.h</label>
        <link refid="_order_indifferent_dictionary_8h"/>
        <childnode refid="3374" relation="include">
        </childnode>
        <childnode refid="3346" relation="include">
        </childnode>
        <childnode refid="3375" relation="include">
        </childnode>
        <childnode refid="3353" relation="include">
        </childnode>
        <childnode refid="3376" relation="include">
        </childnode>
        <childnode refid="3354" relation="include">
        </childnode>
        <childnode refid="3364" relation="include">
        </childnode>
        <childnode refid="3366" relation="include">
        </childnode>
      </node>
      <node id="3346">
        <label>vector</label>
      </node>
      <node id="3362">
        <label>array</label>
      </node>
      <node id="3377">
        <label>expression_types.h</label>
        <link refid="expression__types_8h"/>
        <childnode refid="3375" relation="include">
        </childnode>
        <childnode refid="3351" relation="include">
        </childnode>
        <childnode refid="3378" relation="include">
        </childnode>
      </node>
      <node id="3380">
        <label>pred_SimpleExpression.h</label>
        <link refid="pred___simple_expression_8h"/>
        <childnode refid="3354" relation="include">
        </childnode>
        <childnode refid="3349" relation="include">
        </childnode>
        <childnode refid="3381" relation="include">
        </childnode>
      </node>
      <node id="3358">
        <label>helper/locking.h</label>
        <link refid="locking_8h"/>
        <childnode refid="3359" relation="include">
        </childnode>
        <childnode refid="3360" relation="include">
        </childnode>
      </node>
      <node id="3372">
        <label>iostream</label>
      </node>
      <node id="3344">
        <label>src/lib/access/expressions/pred_CompoundExpression.h</label>
        <link refid="pred_CompoundExpression.h"/>
        <childnode refid="3345" relation="include">
        </childnode>
      </node>
      <node id="3354">
        <label>storage/storage_types.h</label>
        <link refid="storage__types_8h"/>
        <childnode refid="3346" relation="include">
        </childnode>
        <childnode refid="3351" relation="include">
        </childnode>
        <childnode refid="3347" relation="include">
        </childnode>
        <childnode refid="3355" relation="include">
        </childnode>
        <childnode refid="3356" relation="include">
        </childnode>
      </node>
      <node id="3382">
        <label>pred_SimpleFieldExpression.h</label>
        <link refid="pred___simple_field_expression_8h"/>
        <childnode refid="3349" relation="include">
        </childnode>
        <childnode refid="3345" relation="include">
        </childnode>
      </node>
      <node id="3365">
        <label>storage/AbstractDictionary.h</label>
        <link refid="_abstract_dictionary_8h"/>
        <childnode refid="3346" relation="include">
        </childnode>
        <childnode refid="3351" relation="include">
        </childnode>
        <childnode refid="3353" relation="include">
        </childnode>
        <childnode refid="3354" relation="include">
        </childnode>
      </node>
      <node id="3359">
        <label>thread</label>
      </node>
      <node id="3366">
        <label>storage/DictionaryIterator.h</label>
        <link refid="_dictionary_iterator_8h"/>
        <childnode refid="3367" relation="include">
        </childnode>
        <childnode refid="3368" relation="include">
        </childnode>
      </node>
      <node id="3381">
        <label>access/expressions/AbstractExpression.h</label>
        <link refid="_abstract_expression_8h"/>
        <childnode refid="3346" relation="include">
        </childnode>
        <childnode refid="3349" relation="include">
        </childnode>
      </node>
      <node id="3370">
        <label>storage/OrderPreservingDictionary.h</label>
        <link refid="_order_preserving_dictionary_8h"/>
        <childnode refid="3371" relation="include">
        </childnode>
        <childnode refid="3372" relation="include">
        </childnode>
        <childnode refid="3353" relation="include">
        </childnode>
        <childnode refid="3364" relation="include">
        </childnode>
        <childnode refid="3367" relation="include">
        </childnode>
        <childnode refid="3366" relation="include">
        </childnode>
        <childnode refid="3354" relation="include">
        </childnode>
      </node>
      <node id="3348">
        <label>stdio.h</label>
      </node>
      <node id="3353">
        <label>memory</label>
      </node>
      <node id="3364">
        <label>storage/BaseDictionary.h</label>
        <link refid="_base_dictionary_8h"/>
        <childnode refid="3354" relation="include">
        </childnode>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3366" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3395">
        <label>src/bin/perf_regression/SimpleTableScan.cpp</label>
        <link refid="bin_2perf__regression_2_simple_table_scan_8cpp"/>
      </node>
      <node id="3390">
        <label>src/bin/perf_regression/GroupByScan.cpp</label>
        <link refid="bin_2perf__regression_2_group_by_scan_8cpp"/>
      </node>
      <node id="3387">
        <label>src/lib/access/JoinScan.h</label>
        <link refid="_join_scan_8h"/>
        <childnode refid="3388" relation="include">
        </childnode>
        <childnode refid="3389" relation="include">
        </childnode>
      </node>
      <node id="3389">
        <label>src/lib/access.h</label>
        <link refid="access_8h"/>
        <childnode refid="3390" relation="include">
        </childnode>
        <childnode refid="3391" relation="include">
        </childnode>
        <childnode refid="3392" relation="include">
        </childnode>
        <childnode refid="3393" relation="include">
        </childnode>
        <childnode refid="3394" relation="include">
        </childnode>
        <childnode refid="3395" relation="include">
        </childnode>
        <childnode refid="3396" relation="include">
        </childnode>
        <childnode refid="3397" relation="include">
        </childnode>
      </node>
      <node id="3393">
        <label>src/bin/perf_regression/JoinScan.cpp</label>
        <link refid="bin_2perf__regression_2_join_scan_8cpp"/>
      </node>
      <node id="3384">
        <label>src/lib/access/expressions/predicates.h</label>
        <link refid="predicates_8h"/>
        <childnode refid="3385" relation="include">
        </childnode>
        <childnode refid="3386" relation="include">
        </childnode>
        <childnode refid="3387" relation="include">
        </childnode>
        <childnode refid="3398" relation="include">
        </childnode>
        <childnode refid="3389" relation="include">
        </childnode>
      </node>
      <node id="3396">
        <label>src/bin/perf_regression/SortScan.cpp</label>
        <link refid="bin_2perf__regression_2_sort_scan_8cpp"/>
      </node>
      <node id="3394">
        <label>src/bin/perf_regression/ProjectionScan.cpp</label>
        <link refid="bin_2perf__regression_2_projection_scan_8cpp"/>
      </node>
      <node id="3391">
        <label>src/bin/perf_regression/HashJoin.cpp</label>
        <link refid="_hash_join_8cpp"/>
      </node>
      <node id="3386">
        <label>src/lib/access/expressions/pred_expression_factory.h</label>
        <link refid="pred__expression__factory_8h"/>
        <childnode refid="3384" relation="include">
        </childnode>
        <childnode refid="3385" relation="include">
        </childnode>
      </node>
      <node id="3399">
        <label>src/lib/access/expressions/pred_PredicateBuilder.h</label>
        <link refid="pred___predicate_builder_8h"/>
        <childnode refid="3384" relation="include">
        </childnode>
        <childnode refid="3400" relation="include">
        </childnode>
      </node>
      <node id="3385">
        <label>src/lib/access/expressions/pred_buildExpression.cpp</label>
        <link refid="pred__build_expression_8cpp"/>
      </node>
      <node id="3388">
        <label>src/lib/access/JoinScan.cpp</label>
        <link refid="lib_2access_2_join_scan_8cpp"/>
      </node>
      <node id="3392">
        <label>src/bin/perf_regression/HashValueJoin.cpp</label>
        <link refid="_hash_value_join_8cpp"/>
      </node>
      <node id="3383">
        <label>src/lib/access/expressions/pred_CompoundExpression.h</label>
        <link refid="pred_CompoundExpression.h"/>
        <childnode refid="3384" relation="include">
        </childnode>
        <childnode refid="3399" relation="include">
        </childnode>
      </node>
      <node id="3397">
        <label>src/bin/perf_regression/UnionScan.cpp</label>
        <link refid="bin_2perf__regression_2_union_scan_8cpp"/>
      </node>
      <node id="3398">
        <label>src/lib/access/MergeJoin.hpp</label>
        <link refid="_merge_join_8hpp"/>
        <childnode refid="3389" relation="include">
        </childnode>
      </node>
      <node id="3400">
        <label>src/lib/access/expressions/pred_PredicateBuilder.cpp</label>
        <link refid="pred___predicate_builder_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_compound_expression" prot="public">CompoundExpression</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SRC_LIB_ACCESS_PRED_COMPOUNDEXPRESSION_H_</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SRC_LIB_ACCESS_PRED_COMPOUNDEXPRESSION_H_</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pred__common_8h" kindref="compound">pred_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="class_compound_expression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_compound_expression" kindref="compound">CompoundExpression</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_simple_expression" kindref="compound">SimpleExpression</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="class_compound_expression_1a7f95e8dfc5a3557b1c7e4b95ffbc7883" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720" kindref="member">ExpressionType</ref><sp/><ref refid="class_compound_expression_1a7f95e8dfc5a3557b1c7e4b95ffbc7883" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="class_compound_expression_1a07c2797f040ad44c1db2e0005f6e0df3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_simple_expression" kindref="compound">SimpleExpression</ref><sp/>*<ref refid="class_compound_expression_1a07c2797f040ad44c1db2e0005f6e0df3" kindref="member">lhs</ref>;</highlight></codeline>
<codeline lineno="15" refid="class_compound_expression_1acf6d7cf98e83dbff144eb6c497d34383" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_simple_expression" kindref="compound">SimpleExpression</ref><sp/>*<ref refid="class_compound_expression_1acf6d7cf98e83dbff144eb6c497d34383" kindref="member">rhs</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>compound<sp/>expression<sp/>only<sp/>has<sp/>one<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="class_compound_expression_1aeec560e352fd26d723c504f97b8f07fd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_compound_expression_1aeec560e352fd26d723c504f97b8f07fd" kindref="member">one_leg</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="class_compound_expression_1aa5a3c08d9d4590deb1d7ae49be1b33b8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_compound_expression_1aa5a3c08d9d4590deb1d7ae49be1b33b8" kindref="member">CompoundExpression</ref>(<ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720" kindref="member">ExpressionType</ref><sp/>t):</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_compound_expression_1a7f95e8dfc5a3557b1c7e4b95ffbc7883" kindref="member">type</ref>(t),<sp/><ref refid="class_compound_expression_1a07c2797f040ad44c1db2e0005f6e0df3" kindref="member">lhs</ref>(<ref refid="csb__tree_8cpp_1ab979d9d4b4923f7c54d6caa6e1a61936" kindref="member">nullptr</ref>),<sp/><ref refid="class_compound_expression_1acf6d7cf98e83dbff144eb6c497d34383" kindref="member">rhs</ref>(NULL),<sp/><ref refid="class_compound_expression_1aeec560e352fd26d723c504f97b8f07fd" kindref="member">one_leg</ref>(t<sp/>==<sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a0378ebc895849163b249d0b330257dd6" kindref="member">NOT</ref>)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="class_compound_expression_1a35a79e6a8d5cb39c98c19065ea0eaf57" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_compound_expression_1a35a79e6a8d5cb39c98c19065ea0eaf57" kindref="member">CompoundExpression</ref>(<ref refid="class_simple_expression" kindref="compound">SimpleExpression</ref><sp/>*_lhs,<sp/><ref refid="class_simple_expression" kindref="compound">SimpleExpression</ref><sp/>*_rhs,<sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720" kindref="member">ExpressionType</ref><sp/>_type)<sp/>:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_simple_expression" kindref="compound">SimpleExpression</ref>(),<sp/><ref refid="class_compound_expression_1a7f95e8dfc5a3557b1c7e4b95ffbc7883" kindref="member">type</ref>(_type),<sp/><ref refid="class_compound_expression_1a07c2797f040ad44c1db2e0005f6e0df3" kindref="member">lhs</ref>(_lhs),<sp/><ref refid="class_compound_expression_1acf6d7cf98e83dbff144eb6c497d34383" kindref="member">rhs</ref>(_rhs),<sp/><ref refid="class_compound_expression_1aeec560e352fd26d723c504f97b8f07fd" kindref="member">one_leg</ref>(_type<sp/>==<sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a0378ebc895849163b249d0b330257dd6" kindref="member">NOT</ref>)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="class_compound_expression_1afbcdcf8497e12d6a055ca68699162ac1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_compound_expression_1afbcdcf8497e12d6a055ca68699162ac1" kindref="member">~CompoundExpression</ref>()<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_compound_expression_1a07c2797f040ad44c1db2e0005f6e0df3" kindref="member">lhs</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_compound_expression_1aeec560e352fd26d723c504f97b8f07fd" kindref="member">one_leg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_compound_expression_1acf6d7cf98e83dbff144eb6c497d34383" kindref="member">rhs</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="class_compound_expression_1a0f5f6b8d94d03b6f10cdfebdfef44801" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_compound_expression_1a0f5f6b8d94d03b6f10cdfebdfef44801" kindref="member">walk</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;hyrise::storage::c_atable_ptr_t<sp/>&gt;<sp/>&amp;l)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_compound_expression_1a07c2797f040ad44c1db2e0005f6e0df3" kindref="member">lhs</ref>-&gt;<ref refid="class_simple_expression_1a059a1058d13c3e746d645404544c586c" kindref="member">walk</ref>(l);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_compound_expression_1aeec560e352fd26d723c504f97b8f07fd" kindref="member">one_leg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_compound_expression_1acf6d7cf98e83dbff144eb6c497d34383" kindref="member">rhs</ref>-&gt;<ref refid="class_simple_expression_1a059a1058d13c3e746d645404544c586c" kindref="member">walk</ref>(l);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="class_compound_expression_1a033ed9bf277aa174dfc4ef8892471961" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_compound_expression_1a033ed9bf277aa174dfc4ef8892471961" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="class_compound_expression_1a7f95e8dfc5a3557b1c7e4b95ffbc7883" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a865555c9f2e0458a7078486aa1b3254f" kindref="member">AND</ref>:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*<ref refid="class_compound_expression_1a07c2797f040ad44c1db2e0005f6e0df3" kindref="member">lhs</ref>)(row)<sp/>&amp;&amp;<sp/>(*<ref refid="class_compound_expression_1acf6d7cf98e83dbff144eb6c497d34383" kindref="member">rhs</ref>)(row);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a96727447c0ad447987df1c6415aef074" kindref="member">OR</ref>:</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*<ref refid="class_compound_expression_1a07c2797f040ad44c1db2e0005f6e0df3" kindref="member">lhs</ref>)(row)<sp/>||<sp/>(*<ref refid="class_compound_expression_1acf6d7cf98e83dbff144eb6c497d34383" kindref="member">rhs</ref>)(row);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a0378ebc895849163b249d0b330257dd6" kindref="member">NOT</ref>:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*lhs)(row);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>Expression<sp/>Type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="class_compound_expression_1a7eef48e2ab07218592008d8e37450b9f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_compound_expression_1a7eef48e2ab07218592008d8e37450b9f" kindref="member">add</ref>(<ref refid="class_simple_expression" kindref="compound">SimpleExpression</ref><sp/>*e)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_compound_expression_1a07c2797f040ad44c1db2e0005f6e0df3" kindref="member">lhs</ref>)<sp/><ref refid="class_compound_expression_1a07c2797f040ad44c1db2e0005f6e0df3" kindref="member">lhs</ref><sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_compound_expression_1acf6d7cf98e83dbff144eb6c497d34383" kindref="member">rhs</ref>)<sp/><ref refid="class_compound_expression_1acf6d7cf98e83dbff144eb6c497d34383" kindref="member">rhs</ref><sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;full&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="class_compound_expression_1a1f7c60a769af6648ef765e14f183425c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_compound_expression_1a1f7c60a769af6648ef765e14f183425c" kindref="member">isSetup</ref>()<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="class_compound_expression_1aeec560e352fd26d723c504f97b8f07fd" kindref="member">one_leg</ref>)<sp/>&amp;&amp;<sp/>(<ref refid="class_compound_expression_1a07c2797f040ad44c1db2e0005f6e0df3" kindref="member">lhs</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/>||<sp/>((<ref refid="class_compound_expression_1acf6d7cf98e83dbff144eb6c497d34383" kindref="member">rhs</ref><sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(<ref refid="class_compound_expression_1a07c2797f040ad44c1db2e0005f6e0df3" kindref="member">lhs</ref><sp/>!=<sp/>NULL));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal">};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>SRC_LIB_ACCESS_PRED_COMPOUNDEXPRESSION_H_</highlight></codeline>
    </programlisting>
    <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/pred_CompoundExpression.h"/>
  </compounddef>
</doxygen>
