<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="class_simple_expression" kind="class" prot="public" abstract="yes">
    <compoundname>SimpleExpression</compoundname>
    <basecompoundref refid="classhyrise_1_1access_1_1_abstract_expression" prot="public" virt="non-virtual">hyrise::access::AbstractExpression</basecompoundref>
    <derivedcompoundref refid="class_compound_expression" prot="public" virt="non-virtual">CompoundExpression</derivedcompoundref>
    <derivedcompoundref refid="class_simple_field_expression" prot="public" virt="non-virtual">SimpleFieldExpression</derivedcompoundref>
    <includes refid="pred___simple_expression_8h" local="no">pred_SimpleExpression.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_simple_expression_1a059a1058d13c3e746d645404544c586c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SimpleExpression::walk</definition>
        <argsstring>(const std::vector&lt; hyrise::storage::c_atable_ptr_t &gt; &amp;l)=0</argsstring>
        <name>walk</name>
        <reimplementedby refid="class_less_than_expression_1ad7e656f6a6272c302fc9c484c5aca3cc">walk</reimplementedby>
        <reimplementedby refid="class_greater_than_expression_1a9288a457243cdcb1c21471ad183fd884">walk</reimplementedby>
        <reimplementedby refid="class_between_expression_1aa484acc9f9d0a8e95d4a23118f6199b9">walk</reimplementedby>
        <reimplementedby refid="class_simple_field_expression_1a2b9be48219459a784de03b6298b56966">walk</reimplementedby>
        <reimplementedby refid="class_equals_expression_1a9c70374044137e9f4b9756ec3c14052b">walk</reimplementedby>
        <reimplementedby refid="class_compound_expression_1a0f5f6b8d94d03b6f10cdfebdfef44801">walk</reimplementedby>
        <param>
          <type>const std::vector&lt; <ref refid="namespacehyrise_1_1storage_1a1c9f919a7a3f09a8b304a98f1ebad3ee" kindref="member">hyrise::storage::c_atable_ptr_t</ref> &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/pred_SimpleExpression.h" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_expression_1ae06428047fe77732ef121f42b1ee6ce2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="storage__types_8h_1a543d59ef56384af4a7af9aa551bc6825" kindref="member">pos_list_t</ref> *</type>
        <definition>virtual pos_list_t* SimpleExpression::match</definition>
        <argsstring>(const size_t start, const size_t stop)</argsstring>
        <name>match</name>
        <reimplements refid="classhyrise_1_1access_1_1_abstract_expression_1a5d1aba6a95938962ab0af27e088e564b">match</reimplements>
        <param>
          <type>const size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/pred_SimpleExpression.h" line="13" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/pred_SimpleExpression.h" bodystart="13" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_simple_expression_1a0910401328b20cde7ea3493a02a957cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SimpleExpression::operator()</definition>
        <argsstring>(size_t row)</argsstring>
        <name>operator()</name>
        <reimplementedby refid="class_less_than_expression_1aaf0bb475ae01bae2adc386fda3d4db1d">operator()</reimplementedby>
        <reimplementedby refid="class_greater_than_expression_1a5cacbced8505c768a7966ef1c44fc5ed">operator()</reimplementedby>
        <reimplementedby refid="class_compound_expression_1a033ed9bf277aa174dfc4ef8892471961">operator()</reimplementedby>
        <reimplementedby refid="class_simple_field_expression_1adcbedd75f7652d48f58256eefe09c5fe">operator()</reimplementedby>
        <reimplementedby refid="class_equals_expression_1a725c4448ce2207ddb3b23b2758275b4d">operator()</reimplementedby>
        <reimplementedby refid="class_between_expression_1a019dfe62d452a2c3a0bb8f2e808d661f">operator()</reimplementedby>
        <reimplementedby refid="class_less_than_expression_raw_1a756ec8043c3ea7ba98d78520621ae6da">operator()</reimplementedby>
        <reimplementedby refid="class_generic_expression_value_1a24beb6d5ef91339f895bd24d207243b6">operator()</reimplementedby>
        <reimplementedby refid="class_equals_expression_raw_1a6370cbdc46ba91ff0bc368d43f88b777">operator()</reimplementedby>
        <reimplementedby refid="class_greater_than_expression_raw_1a1db3bba718f23524414f9b2f79f92a7e">operator()</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/pred_SimpleExpression.h" line="23" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/pred_SimpleExpression.h" bodystart="23" bodyend="25"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3334">
        <label>EqualsExpressionRaw&lt; T &gt;</label>
        <link refid="class_equals_expression_raw"/>
        <childnode refid="3331" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3331">
        <label>SimpleFieldExpression</label>
        <link refid="class_simple_field_expression"/>
        <childnode refid="3328" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3336">
        <label>GreaterThanExpression&lt; T &gt;</label>
        <link refid="class_greater_than_expression"/>
        <childnode refid="3331" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3337">
        <label>GreaterThanExpressionRaw&lt; T &gt;</label>
        <link refid="class_greater_than_expression_raw"/>
        <childnode refid="3331" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3332">
        <label>BetweenExpression&lt; T &gt;</label>
        <link refid="class_between_expression"/>
        <childnode refid="3331" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3335">
        <label>GenericExpressionValue&lt; T, Op &gt;</label>
        <link refid="class_generic_expression_value"/>
        <childnode refid="3331" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3333">
        <label>EqualsExpression&lt; T &gt;</label>
        <link refid="class_equals_expression"/>
        <childnode refid="3331" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3328">
        <label>SimpleExpression</label>
        <link refid="class_simple_expression"/>
        <childnode refid="3329" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3329">
        <label>hyrise::access::AbstractExpression</label>
        <link refid="classhyrise_1_1access_1_1_abstract_expression"/>
      </node>
      <node id="3339">
        <label>LessThanExpressionRaw&lt; T &gt;</label>
        <link refid="class_less_than_expression_raw"/>
        <childnode refid="3331" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3338">
        <label>LessThanExpression&lt; T &gt;</label>
        <link refid="class_less_than_expression"/>
        <childnode refid="3331" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3330">
        <label>CompoundExpression</label>
        <link refid="class_compound_expression"/>
        <childnode refid="3328" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3340">
        <label>SimpleExpression</label>
        <link refid="class_simple_expression"/>
        <childnode refid="3341" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3341">
        <label>hyrise::access::AbstractExpression</label>
        <link refid="classhyrise_1_1access_1_1_abstract_expression"/>
      </node>
    </collaborationgraph>
    <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/pred_SimpleExpression.h" line="9" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/pred_SimpleExpression.h" bodystart="9" bodyend="26"/>
    <listofallmembers>
      <member refid="class_simple_expression_1ae06428047fe77732ef121f42b1ee6ce2" prot="public" virt="virtual"><scope>SimpleExpression</scope><name>match</name></member>
      <member refid="class_simple_expression_1a0910401328b20cde7ea3493a02a957cc" prot="public" virt="virtual"><scope>SimpleExpression</scope><name>operator()</name></member>
      <member refid="class_simple_expression_1a059a1058d13c3e746d645404544c586c" prot="public" virt="pure-virtual"><scope>SimpleExpression</scope><name>walk</name></member>
      <member refid="classhyrise_1_1access_1_1_abstract_expression_1aae15725c08628e3785e90f496b75144e" prot="public" virt="pure-virtual" ambiguityscope="hyrise::access::AbstractExpression::"><scope>SimpleExpression</scope><name>walk</name></member>
      <member refid="classhyrise_1_1access_1_1_abstract_expression_1ae0b45f17103a1dc5006832d243574d83" prot="public" virt="virtual"><scope>SimpleExpression</scope><name>~AbstractExpression</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
