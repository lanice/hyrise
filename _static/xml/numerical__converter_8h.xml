<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="numerical__converter_8h" kind="file">
    <compoundname>numerical_converter.h</compoundname>
    <includes local="yes">boost/optional.hpp</includes>
    <includedby refid="_request_parse_task_8cpp" local="yes">src/lib/access/system/RequestParseTask.cpp</includedby>
    <includedby refid="_transaction_route_handler_8cpp" local="yes">src/lib/io/TransactionRouteHandler.cpp</includedby>
    <incdepgraph>
      <node id="10883">
        <label>boost/optional.hpp</label>
      </node>
      <node id="10882">
        <label>src/lib/helper/numerical_converter.h</label>
        <link refid="numerical_converter.h"/>
        <childnode refid="10883" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="10886">
        <label>src/lib/io/TransactionRouteHandler.cpp</label>
        <link refid="_transaction_route_handler_8cpp"/>
      </node>
      <node id="10885">
        <label>src/lib/access/system/RequestParseTask.cpp</label>
        <link refid="_request_parse_task_8cpp"/>
      </node>
      <node id="10884">
        <label>src/lib/helper/numerical_converter.h</label>
        <link refid="numerical_converter.h"/>
        <childnode refid="10885" relation="include">
        </childnode>
        <childnode refid="10886" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structnumerical__detail_1_1converter" prot="public">numerical_detail::converter</innerclass>
    <innerclass refid="structnumerical__detail_1_1converter_3_01unsigned_01long_01_4" prot="public">numerical_detail::converter&lt; unsigned long &gt;</innerclass>
    <innerclass refid="structnumerical__detail_1_1converter_3_01unsigned_01long_01long_01_4" prot="public">numerical_detail::converter&lt; unsigned long long &gt;</innerclass>
    <innerclass refid="structnumerical__detail_1_1converter_3_01int_01_4" prot="public">numerical_detail::converter&lt; int &gt;</innerclass>
    <innerclass refid="structnumerical__detail_1_1converter_3_01long_01_4" prot="public">numerical_detail::converter&lt; long &gt;</innerclass>
    <innerclass refid="structnumerical__detail_1_1converter_3_01long_01long_01_4" prot="public">numerical_detail::converter&lt; long long &gt;</innerclass>
    <innernamespace refid="namespacenumerical__detail">numerical_detail</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="numerical__converter_8h_1a9240e25ebdcaefe7f29bbc288d9866e1" prot="public" static="no">
        <name>CONVERTER</name>
        <param><defname>TYPE</defname></param>
        <param><defname>FUNCTION</defname></param>
        <initializer>template &lt;&gt;                                                   \
  struct converter&lt;TYPE&gt; {                                      \
    static constexpr decltype(&amp;FUNCTION) func = &amp;FUNCTION;      \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/lanice/src/lib/helper/numerical_converter.h" line="15" bodyfile="/home/vagrant/lanice/src/lib/helper/numerical_converter.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="numerical__converter_8h_1a686f59c4719a81e2d6bd4c308cb045ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename toType</type>
          </param>
        </templateparamlist>
        <type>boost::optional&lt; toType &gt;</type>
        <definition>boost::optional&lt;toType&gt; parseNumeric</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>parseNumeric</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/vagrant/lanice/src/lib/helper/numerical_converter.h" line="29" bodyfile="/home/vagrant/lanice/src/lib/helper/numerical_converter.h" bodystart="29" bodyend="35"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>NUMERICAL_CONVERTER_H</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NUMERICAL_CONVERTER_H</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;boost/optional.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="namespacenumerical__detail" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">numerical_detail<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9" refid="structnumerical__detail_1_1converter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnumerical__detail_1_1converter" kindref="compound">converter</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="numerical__converter_8h_1a9240e25ebdcaefe7f29bbc288d9866e1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONVERTER(TYPE,<sp/>FUNCTION)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"><sp/><sp/>struct<sp/>converter&lt;TYPE&gt;<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>decltype(&amp;FUNCTION)<sp/>func<sp/>=<sp/>&amp;FUNCTION;<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="structnumerical__detail_1_1converter_3_01unsigned_01long_01_4_1ab83335bb7a92db8d81c40033d87dfc5f" refkind="member"><highlight class="normal"><ref refid="numerical__converter_8h_1a9240e25ebdcaefe7f29bbc288d9866e1" kindref="member">CONVERTER</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>std::strtoul);</highlight></codeline>
<codeline lineno="19" refid="structnumerical__detail_1_1converter_3_01unsigned_01long_01long_01_4_1a75e1b102f74642f3f134d62cc2657eb8" refkind="member"><highlight class="normal"><ref refid="numerical__converter_8h_1a9240e25ebdcaefe7f29bbc288d9866e1" kindref="member">CONVERTER</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>std::strtoull);</highlight></codeline>
<codeline lineno="20" refid="structnumerical__detail_1_1converter_3_01int_01_4_1a5ed84d46fe26aa948f1b3a87e51939a1" refkind="member"><highlight class="normal"><ref refid="numerical__converter_8h_1a9240e25ebdcaefe7f29bbc288d9866e1" kindref="member">CONVERTER</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::strtol);</highlight></codeline>
<codeline lineno="21" refid="structnumerical__detail_1_1converter_3_01long_01_4_1a5d2e2e872b94186801835ea967027571" refkind="member"><highlight class="normal"><ref refid="numerical__converter_8h_1a9240e25ebdcaefe7f29bbc288d9866e1" kindref="member">CONVERTER</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>std::strtol);</highlight></codeline>
<codeline lineno="22" refid="structnumerical__detail_1_1converter_3_01long_01long_01_4_1a2b908c5fe7fd692291ac1e64fcd3e4c6" refkind="member"><highlight class="normal"><ref refid="numerical__converter_8h_1a9240e25ebdcaefe7f29bbc288d9866e1" kindref="member">CONVERTER</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>std::strtoll);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CONVERTER</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>toType&gt;</highlight></codeline>
<codeline lineno="29" refid="numerical__converter_8h_1a686f59c4719a81e2d6bd4c308cb045ae" refkind="member"><highlight class="normal">boost::optional&lt;toType&gt;<sp/><ref refid="numerical__converter_8h_1a686f59c4719a81e2d6bd4c308cb045ae" kindref="member">parseNumeric</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>boost::optional&lt;toType&gt;<sp/>value;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>endptr;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>value<sp/>=<sp/><ref refid="structnumerical__detail_1_1converter" kindref="compound">numerical_detail::converter&lt;toType&gt;::func</ref>(s.c_str(),<sp/>&amp;endptr,<sp/>10);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;(*s.end())<sp/>!=<sp/>endptr)<sp/>{<sp/>value<sp/>=<sp/>boost::optional&lt;toType&gt;();<sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/vagrant/lanice/src/lib/helper/numerical_converter.h"/>
  </compounddef>
</doxygen>
