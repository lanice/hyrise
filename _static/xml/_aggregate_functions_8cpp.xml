<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="_aggregate_functions_8cpp" kind="file">
    <compoundname>AggregateFunctions.cpp</compoundname>
    <includes refid="_aggregate_functions_8h" local="yes">AggregateFunctions.h</includes>
    <includes refid="meta__storage_8h" local="no">storage/meta_storage.h</includes>
    <includes local="yes">json.h</includes>
    <incdepgraph>
      <node id="2241">
        <label>boost/mpl/size.hpp</label>
      </node>
      <node id="2219">
        <label>atomic</label>
      </node>
      <node id="2223">
        <label>storage/BaseDictionary.h</label>
        <link refid="_base_dictionary_8h"/>
        <childnode refid="2224" relation="include">
        </childnode>
        <childnode refid="2227" relation="include">
        </childnode>
        <childnode refid="2228" relation="include">
        </childnode>
      </node>
      <node id="2242">
        <label>boost/mpl/vector.hpp</label>
      </node>
      <node id="2235">
        <label>helper/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="2212" relation="include">
        </childnode>
        <childnode refid="2213" relation="include">
        </childnode>
      </node>
      <node id="2211">
        <label>limits</label>
      </node>
      <node id="2217">
        <label>helper/locking.h</label>
        <link refid="locking_8h"/>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
      </node>
      <node id="2230">
        <label>boost/iterator/iterator_facade.hpp</label>
      </node>
      <node id="2216">
        <label>cstdint</label>
      </node>
      <node id="2231">
        <label>storage/HashTable.h</label>
        <link refid="_hash_table_8h"/>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2232" relation="include">
        </childnode>
        <childnode refid="2233" relation="include">
        </childnode>
        <childnode refid="2212" relation="include">
        </childnode>
        <childnode refid="2234" relation="include">
        </childnode>
        <childnode refid="2215" relation="include">
        </childnode>
        <childnode refid="2235" relation="include">
        </childnode>
        <childnode refid="2236" relation="include">
        </childnode>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
      </node>
      <node id="2225">
        <label>stdint.h</label>
      </node>
      <node id="2213">
        <label>stdexcept</label>
      </node>
      <node id="2220">
        <label>helper/unique_id.h</label>
        <link refid="unique__id_8h"/>
        <childnode refid="2216" relation="include">
        </childnode>
        <childnode refid="2221" relation="include">
        </childnode>
      </node>
      <node id="2214">
        <label>string</label>
      </node>
      <node id="2239">
        <label>boost/mpl/at.hpp</label>
      </node>
      <node id="2208">
        <label>AggregateFunctions.h</label>
        <link refid="_aggregate_functions_8h"/>
        <childnode refid="2209" relation="include">
        </childnode>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2231" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
        <childnode refid="2237" relation="include">
        </childnode>
      </node>
      <node id="2226">
        <label>ostream</label>
      </node>
      <node id="2237">
        <label>json.h</label>
      </node>
      <node id="2236">
        <label>storage/AbstractHashTable.h</label>
        <link refid="_abstract_hash_table_8h"/>
        <childnode refid="2216" relation="include">
        </childnode>
        <childnode refid="2212" relation="include">
        </childnode>
        <childnode refid="2215" relation="include">
        </childnode>
        <childnode refid="2222" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
      </node>
      <node id="2224">
        <label>storage/storage_types.h</label>
        <link refid="storage__types_8h"/>
        <childnode refid="2209" relation="include">
        </childnode>
        <childnode refid="2214" relation="include">
        </childnode>
        <childnode refid="2213" relation="include">
        </childnode>
        <childnode refid="2225" relation="include">
        </childnode>
        <childnode refid="2226" relation="include">
        </childnode>
      </node>
      <node id="2228">
        <label>storage/DictionaryIterator.h</label>
        <link refid="_dictionary_iterator_8h"/>
        <childnode refid="2229" relation="include">
        </childnode>
        <childnode refid="2230" relation="include">
        </childnode>
      </node>
      <node id="2229">
        <label>storage/BaseIterator.h</label>
        <link refid="_base_iterator_8h"/>
      </node>
      <node id="2209">
        <label>vector</label>
      </node>
      <node id="2240">
        <label>boost/mpl/int.hpp</label>
      </node>
      <node id="2221">
        <label>array</label>
      </node>
      <node id="2234">
        <label>sstream</label>
      </node>
      <node id="2207">
        <label>src/lib/access/AggregateFunctions.cpp</label>
        <link refid="AggregateFunctions.cpp"/>
        <childnode refid="2208" relation="include">
        </childnode>
        <childnode refid="2238" relation="include">
        </childnode>
        <childnode refid="2237" relation="include">
        </childnode>
      </node>
      <node id="2233">
        <label>unordered_map</label>
      </node>
      <node id="2222">
        <label>storage/AbstractResource.h</label>
        <link refid="_abstract_resource_8h"/>
      </node>
      <node id="2227">
        <label>storage/AbstractDictionary.h</label>
        <link refid="_abstract_dictionary_8h"/>
        <childnode refid="2209" relation="include">
        </childnode>
        <childnode refid="2214" relation="include">
        </childnode>
        <childnode refid="2212" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
      </node>
      <node id="2210">
        <label>storage/AbstractTable.h</label>
        <link refid="_abstract_table_8h"/>
        <childnode refid="2211" relation="include">
        </childnode>
        <childnode refid="2212" relation="include">
        </childnode>
        <childnode refid="2213" relation="include">
        </childnode>
        <childnode refid="2209" relation="include">
        </childnode>
        <childnode refid="2214" relation="include">
        </childnode>
        <childnode refid="2215" relation="include">
        </childnode>
        <childnode refid="2217" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
        <childnode refid="2222" relation="include">
        </childnode>
        <childnode refid="2223" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
      </node>
      <node id="2218">
        <label>thread</label>
      </node>
      <node id="2215">
        <label>helper/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="2216" relation="include">
        </childnode>
        <childnode refid="2214" relation="include">
        </childnode>
        <childnode refid="2211" relation="include">
        </childnode>
        <childnode refid="2212" relation="include">
        </childnode>
        <childnode refid="2209" relation="include">
        </childnode>
      </node>
      <node id="2232">
        <label>set</label>
      </node>
      <node id="2238">
        <label>storage/meta_storage.h</label>
        <link refid="meta__storage_8h"/>
        <childnode refid="2213" relation="include">
        </childnode>
        <childnode refid="2239" relation="include">
        </childnode>
        <childnode refid="2240" relation="include">
        </childnode>
        <childnode refid="2241" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
        <childnode refid="2242" relation="include">
        </childnode>
      </node>
      <node id="2212">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="structhyrise_1_1storage_1_1sum__aggregate__functor" prot="public">hyrise::storage::sum_aggregate_functor</innerclass>
    <innerclass refid="structhyrise_1_1storage_1_1average__aggregate__functor" prot="public">hyrise::storage::average_aggregate_functor</innerclass>
    <innernamespace refid="namespacehyrise">hyrise</innernamespace>
    <innernamespace refid="namespacehyrise_1_1storage">hyrise::storage</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="_aggregate_functions_8cpp_1a1e1d99ef87b707e40ef25e75f72d4993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_aggregate_functions_8h_1a3b9157a78fd1faef0b152a06f7e11116" kindref="member">aggregateFunctionMap_t</ref></type>
        <definition>aggregateFunctionMap_t getAggregateFunctionMap</definition>
        <argsstring>()</argsstring>
        <name>getAggregateFunctionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/access/AggregateFunctions.cpp" line="95" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/access/AggregateFunctions.cpp" bodystart="95" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="_aggregate_functions_8cpp_1a4358b781d3aaff7b214b794be22a89d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_aggregate_fun" kindref="compound">AggregateFun</ref> *</type>
        <definition>AggregateFun* parseAggregateFunction</definition>
        <argsstring>(const Json::Value &amp;data)</argsstring>
        <name>parseAggregateFunction</name>
        <param>
          <type>const Json::Value &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/access/AggregateFunctions.cpp" line="103" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/access/AggregateFunctions.cpp" bodystart="103" bodyend="120"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_aggregate_functions_8h" kindref="compound">AggregateFunctions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="meta__storage_8h" kindref="compound">storage/meta_storage.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;json.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hyrise<sp/>{</highlight></codeline>
<codeline lineno="7" refid="namespacehyrise_1_1storage" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">storage<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="structhyrise_1_1storage_1_1sum__aggregate__functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor" kindref="compound">sum_aggregate_functor</ref><sp/>{</highlight></codeline>
<codeline lineno="10" refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a56c48d28f6a35df5e91b62be7d672f6d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a56c48d28f6a35df5e91b62be7d672f6d" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a3e3274ed5f436d3c4b060c8d0cac5b22" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1storage_1a1c9f919a7a3f09a8b304a98f1ebad3ee" kindref="member">hyrise::storage::c_atable_ptr_t</ref>&amp;<sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a3e3274ed5f436d3c4b060c8d0cac5b22" kindref="member">input</ref>;</highlight></codeline>
<codeline lineno="13" refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1add33d682c67c4bcee2c1e32f88916741" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref>&amp;<sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1add33d682c67c4bcee2c1e32f88916741" kindref="member">target</ref>;</highlight></codeline>
<codeline lineno="14" refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a2f093cfda12c8fa78c9bea4f6028232f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a82124b84ebfac47beba542ec17d56471" kindref="member">pos_list_t</ref><sp/>*<ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a2f093cfda12c8fa78c9bea4f6028232f" kindref="member">rows</ref>;</highlight></codeline>
<codeline lineno="15" refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a4d1c873f689df7183591cd33991f4ab5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a5a47ffe4fe6daf66aeeaec19ed0ea5ec" kindref="member">field_t</ref><sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a4d1c873f689df7183591cd33991f4ab5" kindref="member">sourceField</ref>;</highlight></codeline>
<codeline lineno="16" refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a94c89177d64d72069bfc57e9242a877d" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a94c89177d64d72069bfc57e9242a877d" kindref="member">targetColumn</ref>;</highlight></codeline>
<codeline lineno="17" refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1af0fac076d1fa42aedcc7b833f5459edc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1af0fac076d1fa42aedcc7b833f5459edc" kindref="member">targetRow</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a1d7394080f01a3bad3deb176bceeb393" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a1d7394080f01a3bad3deb176bceeb393" kindref="member">sum_aggregate_functor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1storage_1a1c9f919a7a3f09a8b304a98f1ebad3ee" kindref="member">hyrise::storage::c_atable_ptr_t</ref>&amp;<sp/>i,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref>&amp;<sp/>t,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a82124b84ebfac47beba542ec17d56471" kindref="member">pos_list_t</ref><sp/>*forRows,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a5a47ffe4fe6daf66aeeaec19ed0ea5ec" kindref="member">field_t</ref><sp/>sourceF,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>column,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>toRow):<sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a3e3274ed5f436d3c4b060c8d0cac5b22" kindref="member">input</ref>(i),<sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1add33d682c67c4bcee2c1e32f88916741" kindref="member">target</ref>(t),<sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a2f093cfda12c8fa78c9bea4f6028232f" kindref="member">rows</ref>(forRows),<sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a4d1c873f689df7183591cd33991f4ab5" kindref="member">sourceField</ref>(sourceF),<sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a94c89177d64d72069bfc57e9242a877d" kindref="member">targetColumn</ref>(column),<sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1af0fac076d1fa42aedcc7b833f5459edc" kindref="member">targetRow</ref>(toRow)<sp/>{};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="27" refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1ac5e4f7c4c9e86e3d11c44f32a6012ffd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1ac5e4f7c4c9e86e3d11c44f32a6012ffd" kindref="member">operator()</ref>()<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>R<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a2f093cfda12c8fa78c9bea4f6028232f" kindref="member">rows</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>currentRow:<sp/>*<ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a2f093cfda12c8fa78c9bea4f6028232f" kindref="member">rows</ref>)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a3e3274ed5f436d3c4b060c8d0cac5b22" kindref="member">input</ref>-&gt;getValue&lt;R&gt;(<ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a4d1c873f689df7183591cd33991f4ab5" kindref="member">sourceField</ref>,<sp/>currentRow);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>input_size<sp/>=<sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a3e3274ed5f436d3c4b060c8d0cac5b22" kindref="member">input</ref>-&gt;size();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>input_size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a3e3274ed5f436d3c4b060c8d0cac5b22" kindref="member">input</ref>-&gt;getValue&lt;R&gt;(<ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a4d1c873f689df7183591cd33991f4ab5" kindref="member">sourceField</ref>,<sp/>i);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1add33d682c67c4bcee2c1e32f88916741" kindref="member">target</ref>-&gt;setValue&lt;R&gt;(<ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1add33d682c67c4bcee2c1e32f88916741" kindref="member">target</ref>-&gt;numberOfColumn(<ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1a94c89177d64d72069bfc57e9242a877d" kindref="member">targetColumn</ref>),<sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor_1af0fac076d1fa42aedcc7b833f5459edc" kindref="member">targetRow</ref>,<sp/>result);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal">};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="structhyrise_1_1storage_1_1average__aggregate__functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor" kindref="compound">average_aggregate_functor</ref><sp/>{</highlight></codeline>
<codeline lineno="47" refid="structhyrise_1_1storage_1_1average__aggregate__functor_1afb692498a382e11390cecca83c121f62" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1afb692498a382e11390cecca83c121f62" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="structhyrise_1_1storage_1_1average__aggregate__functor_1ac1ce6b0ca9c5e45913a8e0faa42cfe90" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1storage_1a1c9f919a7a3f09a8b304a98f1ebad3ee" kindref="member">hyrise::storage::c_atable_ptr_t</ref>&amp;<sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1ac1ce6b0ca9c5e45913a8e0faa42cfe90" kindref="member">input</ref>;</highlight></codeline>
<codeline lineno="50" refid="structhyrise_1_1storage_1_1average__aggregate__functor_1ad8c27dfab64b9b0909c7a754ee9b878f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref>&amp;<sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1ad8c27dfab64b9b0909c7a754ee9b878f" kindref="member">target</ref>;</highlight></codeline>
<codeline lineno="51" refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a7b2898303aeff380d521369f91c155ba" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a82124b84ebfac47beba542ec17d56471" kindref="member">pos_list_t</ref><sp/>*<ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a7b2898303aeff380d521369f91c155ba" kindref="member">rows</ref>;</highlight></codeline>
<codeline lineno="52" refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a49509c702ef43e520d6312701108b759" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a5a47ffe4fe6daf66aeeaec19ed0ea5ec" kindref="member">field_t</ref><sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a49509c702ef43e520d6312701108b759" kindref="member">sourceField</ref>;</highlight></codeline>
<codeline lineno="53" refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a9623926c17a45670ac51a1f68dfc5aa7" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a9623926c17a45670ac51a1f68dfc5aa7" kindref="member">targetColumn</ref>;</highlight></codeline>
<codeline lineno="54" refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a3ca5e290c9f157300561161ae6398405" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a3ca5e290c9f157300561161ae6398405" kindref="member">targetRow</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="structhyrise_1_1storage_1_1average__aggregate__functor_1ab378f062036b0f54c4feb8f23a95d7c1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1ab378f062036b0f54c4feb8f23a95d7c1" kindref="member">average_aggregate_functor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1storage_1a1c9f919a7a3f09a8b304a98f1ebad3ee" kindref="member">hyrise::storage::c_atable_ptr_t</ref>&amp;<sp/>i,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref>&amp;<sp/>t,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a82124b84ebfac47beba542ec17d56471" kindref="member">pos_list_t</ref><sp/>*forRows,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a5a47ffe4fe6daf66aeeaec19ed0ea5ec" kindref="member">field_t</ref><sp/>sourceF,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>column,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>toRow):<sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1ac1ce6b0ca9c5e45913a8e0faa42cfe90" kindref="member">input</ref>(i),<sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1ad8c27dfab64b9b0909c7a754ee9b878f" kindref="member">target</ref>(t),<sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a7b2898303aeff380d521369f91c155ba" kindref="member">rows</ref>(forRows),<sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a49509c702ef43e520d6312701108b759" kindref="member">sourceField</ref>(sourceF),<sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a9623926c17a45670ac51a1f68dfc5aa7" kindref="member">targetColumn</ref>(column),<sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a3ca5e290c9f157300561161ae6398405" kindref="member">targetRow</ref>(toRow)<sp/>{};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1aa0cde52a8de452cc13b439adb470573d" kindref="member">operator()</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="68" refid="structhyrise_1_1storage_1_1average__aggregate__functor_1aa0cde52a8de452cc13b439adb470573d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1aa0cde52a8de452cc13b439adb470573d" kindref="member">average_aggregate_functor::operator()</ref>()<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>R<sp/><ref refid="layout__utils_8h_1ade2593c9a1f0314beb0796a5b32a8d70" kindref="member">sum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a7b2898303aeff380d521369f91c155ba" kindref="member">rows</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>currentRow:<sp/>*<ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a7b2898303aeff380d521369f91c155ba" kindref="member">rows</ref>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1ac1ce6b0ca9c5e45913a8e0faa42cfe90" kindref="member">input</ref>-&gt;getValue&lt;R&gt;(<ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a49509c702ef43e520d6312701108b759" kindref="member">sourceField</ref>,<sp/>currentRow);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>rows-&gt;size();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>input_size<sp/>=<sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1ac1ce6b0ca9c5e45913a8e0faa42cfe90" kindref="member">input</ref>-&gt;size();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>input_size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1ac1ce6b0ca9c5e45913a8e0faa42cfe90" kindref="member">input</ref>-&gt;getValue&lt;R&gt;(<ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a49509c702ef43e520d6312701108b759" kindref="member">sourceField</ref>,<sp/>i);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1ac1ce6b0ca9c5e45913a8e0faa42cfe90" kindref="member">input</ref>-&gt;size();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1ad8c27dfab64b9b0909c7a754ee9b878f" kindref="member">target</ref>-&gt;setValue&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(<ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1ad8c27dfab64b9b0909c7a754ee9b878f" kindref="member">target</ref>-&gt;numberOfColumn(<ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a9623926c17a45670ac51a1f68dfc5aa7" kindref="member">targetColumn</ref>),<sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a3ca5e290c9f157300561161ae6398405" kindref="member">targetRow</ref>,<sp/>((float)sum<sp/>/<sp/>count));</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="89" refid="structhyrise_1_1storage_1_1average__aggregate__functor_1a31dc9afb311cdb7896d8219e623c1f91" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>average_aggregate_functor::operator()&lt;std::string&gt;()<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>calculate<sp/>average<sp/>for<sp/>column<sp/>of<sp/>StringType&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="_aggregate_functions_8h_1a1e1d99ef87b707e40ef25e75f72d4993" refkind="member"><highlight class="normal"><ref refid="_aggregate_functions_8h_1a3b9157a78fd1faef0b152a06f7e11116" kindref="member">aggregateFunctionMap_t</ref><sp/><ref refid="_aggregate_functions_8cpp_1a1e1d99ef87b707e40ef25e75f72d4993" kindref="member">getAggregateFunctionMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="_aggregate_functions_8h_1a3b9157a78fd1faef0b152a06f7e11116" kindref="member">aggregateFunctionMap_t</ref><sp/>d;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;SUM&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_aggregate_functions_1ab0571a2034b640dbb973a1b0a9d2268fa90a79ac1aec2113a0b6933775cc5f3c5" kindref="member">AggregateFunctions::SUM</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;COUNT&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_aggregate_functions_1ab0571a2034b640dbb973a1b0a9d2268fa43a56005ab80ea67df6d196e612f5922" kindref="member">AggregateFunctions::COUNT</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;AVG&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_aggregate_functions_1ab0571a2034b640dbb973a1b0a9d2268fad3b26075afdfd772a775a8d98d6eb7b9" kindref="member">AggregateFunctions::AVG</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="_aggregate_functions_8h_1a829480f32fb1332b2aa33ee63b0f0687" refkind="member"><highlight class="normal"><ref refid="class_aggregate_fun" kindref="compound">AggregateFun</ref><sp/>*<ref refid="_aggregate_functions_8cpp_1a4358b781d3aaff7b214b794be22a89d2" kindref="member">parseAggregateFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Json::Value<sp/>&amp;data)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ftype<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">].isNumeric())<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>ftype<sp/>=<sp/>data[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">].asUInt();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">].isString())<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>ftype<sp/>=<sp/><ref refid="_aggregate_functions_8cpp_1a1e1d99ef87b707e40ef25e75f72d4993" kindref="member">getAggregateFunctionMap</ref>()[data[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">].asString()];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ftype)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_aggregate_functions_1ab0571a2034b640dbb973a1b0a9d2268fa90a79ac1aec2113a0b6933775cc5f3c5" kindref="member">AggregateFunctions::SUM</ref>:</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sum_aggregate_fun_1a2150afa875dd722c9d47084dcf55326e" kindref="member">SumAggregateFun::parse</ref>(data);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_aggregate_functions_1ab0571a2034b640dbb973a1b0a9d2268fa43a56005ab80ea67df6d196e612f5922" kindref="member">AggregateFunctions::COUNT</ref>:</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_count_aggregate_fun_1a6a53054a3f14e9206f4f868b970940da" kindref="member">CountAggregateFun::parse</ref>(data);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_aggregate_functions_1ab0571a2034b640dbb973a1b0a9d2268fad3b26075afdfd772a775a8d98d6eb7b9" kindref="member">AggregateFunctions::AVG</ref>:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_average_aggregate_fun_1a1bde65836879ba7b36c429dbf5c1d7c0" kindref="member">AverageAggregateFun::parse</ref>(data);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Aggregation<sp/>function<sp/>not<sp/>supported<sp/>in<sp/>GroupByScan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="class_aggregate_fun_1ae2bdfea5701dab37cf3ae3dc3f0a4193" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_aggregate_fun_1ae2bdfea5701dab37cf3ae3dc3f0a4193" kindref="member">AggregateFun::walk</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_abstract_table" kindref="compound">AbstractTable</ref><sp/>&amp;table)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_aggregate_fun_1a5b5622673221dc9739f5437b0c40240c" kindref="member">_field_name</ref>.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_aggregate_fun_1ae883edb2662c4550ca5f2ba1f3092131" kindref="member">_field</ref><sp/>=<sp/>table.<ref refid="class_abstract_table_1aaea606e4fd8c92a43febced405de1c6c" kindref="member">numberOfColumn</ref>(<ref refid="class_aggregate_fun_1a5b5622673221dc9739f5437b0c40240c" kindref="member">_field_name</ref>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="class_sum_aggregate_fun_1afa9fe82ffe437968edb66f5b9e8b7620" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sum_aggregate_fun_1afa9fe82ffe437968edb66f5b9e8b7620" kindref="member">SumAggregateFun::processValuesForRows</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1storage_1a1c9f919a7a3f09a8b304a98f1ebad3ee" kindref="member">hyrise::storage::c_atable_ptr_t</ref>&amp;<sp/>t,<sp/><ref refid="storage__types_8h_1a543d59ef56384af4a7af9aa551bc6825" kindref="member">pos_list_t</ref><sp/>*rows,<sp/><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref>&amp;<sp/>target,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>targetRow)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><ref refid="structhyrise_1_1storage_1_1sum__aggregate__functor" kindref="compound">hyrise::storage::sum_aggregate_functor</ref><sp/>fun(t,<sp/>target,<sp/>rows,<sp/><ref refid="class_aggregate_fun_1ae883edb2662c4550ca5f2ba1f3092131" kindref="member">_field</ref>,<sp/><ref refid="class_sum_aggregate_fun_1a18098a38bf738b39de674f212bf99390" kindref="member">columnName</ref>(t-&gt;nameOfColumn(<ref refid="class_aggregate_fun_1ae883edb2662c4550ca5f2ba1f3092131" kindref="member">_field</ref>)),<sp/>targetRow);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="structhyrise_1_1storage_1_1type__switch" kindref="compound">hyrise::storage::type_switch&lt;hyrise_basic_types&gt;</ref><sp/>ts;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>ts(<ref refid="class_sum_aggregate_fun_1a8547a0319d8ec9578d35847f492c46df" kindref="member">_datatype</ref>,<sp/>fun);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="class_sum_aggregate_fun_1a2150afa875dd722c9d47084dcf55326e" refkind="member"><highlight class="normal"><ref refid="class_aggregate_fun" kindref="compound">AggregateFun</ref><sp/>*<ref refid="class_sum_aggregate_fun_1a2150afa875dd722c9d47084dcf55326e" kindref="member">SumAggregateFun::parse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Json::Value<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].isNumeric())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sum_aggregate_fun_1ae0a3181c773e1a5ef49febc4ff2e29be" kindref="member">SumAggregateFun</ref>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].asUInt());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].isString())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sum_aggregate_fun_1ae0a3181c773e1a5ef49febc4ff2e29be" kindref="member">SumAggregateFun</ref>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].asString());</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>parse<sp/>json&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="class_count_aggregate_fun_1a9724bfbbb3311f4c0e2e9453a92a3a64" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_count_aggregate_fun_1a9724bfbbb3311f4c0e2e9453a92a3a64" kindref="member">CountAggregateFun::processValuesForRows</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1storage_1a1c9f919a7a3f09a8b304a98f1ebad3ee" kindref="member">hyrise::storage::c_atable_ptr_t</ref>&amp;<sp/>t,<sp/><ref refid="storage__types_8h_1a543d59ef56384af4a7af9aa551bc6825" kindref="member">pos_list_t</ref><sp/>*rows,<sp/><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref>&amp;<sp/>target,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>targetRow)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>rows-&gt;size();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>t-&gt;size();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>target-&gt;setValue&lt;<ref refid="storage__types_8h_1a72c5f9ba0685142ffc747d0a586a5d8a" kindref="member">hyrise_int_t</ref>&gt;(target-&gt;numberOfColumn(<ref refid="class_count_aggregate_fun_1a1f16167eb96df2ec45fdf11378ebaeb0" kindref="member">columnName</ref>(t-&gt;nameOfColumn(<ref refid="class_aggregate_fun_1ae883edb2662c4550ca5f2ba1f3092131" kindref="member">_field</ref>))),<sp/>targetRow,<sp/>count);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="class_count_aggregate_fun_1a6a53054a3f14e9206f4f868b970940da" refkind="member"><highlight class="normal"><ref refid="class_aggregate_fun" kindref="compound">AggregateFun</ref><sp/>*<ref refid="class_count_aggregate_fun_1a6a53054a3f14e9206f4f868b970940da" kindref="member">CountAggregateFun::parse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Json::Value<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].isNumeric())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_count_aggregate_fun_1a1bb268d5128a1bd9b9f71edd536a4707" kindref="member">CountAggregateFun</ref>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].asUInt());</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].isString())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_count_aggregate_fun_1a1bb268d5128a1bd9b9f71edd536a4707" kindref="member">CountAggregateFun</ref>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].asString());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>parse<sp/>json&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="class_average_aggregate_fun_1a7bd93a8a4bd72ea6965648aa7cec7752" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_average_aggregate_fun_1a7bd93a8a4bd72ea6965648aa7cec7752" kindref="member">AverageAggregateFun::processValuesForRows</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1storage_1a1c9f919a7a3f09a8b304a98f1ebad3ee" kindref="member">hyrise::storage::c_atable_ptr_t</ref>&amp;<sp/>t,<sp/><ref refid="storage__types_8h_1a543d59ef56384af4a7af9aa551bc6825" kindref="member">pos_list_t</ref><sp/>*rows,<sp/><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref>&amp;<sp/>target,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>targetRow)<sp/>{<sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhyrise_1_1storage_1_1average__aggregate__functor" kindref="compound">hyrise::storage::average_aggregate_functor</ref><sp/>fun(t,<sp/>target,<sp/>rows,<sp/><ref refid="class_aggregate_fun_1ae883edb2662c4550ca5f2ba1f3092131" kindref="member">_field</ref>,<sp/><ref refid="class_average_aggregate_fun_1a169e84680538bc6d05c772fe6b2e383b" kindref="member">columnName</ref>(t-&gt;nameOfColumn(<ref refid="class_aggregate_fun_1ae883edb2662c4550ca5f2ba1f3092131" kindref="member">_field</ref>)),<sp/>targetRow);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhyrise_1_1storage_1_1type__switch" kindref="compound">hyrise::storage::type_switch&lt;hyrise_basic_types&gt;</ref><sp/>ts;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>ts(<ref refid="class_average_aggregate_fun_1a5017e4534d9bafc630d61ab42877d551" kindref="member">_datatype</ref>,<sp/>fun);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="class_average_aggregate_fun_1a1bde65836879ba7b36c429dbf5c1d7c0" refkind="member"><highlight class="normal"><ref refid="class_aggregate_fun" kindref="compound">AggregateFun</ref><sp/>*<ref refid="class_average_aggregate_fun_1a1bde65836879ba7b36c429dbf5c1d7c0" kindref="member">AverageAggregateFun::parse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Json::Value<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].isNumeric())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_average_aggregate_fun_1a60e77ff49e8ca41b3d7e9cc5814d9819" kindref="member">AverageAggregateFun</ref>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].asUInt());</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].isString())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_average_aggregate_fun_1a60e77ff49e8ca41b3d7e9cc5814d9819" kindref="member">AverageAggregateFun</ref>(f[</highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">].asString());</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>parse<sp/>json&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/home/captain/HPI/aepic/hyrise/src/lib/access/AggregateFunctions.cpp"/>
  </compounddef>
</doxygen>
