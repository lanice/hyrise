<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="pred__build_expression_8cpp" kind="file">
    <compoundname>pred_buildExpression.cpp</compoundname>
    <includes refid="pred__build_expression_8h" local="yes">pred_buildExpression.h</includes>
    <includes local="no">json.h</includes>
    <includes refid="expression__types_8h" local="yes">expression_types.h</includes>
    <includes refid="json__converters_8h" local="yes">../json_converters.h</includes>
    <includes refid="predicates_8h" local="yes">predicates.h</includes>
    <includes refid="pred__expression__factory_8h" local="yes">pred_expression_factory.h</includes>
    <includes refid="meta__storage_8h" local="yes">storage/meta_storage.h</includes>
    <incdepgraph>
      <node id="3218">
        <label>boost/mpl/size.hpp</label>
      </node>
      <node id="3207">
        <label>storage/RawTable.h</label>
        <link refid="_raw_table_8h"/>
        <childnode refid="3208" relation="include">
        </childnode>
        <childnode refid="3169" relation="include">
        </childnode>
        <childnode refid="3166" relation="include">
        </childnode>
        <childnode refid="3165" relation="include">
        </childnode>
        <childnode refid="3173" relation="include">
        </childnode>
        <childnode refid="3176" relation="include">
        </childnode>
        <childnode refid="3209" relation="include">
        </childnode>
      </node>
      <node id="3202">
        <label>../json_converters.h</label>
        <link refid="json__converters_8h"/>
        <childnode refid="3168" relation="include">
        </childnode>
        <childnode refid="3176" relation="include">
        </childnode>
        <childnode refid="3197" relation="include">
        </childnode>
      </node>
      <node id="3179">
        <label>atomic</label>
      </node>
      <node id="3219">
        <label>boost/mpl/vector.hpp</label>
      </node>
      <node id="3171">
        <label>limits</label>
      </node>
      <node id="3190">
        <label>assert.h</label>
      </node>
      <node id="3188">
        <label>storage/ValueIdMap.hpp</label>
        <link refid="_value_id_map_8hpp"/>
        <childnode refid="3189" relation="include">
        </childnode>
        <childnode refid="3192" relation="include">
        </childnode>
      </node>
      <node id="3182">
        <label>storage/AbstractResource.h</label>
        <link refid="_abstract_resource_8h"/>
      </node>
      <node id="3187">
        <label>boost/iterator/iterator_facade.hpp</label>
      </node>
      <node id="3169">
        <label>cstdint</label>
      </node>
      <node id="3176">
        <label>storage/AbstractTable.h</label>
        <link refid="_abstract_table_8h"/>
        <childnode refid="3171" relation="include">
        </childnode>
        <childnode refid="3172" relation="include">
        </childnode>
        <childnode refid="3166" relation="include">
        </childnode>
        <childnode refid="3165" relation="include">
        </childnode>
        <childnode refid="3170" relation="include">
        </childnode>
        <childnode refid="3168" relation="include">
        </childnode>
        <childnode refid="3177" relation="include">
        </childnode>
        <childnode refid="3180" relation="include">
        </childnode>
        <childnode refid="3182" relation="include">
        </childnode>
        <childnode refid="3183" relation="include">
        </childnode>
        <childnode refid="3173" relation="include">
        </childnode>
      </node>
      <node id="3174">
        <label>stdint.h</label>
      </node>
      <node id="3168">
        <label>helper/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3169" relation="include">
        </childnode>
        <childnode refid="3170" relation="include">
        </childnode>
        <childnode refid="3171" relation="include">
        </childnode>
        <childnode refid="3172" relation="include">
        </childnode>
        <childnode refid="3165" relation="include">
        </childnode>
      </node>
      <node id="3204">
        <label>pred_BetweenOperation.h</label>
        <link refid="pred___between_operation_8h"/>
        <childnode refid="3168" relation="include">
        </childnode>
        <childnode refid="3164" relation="include">
        </childnode>
      </node>
      <node id="3180">
        <label>helper/unique_id.h</label>
        <link refid="unique__id_8h"/>
        <childnode refid="3169" relation="include">
        </childnode>
        <childnode refid="3181" relation="include">
        </childnode>
      </node>
      <node id="3166">
        <label>stdexcept</label>
      </node>
      <node id="3203">
        <label>predicates.h</label>
        <link refid="predicates_8h"/>
        <childnode refid="3204" relation="include">
        </childnode>
        <childnode refid="3205" relation="include">
        </childnode>
        <childnode refid="3206" relation="include">
        </childnode>
        <childnode refid="3210" relation="include">
        </childnode>
        <childnode refid="3211" relation="include">
        </childnode>
        <childnode refid="3212" relation="include">
        </childnode>
        <childnode refid="3199" relation="include">
        </childnode>
        <childnode refid="3201" relation="include">
        </childnode>
        <childnode refid="3163" relation="include">
        </childnode>
        <childnode refid="3214" relation="include">
        </childnode>
      </node>
      <node id="3211">
        <label>pred_LessThanExpression.h</label>
        <link refid="pred___less_than_expression_8h"/>
        <childnode refid="3164" relation="include">
        </childnode>
      </node>
      <node id="3170">
        <label>string</label>
      </node>
      <node id="3198">
        <label>join_predicates.h</label>
        <link refid="join__predicates_8h"/>
        <childnode refid="3168" relation="include">
        </childnode>
        <childnode refid="3196" relation="include">
        </childnode>
      </node>
      <node id="3216">
        <label>boost/mpl/at.hpp</label>
      </node>
      <node id="3194">
        <label>map</label>
      </node>
      <node id="3215">
        <label>storage/meta_storage.h</label>
        <link refid="meta__storage_8h"/>
        <childnode refid="3166" relation="include">
        </childnode>
        <childnode refid="3216" relation="include">
        </childnode>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3218" relation="include">
        </childnode>
        <childnode refid="3173" relation="include">
        </childnode>
        <childnode refid="3219" relation="include">
        </childnode>
      </node>
      <node id="3163">
        <label>pred_buildExpression.h</label>
        <link refid="pred__build_expression_8h"/>
        <childnode refid="3164" relation="include">
        </childnode>
      </node>
      <node id="3206">
        <label>pred_EqualsExpression.h</label>
        <link refid="pred___equals_expression_8h"/>
        <childnode refid="3168" relation="include">
        </childnode>
        <childnode refid="3164" relation="include">
        </childnode>
        <childnode refid="3207" relation="include">
        </childnode>
      </node>
      <node id="3193">
        <label>exception</label>
      </node>
      <node id="3175">
        <label>ostream</label>
      </node>
      <node id="3210">
        <label>pred_GreaterThanExpression.h</label>
        <link refid="pred___greater_than_expression_8h"/>
        <childnode refid="3164" relation="include">
        </childnode>
      </node>
      <node id="3197">
        <label>json.h</label>
      </node>
      <node id="3195">
        <label>limits.h</label>
      </node>
      <node id="3186">
        <label>storage/BaseIterator.h</label>
        <link refid="_base_iterator_8h"/>
      </node>
      <node id="3214">
        <label>pred_expression_factory.h</label>
        <link refid="pred__expression__factory_8h"/>
        <childnode refid="3196" relation="include">
        </childnode>
        <childnode refid="3202" relation="include">
        </childnode>
        <childnode refid="3203" relation="include">
        </childnode>
      </node>
      <node id="3164">
        <label>pred_common.h</label>
        <link refid="pred__common_8h"/>
        <childnode refid="3165" relation="include">
        </childnode>
        <childnode refid="3166" relation="include">
        </childnode>
        <childnode refid="3167" relation="include">
        </childnode>
        <childnode refid="3168" relation="include">
        </childnode>
        <childnode refid="3173" relation="include">
        </childnode>
        <childnode refid="3176" relation="include">
        </childnode>
        <childnode refid="3188" relation="include">
        </childnode>
        <childnode refid="3196" relation="include">
        </childnode>
        <childnode refid="3198" relation="include">
        </childnode>
        <childnode refid="3199" relation="include">
        </childnode>
        <childnode refid="3201" relation="include">
        </childnode>
      </node>
      <node id="3192">
        <label>storage/OrderIndifferentDictionary.h</label>
        <link refid="_order_indifferent_dictionary_8h"/>
        <childnode refid="3193" relation="include">
        </childnode>
        <childnode refid="3165" relation="include">
        </childnode>
        <childnode refid="3194" relation="include">
        </childnode>
        <childnode refid="3172" relation="include">
        </childnode>
        <childnode refid="3195" relation="include">
        </childnode>
        <childnode refid="3173" relation="include">
        </childnode>
        <childnode refid="3183" relation="include">
        </childnode>
        <childnode refid="3185" relation="include">
        </childnode>
      </node>
      <node id="3212">
        <label>pred_PredicateBuilder.h</label>
        <link refid="pred___predicate_builder_8h"/>
        <childnode refid="3213" relation="include">
        </childnode>
        <childnode refid="3164" relation="include">
        </childnode>
        <childnode refid="3205" relation="include">
        </childnode>
      </node>
      <node id="3162">
        <label>src/lib/access/expressions/pred_buildExpression.cpp</label>
        <link refid="pred_buildExpression.cpp"/>
        <childnode refid="3163" relation="include">
        </childnode>
        <childnode refid="3197" relation="include">
        </childnode>
        <childnode refid="3196" relation="include">
        </childnode>
        <childnode refid="3202" relation="include">
        </childnode>
        <childnode refid="3203" relation="include">
        </childnode>
        <childnode refid="3214" relation="include">
        </childnode>
        <childnode refid="3215" relation="include">
        </childnode>
      </node>
      <node id="3213">
        <label>stack</label>
      </node>
      <node id="3165">
        <label>vector</label>
      </node>
      <node id="3217">
        <label>boost/mpl/int.hpp</label>
      </node>
      <node id="3181">
        <label>array</label>
      </node>
      <node id="3196">
        <label>expression_types.h</label>
        <link refid="expression__types_8h"/>
        <childnode refid="3194" relation="include">
        </childnode>
        <childnode refid="3170" relation="include">
        </childnode>
        <childnode refid="3197" relation="include">
        </childnode>
      </node>
      <node id="3199">
        <label>pred_SimpleExpression.h</label>
        <link refid="pred___simple_expression_8h"/>
        <childnode refid="3173" relation="include">
        </childnode>
        <childnode refid="3168" relation="include">
        </childnode>
        <childnode refid="3200" relation="include">
        </childnode>
      </node>
      <node id="3177">
        <label>helper/locking.h</label>
        <link refid="locking_8h"/>
        <childnode refid="3178" relation="include">
        </childnode>
        <childnode refid="3179" relation="include">
        </childnode>
      </node>
      <node id="3191">
        <label>iostream</label>
      </node>
      <node id="3205">
        <label>pred_CompoundExpression.h</label>
        <link refid="pred___compound_expression_8h"/>
        <childnode refid="3164" relation="include">
        </childnode>
      </node>
      <node id="3173">
        <label>storage/storage_types.h</label>
        <link refid="storage__types_8h"/>
        <childnode refid="3165" relation="include">
        </childnode>
        <childnode refid="3170" relation="include">
        </childnode>
        <childnode refid="3166" relation="include">
        </childnode>
        <childnode refid="3174" relation="include">
        </childnode>
        <childnode refid="3175" relation="include">
        </childnode>
      </node>
      <node id="3201">
        <label>pred_SimpleFieldExpression.h</label>
        <link refid="pred___simple_field_expression_8h"/>
        <childnode refid="3168" relation="include">
        </childnode>
        <childnode refid="3164" relation="include">
        </childnode>
      </node>
      <node id="3184">
        <label>storage/AbstractDictionary.h</label>
        <link refid="_abstract_dictionary_8h"/>
        <childnode refid="3165" relation="include">
        </childnode>
        <childnode refid="3170" relation="include">
        </childnode>
        <childnode refid="3172" relation="include">
        </childnode>
        <childnode refid="3173" relation="include">
        </childnode>
      </node>
      <node id="3178">
        <label>thread</label>
      </node>
      <node id="3185">
        <label>storage/DictionaryIterator.h</label>
        <link refid="_dictionary_iterator_8h"/>
        <childnode refid="3186" relation="include">
        </childnode>
        <childnode refid="3187" relation="include">
        </childnode>
      </node>
      <node id="3200">
        <label>access/expressions/AbstractExpression.h</label>
        <link refid="_abstract_expression_8h"/>
        <childnode refid="3165" relation="include">
        </childnode>
        <childnode refid="3168" relation="include">
        </childnode>
      </node>
      <node id="3189">
        <label>storage/OrderPreservingDictionary.h</label>
        <link refid="_order_preserving_dictionary_8h"/>
        <childnode refid="3190" relation="include">
        </childnode>
        <childnode refid="3191" relation="include">
        </childnode>
        <childnode refid="3172" relation="include">
        </childnode>
        <childnode refid="3183" relation="include">
        </childnode>
        <childnode refid="3186" relation="include">
        </childnode>
        <childnode refid="3185" relation="include">
        </childnode>
        <childnode refid="3173" relation="include">
        </childnode>
      </node>
      <node id="3209">
        <label>storage/ColumnMetadata.h</label>
        <link refid="_column_metadata_8h"/>
        <childnode refid="3173" relation="include">
        </childnode>
        <childnode refid="3170" relation="include">
        </childnode>
        <childnode refid="3166" relation="include">
        </childnode>
      </node>
      <node id="3167">
        <label>stdio.h</label>
      </node>
      <node id="3208">
        <label>cstring</label>
      </node>
      <node id="3172">
        <label>memory</label>
      </node>
      <node id="3183">
        <label>storage/BaseDictionary.h</label>
        <link refid="_base_dictionary_8h"/>
        <childnode refid="3173" relation="include">
        </childnode>
        <childnode refid="3184" relation="include">
        </childnode>
        <childnode refid="3185" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="pred__build_expression_8cpp_1a25b05497914ea51ff063e411971eff00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_simple_field_expression" kindref="compound">SimpleFieldExpression</ref> *</type>
        <definition>SimpleFieldExpression* buildFieldExpression</definition>
        <argsstring>(PredicateType::type pred_type, Json::Value &amp;predicate)</argsstring>
        <name>buildFieldExpression</name>
        <param>
          <type><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4" kindref="member">PredicateType::type</ref></type>
          <declname>pred_type</declname>
        </param>
        <param>
          <type>Json::Value &amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/pred_buildExpression.cpp" line="12" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/pred_buildExpression.cpp" bodystart="12" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="pred__build_expression_8cpp_1adde58ea9cb61f303c996ff1b6e2bf0c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_simple_expression" kindref="compound">SimpleExpression</ref> *</type>
        <definition>SimpleExpression* buildExpression</definition>
        <argsstring>(Json::Value &amp;predicates)</argsstring>
        <name>buildExpression</name>
        <param>
          <type>Json::Value &amp;</type>
          <declname>predicates</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/pred_buildExpression.cpp" line="23" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/pred_buildExpression.cpp" bodystart="23" bodyend="53"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pred__build_expression_8h" kindref="compound">pred_buildExpression.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;json.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="expression__types_8h" kindref="compound">expression_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../json_converters.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="predicates_8h" kindref="compound">predicates.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pred__expression__factory_8h" kindref="compound">pred_expression_factory.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="meta__storage_8h" kindref="compound">storage/meta_storage.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="pred__build_expression_8h_1a78db0dff0c30dc4f14e67733ba035780" refkind="member"><highlight class="normal"><ref refid="class_simple_field_expression" kindref="compound">SimpleFieldExpression</ref><sp/>*<ref refid="pred__build_expression_8cpp_1a25b05497914ea51ff063e411971eff00" kindref="member">buildFieldExpression</ref>(<ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4" kindref="member">PredicateType::type</ref><sp/>pred_type,<sp/>Json::Value<sp/>&amp;predicate)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><ref refid="structhyrise_1_1storage_1_1type__switch" kindref="compound">hyrise::storage::type_switch&lt;hyrise_basic_types&gt;</ref><sp/>ts;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><ref refid="structhyrise_1_1access_1_1expression__factory" kindref="compound">hyrise::access::expression_factory</ref><sp/>fun;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(predicate[</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">].isNumeric())<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>fun<sp/>=<sp/><ref refid="structhyrise_1_1access_1_1expression__factory" kindref="compound">hyrise::access::expression_factory</ref>(predicate[</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">].asUInt(),<sp/>predicate[</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">].asUInt(),<sp/>pred_type,<sp/>predicate[</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(predicate[</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">].isString())<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>fun<sp/>=<sp/><ref refid="structhyrise_1_1access_1_1expression__factory" kindref="compound">hyrise::access::expression_factory</ref>(predicate[</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">].asUInt(),<sp/>predicate[</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">].asString(),<sp/>pred_type,<sp/>predicate[</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ts(predicate[</highlight><highlight class="stringliteral">&quot;vtype&quot;</highlight><highlight class="normal">].asUInt(),<sp/>fun);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="pred__build_expression_8h_1a860b728b80207d8af84fd77e67320f80" refkind="member"><highlight class="normal"><ref refid="class_simple_expression" kindref="compound">SimpleExpression</ref><sp/>*<ref refid="pred__build_expression_8cpp_1adde58ea9cb61f303c996ff1b6e2bf0c9" kindref="member">buildExpression</ref>(Json::Value<sp/>&amp;predicates)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="class_predicate_builder" kindref="compound">PredicateBuilder</ref><sp/>b;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>Json::Value<sp/>predicate;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4" kindref="member">PredicateType::type</ref><sp/>pred_type;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>predicates.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>predicate<sp/>=<sp/>predicates[i];</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>pred_type<sp/>=<sp/><ref refid="expression__types_8cpp_1a9aa1d4a3b96198829e669e8f37a9f245" kindref="member">parsePredicateType</ref>(predicate[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(pred_type)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a60bdbd1b416610a640dfffe9919aca6c" kindref="member">PredicateType::AND</ref>:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.<ref refid="class_predicate_builder_1aa31b28dc516d1022a6043f71d384655b" kindref="member">add</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_compound_expression" kindref="compound">CompoundExpression</ref>(<ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a865555c9f2e0458a7078486aa1b3254f" kindref="member">AND</ref>));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a3ff86da6498bd889c76820144ecfd860" kindref="member">PredicateType::OR</ref>:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.<ref refid="class_predicate_builder_1aa31b28dc516d1022a6043f71d384655b" kindref="member">add</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_compound_expression" kindref="compound">CompoundExpression</ref>(<ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a96727447c0ad447987df1c6415aef074" kindref="member">OR</ref>));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a40c0fea54ab0a7158cb810684feb1170" kindref="member">PredicateType::NOT</ref>:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.<ref refid="class_predicate_builder_1aa31b28dc516d1022a6043f71d384655b" kindref="member">add</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_compound_expression" kindref="compound">CompoundExpression</ref>(<ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a0378ebc895849163b249d0b330257dd6" kindref="member">NOT</ref>));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.<ref refid="class_predicate_builder_1aa31b28dc516d1022a6043f71d384655b" kindref="member">add</ref>(<ref refid="pred__build_expression_8cpp_1a25b05497914ea51ff063e411971eff00" kindref="member">buildFieldExpression</ref>(pred_type,<sp/>predicate));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b.<ref refid="class_predicate_builder_1a79a44caefa8c4c6abaa717dfe29126dc" kindref="member">build</ref>();</highlight></codeline>
<codeline lineno="53"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/pred_buildExpression.cpp"/>
  </compounddef>
</doxygen>
