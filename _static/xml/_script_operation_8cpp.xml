<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="_script_operation_8cpp" kind="file">
    <compoundname>ScriptOperation.cpp</compoundname>
    <includes refid="_script_operation_8h" local="yes">access/ScriptOperation.h</includes>
    <includes refid="_pointer_calculator_8h" local="no">storage/PointerCalculator.h</includes>
    <includes refid="_mutable_vertical_table_8h" local="no">storage/MutableVerticalTable.h</includes>
    <includes refid="_table_builder_8h" local="no">storage/TableBuilder.h</includes>
    <includes refid="_fixed_length_vector_8h" local="no">storage/FixedLengthVector.h</includes>
    <includes refid="_settings_8h" local="no">helper/Settings.h</includes>
    <includes refid="types_8h" local="no">helper/types.h</includes>
    <includes local="yes">log4cxx/logger.h</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">functional</includes>
    <incdepgraph>
      <node id="6716">
        <label>atomic</label>
      </node>
      <node id="6749">
        <label>functional</label>
      </node>
      <node id="6707">
        <label>limits</label>
      </node>
      <node id="6689">
        <label>access/system/OutputTask.h</label>
        <link refid="_output_task_8h"/>
        <childnode refid="6690" relation="include">
        </childnode>
        <childnode refid="6691" relation="include">
        </childnode>
        <childnode refid="6692" relation="include">
        </childnode>
        <childnode refid="6693" relation="include">
        </childnode>
        <childnode refid="6694" relation="include">
        </childnode>
        <childnode refid="6695" relation="include">
        </childnode>
        <childnode refid="6699" relation="include">
        </childnode>
        <childnode refid="6700" relation="include">
        </childnode>
      </node>
      <node id="6719">
        <label>storage/AbstractResource.h</label>
        <link refid="_abstract_resource_8h"/>
      </node>
      <node id="6724">
        <label>boost/iterator/iterator_facade.hpp</label>
      </node>
      <node id="6706">
        <label>cstdint</label>
      </node>
      <node id="6713">
        <label>storage/AbstractTable.h</label>
        <link refid="_abstract_table_8h"/>
        <childnode refid="6707" relation="include">
        </childnode>
        <childnode refid="6702" relation="include">
        </childnode>
        <childnode refid="6697" relation="include">
        </childnode>
        <childnode refid="6692" relation="include">
        </childnode>
        <childnode refid="6696" relation="include">
        </childnode>
        <childnode refid="6705" relation="include">
        </childnode>
        <childnode refid="6714" relation="include">
        </childnode>
        <childnode refid="6717" relation="include">
        </childnode>
        <childnode refid="6719" relation="include">
        </childnode>
        <childnode refid="6720" relation="include">
        </childnode>
        <childnode refid="6695" relation="include">
        </childnode>
      </node>
      <node id="6690">
        <label>stdint.h</label>
      </node>
      <node id="6705">
        <label>helper/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="6706" relation="include">
        </childnode>
        <childnode refid="6696" relation="include">
        </childnode>
        <childnode refid="6707" relation="include">
        </childnode>
        <childnode refid="6702" relation="include">
        </childnode>
        <childnode refid="6692" relation="include">
        </childnode>
      </node>
      <node id="6737">
        <label>cmath</label>
      </node>
      <node id="6717">
        <label>helper/unique_id.h</label>
        <link refid="unique__id_8h"/>
        <childnode refid="6706" relation="include">
        </childnode>
        <childnode refid="6718" relation="include">
        </childnode>
      </node>
      <node id="6742">
        <label>cassert</label>
      </node>
      <node id="6700">
        <label>taskscheduler/Task.h</label>
        <link refid="_task_8h"/>
        <childnode refid="6692" relation="include">
        </childnode>
        <childnode refid="6701" relation="include">
        </childnode>
        <childnode refid="6702" relation="include">
        </childnode>
        <childnode refid="6703" relation="include">
        </childnode>
        <childnode refid="6696" relation="include">
        </childnode>
      </node>
      <node id="6697">
        <label>stdexcept</label>
      </node>
      <node id="6696">
        <label>string</label>
      </node>
      <node id="6693">
        <label>map</label>
      </node>
      <node id="6699">
        <label>helper/epoch.h</label>
        <link refid="epoch_8h"/>
        <childnode refid="6690" relation="include">
        </childnode>
      </node>
      <node id="6728">
        <label>storage/Table.h</label>
        <link refid="_table_8h"/>
        <childnode refid="6696" relation="include">
        </childnode>
        <childnode refid="6692" relation="include">
        </childnode>
        <childnode refid="6702" relation="include">
        </childnode>
        <childnode refid="6705" relation="include">
        </childnode>
        <childnode refid="6729" relation="include">
        </childnode>
        <childnode refid="6713" relation="include">
        </childnode>
        <childnode refid="6721" relation="include">
        </childnode>
        <childnode refid="6730" relation="include">
        </childnode>
        <childnode refid="6733" relation="include">
        </childnode>
      </node>
      <node id="6745">
        <label>stddef.h</label>
      </node>
      <node id="6730">
        <label>storage/BaseAttributeVector.h</label>
        <link refid="_base_attribute_vector_8h"/>
        <childnode refid="6702" relation="include">
        </childnode>
        <childnode refid="6697" relation="include">
        </childnode>
        <childnode refid="6731" relation="include">
        </childnode>
      </node>
      <node id="6698">
        <label>ostream</label>
      </node>
      <node id="6709">
        <label>json.h</label>
      </node>
      <node id="6710">
        <label>access/system/BasicParser.h</label>
        <link refid="_basic_parser_8h"/>
        <childnode refid="6697" relation="include">
        </childnode>
        <childnode refid="6702" relation="include">
        </childnode>
        <childnode refid="6709" relation="include">
        </childnode>
      </node>
      <node id="6723">
        <label>storage/BaseIterator.h</label>
        <link refid="_base_iterator_8h"/>
      </node>
      <node id="6731">
        <label>storage/AbstractAttributeVector.h</label>
        <link refid="_abstract_attribute_vector_8h"/>
        <childnode refid="6732" relation="include">
        </childnode>
      </node>
      <node id="6734">
        <label>storage/FixedLengthVector.h</label>
        <link refid="_fixed_length_vector_8h"/>
        <childnode refid="6735" relation="include">
        </childnode>
        <childnode refid="6736" relation="include">
        </childnode>
        <childnode refid="6737" relation="include">
        </childnode>
        <childnode refid="6716" relation="include">
        </childnode>
        <childnode refid="6702" relation="include">
        </childnode>
        <childnode refid="6701" relation="include">
        </childnode>
        <childnode refid="6696" relation="include">
        </childnode>
        <childnode refid="6697" relation="include">
        </childnode>
        <childnode refid="6738" relation="include">
        </childnode>
        <childnode refid="6739" relation="include">
        </childnode>
        <childnode refid="6730" relation="include">
        </childnode>
      </node>
      <node id="6703">
        <label>condition_variable</label>
      </node>
      <node id="6744">
        <label>storage/TableBuilder.h</label>
        <link refid="_table_builder_8h"/>
        <childnode refid="6745" relation="include">
        </childnode>
        <childnode refid="6696" relation="include">
        </childnode>
        <childnode refid="6692" relation="include">
        </childnode>
        <childnode refid="6697" relation="include">
        </childnode>
        <childnode refid="6705" relation="include">
        </childnode>
        <childnode refid="6713" relation="include">
        </childnode>
      </node>
      <node id="6748">
        <label>cstdio</label>
      </node>
      <node id="6685">
        <label>src/lib/access/ScriptOperation.cpp</label>
        <link refid="ScriptOperation.cpp"/>
        <childnode refid="6686" relation="include">
        </childnode>
        <childnode refid="6725" relation="include">
        </childnode>
        <childnode refid="6727" relation="include">
        </childnode>
        <childnode refid="6744" relation="include">
        </childnode>
        <childnode refid="6734" relation="include">
        </childnode>
        <childnode refid="6746" relation="include">
        </childnode>
        <childnode refid="6705" relation="include">
        </childnode>
        <childnode refid="6747" relation="include">
        </childnode>
        <childnode refid="6748" relation="include">
        </childnode>
        <childnode refid="6749" relation="include">
        </childnode>
      </node>
      <node id="6733">
        <label>storage/AttributeVectorFactory.h</label>
        <link refid="_attribute_vector_factory_8h"/>
        <childnode refid="6702" relation="include">
        </childnode>
        <childnode refid="6730" relation="include">
        </childnode>
        <childnode refid="6734" relation="include">
        </childnode>
        <childnode refid="6741" relation="include">
        </childnode>
      </node>
      <node id="6692">
        <label>vector</label>
      </node>
      <node id="6726">
        <label>helper/SharedFactory.h</label>
        <link refid="_shared_factory_8h"/>
        <childnode refid="6702" relation="include">
        </childnode>
      </node>
      <node id="6694">
        <label>utility</label>
      </node>
      <node id="6718">
        <label>array</label>
      </node>
      <node id="6738">
        <label>sstream</label>
      </node>
      <node id="6711">
        <label>io/TXContext.h</label>
        <link refid="_t_x_context_8h"/>
        <childnode refid="6705" relation="include">
        </childnode>
        <childnode refid="6712" relation="include">
        </childnode>
      </node>
      <node id="6708">
        <label>access/system/QueryParser.h</label>
        <link refid="_query_parser_8h"/>
        <childnode refid="6693" relation="include">
        </childnode>
        <childnode refid="6702" relation="include">
        </childnode>
        <childnode refid="6692" relation="include">
        </childnode>
        <childnode refid="6696" relation="include">
        </childnode>
        <childnode refid="6697" relation="include">
        </childnode>
        <childnode refid="6701" relation="include">
        </childnode>
        <childnode refid="6709" relation="include">
        </childnode>
        <childnode refid="6710" relation="include">
        </childnode>
      </node>
      <node id="6712">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="6691">
        <label>time.h</label>
      </node>
      <node id="6735">
        <label>cerrno</label>
      </node>
      <node id="6727">
        <label>storage/MutableVerticalTable.h</label>
        <link refid="_mutable_vertical_table_8h"/>
        <childnode refid="6692" relation="include">
        </childnode>
        <childnode refid="6696" relation="include">
        </childnode>
        <childnode refid="6705" relation="include">
        </childnode>
        <childnode refid="6728" relation="include">
        </childnode>
        <childnode refid="6743" relation="include">
        </childnode>
        <childnode refid="6729" relation="include">
        </childnode>
        <childnode refid="6713" relation="include">
        </childnode>
      </node>
      <node id="6714">
        <label>helper/locking.h</label>
        <link refid="locking_8h"/>
        <childnode refid="6715" relation="include">
        </childnode>
        <childnode refid="6716" relation="include">
        </childnode>
      </node>
      <node id="6743">
        <label>storage/TableFactory.h</label>
        <link refid="_table_factory_8h"/>
        <childnode refid="6702" relation="include">
        </childnode>
        <childnode refid="6705" relation="include">
        </childnode>
        <childnode refid="6713" relation="include">
        </childnode>
        <childnode refid="6728" relation="include">
        </childnode>
      </node>
      <node id="6740">
        <label>iostream</label>
      </node>
      <node id="6732">
        <label>cstddef</label>
      </node>
      <node id="6695">
        <label>storage/storage_types.h</label>
        <link refid="storage__types_8h"/>
        <childnode refid="6692" relation="include">
        </childnode>
        <childnode refid="6696" relation="include">
        </childnode>
        <childnode refid="6697" relation="include">
        </childnode>
        <childnode refid="6690" relation="include">
        </childnode>
        <childnode refid="6698" relation="include">
        </childnode>
      </node>
      <node id="6704">
        <label>access/system/OperationData.h</label>
        <link refid="_operation_data_8h"/>
        <childnode refid="6692" relation="include">
        </childnode>
        <childnode refid="6705" relation="include">
        </childnode>
        <childnode refid="6695" relation="include">
        </childnode>
      </node>
      <node id="6687">
        <label>unordered_map</label>
      </node>
      <node id="6701">
        <label>mutex</label>
      </node>
      <node id="6721">
        <label>storage/AbstractDictionary.h</label>
        <link refid="_abstract_dictionary_8h"/>
        <childnode refid="6692" relation="include">
        </childnode>
        <childnode refid="6696" relation="include">
        </childnode>
        <childnode refid="6702" relation="include">
        </childnode>
        <childnode refid="6695" relation="include">
        </childnode>
      </node>
      <node id="6686">
        <label>access/ScriptOperation.h</label>
        <link refid="_script_operation_8h"/>
        <childnode refid="6687" relation="include">
        </childnode>
        <childnode refid="6688" relation="include">
        </childnode>
      </node>
      <node id="6715">
        <label>thread</label>
      </node>
      <node id="6722">
        <label>storage/DictionaryIterator.h</label>
        <link refid="_dictionary_iterator_8h"/>
        <childnode refid="6723" relation="include">
        </childnode>
        <childnode refid="6724" relation="include">
        </childnode>
      </node>
      <node id="6746">
        <label>helper/Settings.h</label>
        <link refid="_settings_8h"/>
        <childnode refid="6732" relation="include">
        </childnode>
        <childnode refid="6696" relation="include">
        </childnode>
      </node>
      <node id="6747">
        <label>log4cxx/logger.h</label>
      </node>
      <node id="6688">
        <label>access/system/PlanOperation.h</label>
        <link refid="_plan_operation_8h"/>
        <childnode refid="6689" relation="include">
        </childnode>
        <childnode refid="6704" relation="include">
        </childnode>
        <childnode refid="6708" relation="include">
        </childnode>
        <childnode refid="6711" relation="include">
        </childnode>
        <childnode refid="6695" relation="include">
        </childnode>
        <childnode refid="6705" relation="include">
        </childnode>
        <childnode refid="6713" relation="include">
        </childnode>
        <childnode refid="6709" relation="include">
        </childnode>
      </node>
      <node id="6729">
        <label>storage/ColumnMetadata.h</label>
        <link refid="_column_metadata_8h"/>
        <childnode refid="6695" relation="include">
        </childnode>
        <childnode refid="6696" relation="include">
        </childnode>
        <childnode refid="6697" relation="include">
        </childnode>
      </node>
      <node id="6736">
        <label>cstring</label>
      </node>
      <node id="6741">
        <label>storage/BitCompressedVector.h</label>
        <link refid="_bit_compressed_vector_8h"/>
        <childnode refid="6742" relation="include">
        </childnode>
        <childnode refid="6737" relation="include">
        </childnode>
        <childnode refid="6706" relation="include">
        </childnode>
        <childnode refid="6736" relation="include">
        </childnode>
        <childnode refid="6701" relation="include">
        </childnode>
        <childnode refid="6696" relation="include">
        </childnode>
        <childnode refid="6697" relation="include">
        </childnode>
        <childnode refid="6739" relation="include">
        </childnode>
        <childnode refid="6730" relation="include">
        </childnode>
      </node>
      <node id="6725">
        <label>storage/PointerCalculator.h</label>
        <link refid="_pointer_calculator_8h"/>
        <childnode refid="6692" relation="include">
        </childnode>
        <childnode refid="6705" relation="include">
        </childnode>
        <childnode refid="6726" relation="include">
        </childnode>
        <childnode refid="6713" relation="include">
        </childnode>
        <childnode refid="6727" relation="include">
        </childnode>
      </node>
      <node id="6702">
        <label>memory</label>
      </node>
      <node id="6720">
        <label>storage/BaseDictionary.h</label>
        <link refid="_base_dictionary_8h"/>
        <childnode refid="6695" relation="include">
        </childnode>
        <childnode refid="6721" relation="include">
        </childnode>
        <childnode refid="6722" relation="include">
        </childnode>
      </node>
      <node id="6739">
        <label>memory/MallocStrategy.h</label>
        <link refid="_malloc_strategy_8h"/>
        <childnode refid="6740" relation="include">
        </childnode>
        <childnode refid="6706" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehyrise">hyrise</innernamespace>
    <innernamespace refid="namespacehyrise_1_1access">hyrise::access</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_script_operation_8h" kindref="compound">access/ScriptOperation.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_pointer_calculator_8h" kindref="compound">storage/PointerCalculator.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_mutable_vertical_table_8h" kindref="compound">storage/MutableVerticalTable.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_table_builder_8h" kindref="compound">storage/TableBuilder.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_fixed_length_vector_8h" kindref="compound">storage/FixedLengthVector.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_settings_8h" kindref="compound">helper/Settings.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="types_8h" kindref="compound">helper/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;log4cxx/logger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_V8</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;v8.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hyrise<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">access<sp/>{<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>log4cxx::LoggerPtr<sp/>_logger(log4cxx::Logger::getLogger(</highlight><highlight class="stringliteral">&quot;hyrise.access&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_<sp/>=<sp/>QueryParser::registerPlanOperation&lt;ScriptOperation&gt;(</highlight><highlight class="stringliteral">&quot;ScriptOperation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classhyrise_1_1access_1_1_script_operation_1a61780f10631efbbe8fadd2297f7fd249" refkind="member"><highlight class="normal"><ref refid="classhyrise_1_1access_1_1_script_operation_1a61780f10631efbbe8fadd2297f7fd249" kindref="member">ScriptOperation::ScriptOperation</ref>()<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_V8</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">v8::Local&lt;v8::Object&gt;<sp/>wrapAttributeVector(std::shared_ptr&lt;const<sp/>T&gt;<sp/>table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">internal</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>context<sp/>data<sp/>that<sp/>we<sp/>use<sp/>in<sp/>the<sp/>isolate<sp/>data<sp/>per<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Basically<sp/>it<sp/>contains<sp/>a<sp/>map<sp/>of<sp/>all<sp/>available<sp/>tables<sp/>to<sp/>the<sp/>plan<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>given<sp/>keys.<sp/>The<sp/>key<sp/>is<sp/>the<sp/>offset<sp/>in<sp/>this<sp/>table.<sp/>The<sp/>first<sp/>tables<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>list<sp/>are<sp/>always<sp/>the<sp/>input<sp/>tables<sp/>of<sp/>the<sp/>plan<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IsolateContextData<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>std::vector&lt;hyrise::storage::c_atable_ptr_t&gt;<sp/>tables;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>releaseTableSharedPtr(v8::Isolate*<sp/>isolate,<sp/>v8::Persistent&lt;v8::Value&gt;<sp/>persistentObj,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pData)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pspNative<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::shared_ptr&lt;const<sp/>T&gt;*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pData);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pspNative;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Manually<sp/>dispose<sp/>of<sp/>the<sp/>Persistent<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>persistentObj.Dispose(isolate);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>persistentObj.Clear();</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteAllocated(v8::Isolate*<sp/>isolate,<sp/>v8::Persistent&lt;v8::Value&gt;<sp/>persitentObj,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>native<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>native;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>persitentObj.Dispose(isolate);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>persitentObj.Clear();</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">v8::Persistent&lt;v8::Object&gt;<sp/>makePersistent(v8::Isolate<sp/>*isolate,<sp/>v8::Handle&lt;v8::Object&gt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*embedded,<sp/>v8::NearDeathCallback<sp/>callback)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>v8::Persistent&lt;v8::Object&gt;<sp/>persistentObj(<sp/>v8::Persistent&lt;v8::Object&gt;::New(isolate,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>persistentObj.MakeWeak(isolate,<sp/>embedded,<sp/>callback);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>persistentObj;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>LogMessage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>v8::String::Utf8Value<sp/>str(args[0]);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>LOG4CXX_DEBUG(_logger,<sp/>*str);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Undefined();</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>used<sp/>to<sp/>read<sp/>a<sp/>JS<sp/>file<sp/>from<sp/>disk<sp/>into<sp/>a<sp/>std::string<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>name<sp/>The<sp/>name<sp/>/<sp/>relative<sp/>path<sp/>of<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>suffix<sp/>The<sp/>suffix<sp/>of<sp/>the<sp/>file,<sp/>that<sp/>defaults<sp/>to<sp/>&quot;.j&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">std::string<sp/>readScript(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;suffix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.js&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>FILE*<sp/>file<sp/>=<sp/>fopen((<ref refid="class_settings_1a1d30c7fd15c578e94f3c87212c2340da" kindref="member">Settings::getInstance</ref>()-&gt;getScriptPath()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/>suffix).c_str(),<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>fseek(file,<sp/>0,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>ftell(file);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>rewind(file);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>chars<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[size<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>chars[size]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fread(&amp;chars[i],<sp/>1,<sp/>size<sp/>-<sp/>i,<sp/>file));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>read;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>std::string<sp/>result(chars,<sp/>size);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>chars;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation<sp/>of<sp/>the<sp/>helper<sp/>method<sp/>that<sp/>allows<sp/>to<sp/>include<sp/>other<sp/>JavaScript</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>read<sp/>from<sp/>local<sp/>files<sp/>and<sp/>compile<sp/>and<sp/>run<sp/>them<sp/>into<sp/>the<sp/>VM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>Include(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>args.Length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::String::Utf8Value<sp/>str(args[i]);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>js_file;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>js_file<sp/>=<sp/>readScript(*str);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::ThrowException(v8::String::New(e.what()));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(js_file.length()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Handle&lt;v8::String&gt;<sp/>source<sp/>=<sp/>v8::String::New(js_file.c_str());</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Handle&lt;v8::Script&gt;<sp/>script<sp/>=<sp/>v8::Script::Compile(source);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>script-&gt;Run();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Undefined();</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>value<sp/>Id<sp/>for<sp/>the<sp/>Value<sp/>given<sp/>to<sp/>this<sp/>class,<sp/>based<sp/>on<sp/>the<sp/>type<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>argument<sp/>call<sp/>the<sp/>right<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>TableGetValueIdForValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>args[1];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tabId<sp/>=<sp/>args.Length()<sp/>&gt;<sp/>2<sp/>?<sp/>args[2]-&gt;Uint32Value()<sp/>:<sp/>0u;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>wrap-&gt;Value();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tab<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_table" kindref="compound">AbstractTable</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val-&gt;IsNumber())<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>val-&gt;ToNumber();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Integer::New(</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tab-&gt;getValueIdForValue&lt;<ref refid="storage__types_8h_1a72c5f9ba0685142ffc747d0a586a5d8a" kindref="member">hyrise_int_t</ref>&gt;(args[0]-&gt;Uint32Value(),<sp/>val-&gt;IntegerValue(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>tabId<sp/>).valueId</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>val<sp/>==<sp/>string<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::String::Utf8Value<sp/>u(val-&gt;ToString());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Integer::New(</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tab-&gt;getValueIdForValue&lt;<ref refid="storage__types_8h_1af37c27a8a9ec58aee21fbec32a793509" kindref="member">hyrise_string_t</ref>&gt;(args[0]-&gt;Uint32Value(),<sp/>*u,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>tabId<sp/>).valueId</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>the<sp/>wrapped<sp/>functions<sp/>of<sp/>the<sp/>abstract<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>TableGetSize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>wrap-&gt;Value();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_table" kindref="compound">AbstractTable</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr)-&gt;size();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(v8::Integer::New(value));</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation<sp/>that<sp/>returns<sp/>number<sp/>of<sp/>columns<sp/>of<sp/>the<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>TableGetColumnCount(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>wrap-&gt;Value();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_table" kindref="compound">AbstractTable</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr)-&gt;columnCount();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(v8::Integer::New(value));</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Simple<sp/>Converter<sp/>form<sp/>std::string<sp/>to<sp/>v8::String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringToV8String<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>v8::Handle&lt;v8::String&gt;<sp/>New(std::string<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::String::New(a.c_str());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal">};</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Templated<sp/>method<sp/>to<sp/>allow<sp/>easy<sp/>wrapping<sp/>of<sp/>the<sp/>getValue&lt;type&gt;<sp/>method<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>In,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Out&gt;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>TableGetValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>wrap-&gt;Value();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_table" kindref="compound">AbstractTable</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr)-&gt;getValue&lt;In&gt;(args[0]-&gt;Uint32Value(),<sp/>args[1]-&gt;Uint32Value());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(Out::New(value));</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>that<sp/>checks<sp/>if<sp/>the<sp/>object<sp/>has<sp/>a<sp/>property<sp/>set<sp/>that<sp/>is<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_isModifiable.<sp/>This<sp/>property<sp/>defines<sp/>if<sp/>the<sp/>table<sp/>is<sp/>modifiable<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsModifiable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Object&gt;<sp/>&amp;ext)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ext-&gt;Get(v8::String::New(</highlight><highlight class="stringliteral">&quot;_isModifiable&quot;</highlight><highlight class="normal">))-&gt;ToBoolean()-&gt;Value();</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>methods<sp/>to<sp/>allow<sp/>easy<sp/>wrapping<sp/>of<sp/>the<sp/>setValue&lt;type&gt;<sp/>method<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>TableSetValueInt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!IsModifiable(args.This()))<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::ThrowException(v8::String::New(</highlight><highlight class="stringliteral">&quot;Table<sp/>is<sp/>not<sp/>modifiable.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>wrap-&gt;Value();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_table" kindref="compound">AbstractTable</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr)-&gt;setValue&lt;hyrise_int_t&gt;(args[0]-&gt;Uint32Value(),<sp/>args[1]-&gt;Uint32Value(),args[2]-&gt;Int32Value());</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(v8::Undefined());</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>TableSetValueFloat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!IsModifiable(args.This()))<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::ThrowException(v8::String::New(</highlight><highlight class="stringliteral">&quot;Table<sp/>is<sp/>not<sp/>modifiable.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>wrap-&gt;Value();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_table" kindref="compound">AbstractTable</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr)-&gt;setValue&lt;hyrise_float_t&gt;(args[0]-&gt;Uint32Value(),<sp/>args[1]-&gt;Uint32Value(),v8::Local&lt;v8::Number&gt;::Cast(args[2])-&gt;Value());</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(v8::Undefined());</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>TableSetValueString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!IsModifiable(args.This()))<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::ThrowException(v8::String::New(</highlight><highlight class="stringliteral">&quot;Table<sp/>is<sp/>not<sp/>modifiable.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>wrap-&gt;Value();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>v8::String::Utf8Value<sp/>u(args[2]-&gt;ToString());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_table" kindref="compound">AbstractTable</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr)-&gt;setValue&lt;hyrise_string_t&gt;(args[0]-&gt;Uint32Value(),<sp/>args[1]-&gt;Uint32Value(),<ref refid="storage__types_8h_1af37c27a8a9ec58aee21fbec32a793509" kindref="member">hyrise_string_t</ref>(*u));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(v8::Undefined());</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation<sp/>of<sp/>the<sp/>function<sp/>that<sp/>calls<sp/>AbstractTable-&gt;resize()<sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>is<sp/>required<sp/>for<sp/>all<sp/>cases<sp/>where<sp/>new<sp/>rows<sp/>are<sp/>appended<sp/>to<sp/>the<sp/>table,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>resize<sp/>is<sp/>not<sp/>called<sp/>the<sp/>table<sp/>will<sp/>not<sp/>know<sp/>how<sp/>many<sp/>rows<sp/>it<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allocate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>TableResize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!IsModifiable(args.This()))<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::ThrowException(v8::String::New(</highlight><highlight class="stringliteral">&quot;Table<sp/>is<sp/>not<sp/>modifiable.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>wrap-&gt;Value();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tab<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_table" kindref="compound">AbstractTable</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>casted<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">MutableVerticalTable*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tab);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(casted)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>casted-&gt;<ref refid="class_abstract_table_1a92d707d52cdeabfc3cf254693b913a81" kindref="member">resize</ref>(args[0]-&gt;Uint32Value());</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>casted2<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_table" kindref="compound">Table&lt;&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tab);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>casted2-&gt;<ref refid="class_table_1a2a48728158c6b6ecb0bcae58be4895c2" kindref="member">resize</ref>(args[0]-&gt;Uint32Value());</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(v8::Undefined());</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>object<sp/>of<sp/>the<sp/>value<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>TableGetValueId(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>wrap-&gt;Value();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vid<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_table" kindref="compound">AbstractTable</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr)-&gt;getValueId(args[0]-&gt;Uint32Value(),<sp/>args[1]-&gt;Uint32Value());</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>v8::Handle&lt;v8::Object&gt;<sp/>templ<sp/>=<sp/>v8::Object::New();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;valueId&quot;</highlight><highlight class="normal">),<sp/>v8::Integer::New(vid.valueId));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;tableId&quot;</highlight><highlight class="normal">),<sp/>v8::Integer::New(vid.table));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>templ;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>value<sp/>ID<sp/>of<sp/>the<sp/>value<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>TableGetValueIdV(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>wrap-&gt;Value();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vid<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_table" kindref="compound">AbstractTable</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr)-&gt;getValueId(args[0]-&gt;Uint32Value(),<sp/>args[1]-&gt;Uint32Value()).valueId;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Number::New(vid);</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>value<sp/>ID<sp/>of<sp/>the<sp/>value<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>TableGetValueIdVRange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>args[0]-&gt;ToInteger()-&gt;Value();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>args[1]-&gt;ToInteger()-&gt;Value();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stop<sp/>=<sp/><sp/>args[2]-&gt;ToInteger()-&gt;Value();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>wrap-&gt;Value();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tab<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_table" kindref="compound">AbstractTable</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data<sp/>=<sp/>v8::Object::New();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vids<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;value_id_t&gt;;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=row,<sp/>j=0;<sp/>i<sp/>&lt;<sp/>stop;<sp/>++i,<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vid<sp/>=<sp/>tab-&gt;getValueId(col,<sp/>i).valueId;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>vids-&gt;push_back(vid);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>wrap<sp/>the<sp/>data<sp/>in<sp/>a<sp/>persistent<sp/>object<sp/>to<sp/>be<sp/>able<sp/>to<sp/>free<sp/>the<sp/>vids<sp/>once<sp/>we<sp/>are<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>data-&gt;SetIndexedPropertiesToExternalArrayData(<sp/>&amp;(vids-&gt;at(0)),<sp/>v8::kExternalUnsignedIntArray,<sp/>(stop-row));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>persistent<sp/>=<sp/>makePersistent(isolate,<sp/>data,<sp/>vids,<sp/>deleteAllocated&lt;std::vector&lt;value_id_t&gt;&gt;);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>persistent;</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>AttributeVectorGetSize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_attribute_vector" kindref="compound">AbstractAttributeVector</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wrap-&gt;Value());</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>casted<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_fixed_length_vector" kindref="compound">FixedLengthVector&lt;value_id_t&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>casted-&gt;<ref refid="class_fixed_length_vector_1ac787f4d12ef63811082de03f84636e3f" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Integer::New(value);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>AttributeVectorGet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_attribute_vector" kindref="compound">AbstractAttributeVector</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wrap-&gt;Value());</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>casted<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_fixed_length_vector" kindref="compound">FixedLengthVector&lt;value_id_t&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>args[0]-&gt;ToInteger()-&gt;Value();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>args[1]-&gt;ToInteger()-&gt;Value();</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><ref refid="storage__types_8h_1a2552a37cd3427c39d92cb8fd23c90408" kindref="member">value_id_t</ref><sp/>value<sp/>=<sp/>casted-&gt;<ref refid="class_fixed_length_vector_1a1a72f3e46973e00e1be98f8c5da5bc16" kindref="member">get</ref>(col,<sp/>row);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Integer::New(value);</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>AttributeVectorGetRange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_attribute_vector" kindref="compound">AbstractAttributeVector</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wrap-&gt;Value());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>casted<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_fixed_length_vector" kindref="compound">FixedLengthVector&lt;value_id_t&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>args[0]-&gt;ToInteger()-&gt;Value();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>args[1]-&gt;ToInteger()-&gt;Value();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stop<sp/>=<sp/>args[2]-&gt;ToInteger()-&gt;Value();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data<sp/>=<sp/>v8::Object::New();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vids<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;value_id_t&gt;();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=row;<sp/>i<sp/>&lt;<sp/>stop;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vid<sp/>=<sp/>casted-&gt;get(col,<sp/>i);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>vids-&gt;push_back(vid);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>we<sp/>have<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>data<sp/>has<sp/>no<sp/>longer<sp/>lifespan<sp/>than<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>data-&gt;SetIndexedPropertiesToExternalArrayData(<sp/>vids-&gt;data(),<sp/>v8::kExternalUnsignedIntArray,<sp/>(stop-row));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(data);</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Represents<sp/>the<sp/>Internal<sp/>id<sp/>of<sp/>the<sp/>table<sp/>in<sp/>the<sp/>input<sp/>list<sp/>of<sp/>the<sp/>plan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>GetInternalId(v8::Local&lt;v8::String&gt;<sp/>property,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::AccessorInfo<sp/>&amp;info)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Integer&gt;::Cast(info.Data());</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="390"><highlight class="normal">v8::Local&lt;v8::Object&gt;<sp/>wrapAttributeVector(std::shared_ptr&lt;T&gt;<sp/>table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">internal</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>v8::Handle&lt;v8::ObjectTemplate&gt;<sp/>templ<sp/>=<sp/>v8::ObjectTemplate::New();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>templ-&gt;SetInternalFieldCount(1);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(AttributeVectorGetSize));</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;get&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(AttributeVectorGet));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;getRange&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(AttributeVectorGetRange));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>templ-&gt;SetAccessor(v8::String::New(</highlight><highlight class="stringliteral">&quot;_internalId&quot;</highlight><highlight class="normal">),<sp/>GetInternalId,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>v8::Integer::New(</highlight><highlight class="keyword">internal</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj<sp/>=<sp/>templ-&gt;NewInstance();</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>obj-&gt;SetInternalField(0,<sp/>v8::External::New(table.get()));</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(obj);</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>TableGetAttributeVectors(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap<sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(args.This()-&gt;GetInternalField(0));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>wrap-&gt;Value();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tab<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_abstract_table" kindref="compound">AbstractTable</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>attr_vectors<sp/>=<sp/>tab-&gt;<ref refid="class_abstract_table_1a3467bc6159aa361db993c3fc56584789" kindref="member">getAttributeVectors</ref>(args[0]-&gt;ToInteger()-&gt;Value());</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>v8::Array::New(attr_vectors.size());</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;av<sp/>:<sp/>attr_vectors)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj<sp/>=<sp/>v8::Object::New();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>obj-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;attribute_vector&quot;</highlight><highlight class="normal">),<sp/>wrapAttributeVector&lt;AbstractAttributeVector&gt;(av.attribute_vector,<sp/>i));</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>obj-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;attribute_offset&quot;</highlight><highlight class="normal">),<sp/>v8::Number::New(av.attribute_offset));</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;Set(i++,<sp/>obj);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Basic<sp/>function<sp/>to<sp/>wrap<sp/>an<sp/>abstract<sp/>table<sp/>and<sp/>expose<sp/>the<sp/>main<sp/>methods,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>most<sp/>important<sp/>methods<sp/>are<sp/>to<sp/>access<sp/>the<sp/>number<sp/>of<sp/>fields,<sp/>size<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>valueId<sp/>and<sp/>values<sp/>at<sp/>a<sp/>given<sp/>set<sp/>of<sp/>column<sp/>row<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">v8::Local&lt;v8::Object&gt;<sp/>wrapTable(std::shared_ptr&lt;const<sp/>T&gt;<sp/>table,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">internal</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>v8::Handle&lt;v8::ObjectTemplate&gt;<sp/>templ<sp/>=<sp/>v8::ObjectTemplate::New();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>templ-&gt;SetInternalFieldCount(1);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>wrapped<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(TableGetSize));</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;columnCount&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(TableGetColumnCount));</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;valueId&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(TableGetValueId));</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;valueIdV&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(TableGetValueIdV));</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;valueIdVRange&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(TableGetValueIdVRange));</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;getValueInt&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(TableGetValue&lt;hyrise_int_t,<sp/>v8::Number&gt;));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;getValueFloat&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(TableGetValue&lt;hyrise_float_t,<sp/>v8::Number&gt;));</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;getValueString&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(TableGetValue&lt;hyrise_string_t,<sp/>StringToV8String&gt;));</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;setValueInt&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(TableSetValueInt));</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;setValueFloat&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(TableSetValueFloat));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;setValueString&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(TableSetValueString));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;resize&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(TableResize));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;getAttributeVectors&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(TableGetAttributeVectors));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>ValueIds<sp/>to<sp/>Values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>templ-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;getValueIdForValue&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(TableGetValueIdForValue));</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>templ-&gt;SetAccessor(v8::String::New(</highlight><highlight class="stringliteral">&quot;_internalId&quot;</highlight><highlight class="normal">),<sp/>GetInternalId,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>v8::Integer::New(</highlight><highlight class="keyword">internal</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj<sp/>=<sp/>templ-&gt;NewInstance();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>obj-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;_isModifiable&quot;</highlight><highlight class="normal">),<sp/>v8::Boolean::New(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>obj-&gt;SetInternalField(0,<sp/>v8::External::New(const_cast&lt;T*&gt;(table.get())));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>persistentObj<sp/>=<sp/>makePersistent(isolate,<sp/>obj,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>T&gt;(table),<sp/>releaseTableSharedPtr&lt;T&gt;);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(persistentObj);</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>pointer<sp/>calculator<sp/>based<sp/>on<sp/>the<sp/>input,<sp/>the<sp/>function<sp/>has<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arguments,<sp/>first<sp/>the<sp/>table<sp/>and<sp/>second<sp/>the<sp/>position<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>createPointerCalculator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>IsolateContextData<sp/>*isoContext<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">IsolateContextData*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(isolate-&gt;GetData());</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>base<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>v8::Local&lt;v8::Object&gt;::Cast(args[0]);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">internal</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;Get(v8::String::New(</highlight><highlight class="stringliteral">&quot;_internalId&quot;</highlight><highlight class="normal">))-&gt;Uint32Value();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>JS<sp/>Array<sp/>and<sp/>build<sp/>a<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>positions<sp/>=<sp/>v8::Local&lt;v8::Array&gt;::Cast(args[1]);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>positions-&gt;Length();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="storage__types_8h_1a543d59ef56384af4a7af9aa551bc6825" kindref="member">pos_list_t</ref>;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>pos-&gt;push_back(positions-&gt;Get(v8::Integer::New(i))-&gt;Uint32Value());</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>table<sp/>based<sp/>from<sp/>the<sp/>position<sp/>list<sp/>and<sp/>input<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>std::make_shared&lt;PointerCalculator&gt;(isoContext-&gt;tables[</highlight><highlight class="keyword">internal</highlight><highlight class="normal">],<sp/>pos);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>isoContext-&gt;tables.push_back(result);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj<sp/>=<sp/>wrapTable&lt;PointerCalculator&gt;(result,<sp/>isoContext-&gt;tables.size()-1);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(obj);</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>empty<sp/>modifiable<sp/>based<sp/>on<sp/>the<sp/>input,<sp/>the<sp/>function<sp/>has<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arguments,<sp/>first<sp/>the<sp/>table<sp/>and<sp/>second<sp/>the<sp/>position<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>CopyStructureModifiable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>IsolateContextData<sp/>*isoContext<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">IsolateContextData*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(isolate-&gt;GetData());</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>base<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>v8::Local&lt;v8::Object&gt;::Cast(args[0]);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">internal</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;Get(v8::String::New(</highlight><highlight class="stringliteral">&quot;_internalId&quot;</highlight><highlight class="normal">))-&gt;Uint32Value();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>table<sp/>based<sp/>from<sp/>the<sp/>position<sp/>list<sp/>and<sp/>input<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>isoContext-&gt;tables[</highlight><highlight class="keyword">internal</highlight><highlight class="normal">]-&gt;copy_structure_modifiable();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>isoContext-&gt;tables.push_back(result);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj<sp/>=<sp/>wrapTable&lt;AbstractTable&gt;(result,<sp/>isoContext-&gt;tables.size()-1);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>obj-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;_isModifiable&quot;</highlight><highlight class="normal">),<sp/>v8::Boolean::New(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(obj);</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Build<sp/>a<sp/>new<sp/>table<sp/>using<sp/>the<sp/>table<sp/>builder<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>arguments<sp/>are<sp/>a<sp/>list<sp/>of<sp/>the<sp/>field<sp/>names<sp/>with<sp/>types<sp/>and<sp/>names,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>argument<sp/>are<sp/>the<sp/>groups<sp/>of<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>BuildTable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>IsolateContextData<sp/>*isoContext<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">IsolateContextData*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(isolate-&gt;GetData());</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!args[0]-&gt;IsArray()<sp/>&amp;&amp;<sp/>!args[1]-&gt;IsArray())<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::ThrowException(v8::String::New(</highlight><highlight class="stringliteral">&quot;Arguments<sp/>must<sp/>be<sp/>two<sp/>arrays<sp/>with<sp/>field<sp/>decls<sp/>and<sp/>groups&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fields<sp/>=<sp/>v8::Local&lt;v8::Array&gt;::Cast(args[0]);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>groups<sp/>=<sp/>v8::Local&lt;v8::Array&gt;::Cast(args[1]);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>TableBuilder::param_list<sp/>list;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>fields-&gt;Length();<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>v8::Local&lt;v8::Object&gt;::Cast(fields-&gt;Get(i));</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>list.append().set_type(*v8::String::Utf8Value(tmp-&gt;Get(v8::String::New(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">)))).set_name(</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*v8::String::Utf8Value(tmp-&gt;Get(v8::String::New(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>groups-&gt;Length();<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>v8::Local&lt;v8::Integer&gt;::Cast(groups-&gt;Get(i));</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>list.appendGroup(tmp-&gt;Value());</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref><sp/><sp/>result<sp/>=<sp/>TableBuilder::build(list);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>isoContext-&gt;tables.push_back(result);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj<sp/>=<sp/>wrapTable&lt;AbstractTable&gt;(result,<sp/>isoContext-&gt;tables.size()-1);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>obj-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;_isModifiable&quot;</highlight><highlight class="normal">),<sp/>v8::Boolean::New(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(obj);</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>vertical<sp/>table<sp/>based<sp/>on<sp/>the<sp/>number<sp/>of<sp/>arguments<sp/>in<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>list.<sp/>We<sp/>use<sp/>the<sp/>internal<sp/>id<sp/>of<sp/>the<sp/>object<sp/>to<sp/>lookup<sp/>all<sp/>tables<sp/>in<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//<sp/>global<sp/>table<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal">v8::Handle&lt;v8::Value&gt;<sp/>BuildVerticalTable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Arguments&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>IsolateContextData<sp/>*isoContext<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">IsolateContextData*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(isolate-&gt;GetData());</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>std::vector&lt;hyrise::storage::atable_ptr_t&gt;<sp/>tabs;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>args.Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>base<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>v8::Local&lt;v8::Object&gt;::Cast(args[i]);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">internal</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;Get(v8::String::New(</highlight><highlight class="stringliteral">&quot;_internalId&quot;</highlight><highlight class="normal">))-&gt;Uint32Value();</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>tabs.push_back(std::const_pointer_cast&lt;AbstractTable&gt;(isoContext-&gt;tables[</highlight><highlight class="keyword">internal</highlight><highlight class="normal">]));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>table<sp/>based<sp/>from<sp/>the<sp/>position<sp/>list<sp/>and<sp/>input<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>std::make_shared&lt;MutableVerticalTable&gt;(tabs);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>isoContext-&gt;tables.push_back(result);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj<sp/>=<sp/>wrapTable&lt;AbstractTable&gt;(result,<sp/>isoContext-&gt;tables.size()-1);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>obj-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;_isModifiable&quot;</highlight><highlight class="normal">),<sp/>v8::Boolean::New(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(obj);</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>goal<sp/>of<sp/>the<sp/>result<sp/>helpers<sp/>is<sp/>to<sp/>provide<sp/>the<sp/>necessary<sp/>functions<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>present<sp/>a<sp/>usable<sp/>result.<sp/>This<sp/>includes<sp/>basically<sp/>the<sp/>following</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment">//<sp/>possibilities:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*<sp/>create<sp/>a<sp/>PC<sp/>with<sp/>a<sp/>pos<sp/>List</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*<sp/>create<sp/>a<sp/>new<sp/>modifiable<sp/>table<sp/>based<sp/>on<sp/>the<sp/>old<sp/>table<sp/>meta<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*<sp/>create<sp/>a<sp/>new<sp/>modifiable<sp/>table<sp/>using<sp/>the<sp/>table<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*<sp/>create<sp/>a<sp/>combination<sp/>as<sp/>a<sp/>vertical<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScriptOperation::createResultHelpers(v8::Persistent&lt;v8::Context&gt;<sp/>&amp;context)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>global<sp/>=<sp/>context-&gt;Global();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>global-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;createPointerCalculator&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(createPointerCalculator)-&gt;GetFunction());</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>global-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;copyStructureModifiable&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(CopyStructureModifiable)-&gt;GetFunction());</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>global-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;buildTable&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(BuildTable)-&gt;GetFunction());</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>global-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;buildVerticalTable&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(BuildVerticalTable)-&gt;GetFunction());</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>global-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;include&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(Include)-&gt;GetFunction());</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>global-&gt;Set(v8::String::New(</highlight><highlight class="stringliteral">&quot;log&quot;</highlight><highlight class="normal">),<sp/>v8::FunctionTemplate::New(LogMessage)-&gt;GetFunction());</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>method<sp/>that<sp/>wraps<sp/>the<sp/>input<sp/>of<sp/>the<sp/>plan<sp/>operation<sp/>into<sp/>table<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>provide<sp/>the<sp/>necessary<sp/>fields<sp/>in<sp/>the<sp/>JS<sp/>world.<sp/>The<sp/>most<sp/>important</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>methods<sp/>are<sp/>wrapped<sp/>and<sp/>available<sp/>for<sp/>callers<sp/>in<sp/>JS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal">v8::Handle&lt;v8::Array&gt;<sp/>ScriptOperation::prepareInputs()<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>v8::Handle&lt;v8::Array&gt;<sp/>result<sp/>=<sp/>v8::Array::New(<ref refid="classhyrise_1_1access_1_1_plan_operation_1aecedc322d6f58070da10f0706ffce779" kindref="member" tooltip="Containers to store and handle input/output or rather result data. ">input</ref>.<ref refid="classhyrise_1_1access_1_1_operation_data_1a3c2e95ad63b007cdb87d96590134d6d2" kindref="member" tooltip="Overall number of passed resources. ">size</ref>());</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>out<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><ref refid="classhyrise_1_1access_1_1_plan_operation_1aecedc322d6f58070da10f0706ffce779" kindref="member" tooltip="Containers to store and handle input/output or rather result data. ">input</ref>.<ref refid="classhyrise_1_1access_1_1_operation_data_1a3c2e95ad63b007cdb87d96590134d6d2" kindref="member" tooltip="Overall number of passed resources. ">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>evil<sp/>wrapper<sp/>handling<sp/>for<sp/>our<sp/>const<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;Set(i,<sp/>wrapTable&lt;AbstractTable&gt;(<ref refid="classhyrise_1_1access_1_1_plan_operation_1aecedc322d6f58070da10f0706ffce779" kindref="member" tooltip="Containers to store and handle input/output or rather result data. ">input</ref>.<ref refid="group__deprecated_access_1ga69968d5ab56729a2e8ec54208a275b45" kindref="member">getTable</ref>(i),<sp/>i));</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>value<sp/>through<sp/>Close.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(result);</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">v8::Handle&lt;v8::Object&gt;<sp/>ScriptOperation::prepareParameters()<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);<sp/><sp/></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>v8::Handle&lt;v8::Object&gt;<sp/>templ<sp/>=<sp/>v8::Object::New();</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>k<sp/>:<sp/><ref refid="classhyrise_1_1access_1_1_script_operation_1a82aaed3e4130a6af48177b4dc57fd6cd" kindref="member">_parameters</ref>)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kcstr<sp/>=<sp/>k.first.data();</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>vcstr<sp/>=<sp/>k.second.data();</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>templ-&gt;Set(v8::String::New(kcstr,<sp/>k.first.size()),<sp/>v8::String::New(vcstr,<sp/>k.second.size()));</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_scope.Close(templ);</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="639"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640" refid="classhyrise_1_1access_1_1_script_operation_1aff8cc8a610fb4e44f643bdd6bec7073d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhyrise_1_1access_1_1_script_operation_1aff8cc8a610fb4e44f643bdd6bec7073d" kindref="member">ScriptOperation::executePlanOperation</ref>()<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_V8</highlight></codeline>
<codeline lineno="643"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>v8::Isolate::GetCurrent();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isolate<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>isolate<sp/>=<sp/>v8::Isolate::New();</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>isolate-&gt;Enter();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>data<sp/>in<sp/>the<sp/>isolate<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isoContext<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>IsolateContextData();</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>t<sp/>:<sp/><ref refid="classhyrise_1_1access_1_1_plan_operation_1aecedc322d6f58070da10f0706ffce779" kindref="member" tooltip="Containers to store and handle input/output or rather result data. ">input</ref>.<ref refid="classhyrise_1_1access_1_1_operation_data_1a5dc0171957f6e878d2072ac4a757d941" kindref="member" tooltip="Returns a vector of resources of type type T. ">allOf</ref>&lt;<ref refid="class_abstract_table" kindref="compound">AbstractTable</ref>&gt;())<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>isoContext-&gt;tables.push_back(t);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>isolate-&gt;SetData(isoContext);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>stack-allocated<sp/>handle<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handle_scope(isolate);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>v8::Persistent&lt;v8::Context&gt;<sp/>context<sp/>=<sp/>v8::Context::New();</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enter<sp/>the<sp/>created<sp/>context<sp/>for<sp/>compiling<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>running<sp/>the<sp/>script.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>v8::Context::Scope<sp/>context_scope(context);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>string<sp/>containing<sp/>the<sp/>JavaScript<sp/>source<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>content<sp/>=<sp/>readScript(<ref refid="classhyrise_1_1access_1_1_script_operation_1a584a201b9dea0044157b195548b6dc47" kindref="member">_scriptName</ref>);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(content.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Script<sp/>is<sp/>empty,<sp/>cannot<sp/>run<sp/>empty<sp/>script:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classhyrise_1_1access_1_1_script_operation_1a584a201b9dea0044157b195548b6dc47" kindref="member">_scriptName</ref>);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>v8::Handle&lt;v8::String&gt;<sp/>source<sp/>=<sp/>v8::String::New(content.c_str(),<sp/>content.size());</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>Helper<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>createResultHelpers(context);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compile<sp/>the<sp/>source<sp/>code.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::TryCatch<sp/>trycatch;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Handle&lt;v8::Script&gt;<sp/>script<sp/>=<sp/>v8::Script::Compile(source);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(script.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(*v8::String::Utf8Value(trycatch.Exception()));</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check<sp/>=<sp/>script-&gt;Run();</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(check.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(*v8::String::Utf8Value(trycatch.Exception()));</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Once<sp/>the<sp/>source<sp/>is<sp/>compiled<sp/>there<sp/>must<sp/>be<sp/>a<sp/>method<sp/>available<sp/>whis<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>hyrise_run_op</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/>fun<sp/>=<sp/>v8::Local&lt;v8::Function&gt;::Cast(context-&gt;Global()-&gt;Get(v8::String::New(</highlight><highlight class="stringliteral">&quot;hyrise_run_op&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fun-&gt;IsFunction())<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>plan<sp/>op<sp/>with<sp/>the<sp/>inputs<sp/>we<sp/>converted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v8::Handle&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{prepareInputs(),<sp/>prepareParameters()};</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>v8::Local&lt;v8::Object&gt;::Cast(fun-&gt;Call(fun,<sp/>2,<sp/>argv));</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(*v8::String::Utf8Value(trycatch.Exception()));</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unwrap<sp/>the<sp/>data<sp/>and<sp/>extract<sp/>the<sp/>shared_ptr<sp/>for<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">internal</highlight><highlight class="normal"><sp/>=<sp/>result-&gt;Get(v8::String::New(</highlight><highlight class="stringliteral">&quot;_internalId&quot;</highlight><highlight class="normal">))-&gt;Uint32Value();</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhyrise_1_1access_1_1_plan_operation_1aac92e842153df9a9ae7e548ac7602009" kindref="member">addResult</ref>(isoContext-&gt;tables[</highlight><highlight class="keyword">internal</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>isolation<sp/>context<sp/>data<sp/>we<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>isoContext;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Dispose<sp/>the<sp/>persistent<sp/>context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>context.Dispose(isolate);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight></codeline>
<codeline lineno="715"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718" refid="classhyrise_1_1access_1_1_script_operation_1aec93f619e506906c2b68f74d42c34858" refkind="member"><highlight class="normal">std::shared_ptr&lt;PlanOperation&gt;<sp/><ref refid="classhyrise_1_1access_1_1_script_operation_1aec93f619e506906c2b68f74d42c34858" kindref="member">ScriptOperation::parse</ref>(Json::Value<sp/>&amp;data)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>op<sp/>=<sp/>std::make_shared&lt;ScriptOperation&gt;();</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>op-&gt;setScriptName(data[</highlight><highlight class="stringliteral">&quot;script&quot;</highlight><highlight class="normal">].asString());</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>v<sp/>:<sp/>data.getMemberNames())<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;_parameters[v]<sp/>=<sp/>data[v].asString();</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op;</highlight></codeline>
<codeline lineno="728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal">}}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/lanice/develop/epic/hyrise/src/lib/access/ScriptOperation.cpp"/>
  </compounddef>
</doxygen>
