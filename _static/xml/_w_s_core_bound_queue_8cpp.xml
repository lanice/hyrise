<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="_w_s_core_bound_queue_8cpp" kind="file">
    <compoundname>WSCoreBoundQueue.cpp</compoundname>
    <includes refid="_w_s_core_bound_queue_8h" local="yes">WSCoreBoundQueue.h</includes>
    <incdepgraph>
      <node id="19235">
        <label>atomic</label>
      </node>
      <node id="19228">
        <label>queue</label>
      </node>
      <node id="19219">
        <label>AbstractTaskScheduler.h</label>
        <link refid="_abstract_task_scheduler_8h"/>
        <childnode refid="19220" relation="include">
        </childnode>
        <childnode refid="19226" relation="include">
        </childnode>
        <childnode refid="19223" relation="include">
        </childnode>
        <childnode refid="19230" relation="include">
        </childnode>
        <childnode refid="19231" relation="include">
        </childnode>
        <childnode refid="19229" relation="include">
        </childnode>
        <childnode refid="19232" relation="include">
        </childnode>
      </node>
      <node id="19226">
        <label>taskscheduler/AbstractTaskQueue.h</label>
        <link refid="_abstract_task_queue_8h"/>
        <childnode refid="19223" relation="include">
        </childnode>
        <childnode refid="19222" relation="include">
        </childnode>
        <childnode refid="19227" relation="include">
        </childnode>
        <childnode refid="19228" relation="include">
        </childnode>
        <childnode refid="19224" relation="include">
        </childnode>
        <childnode refid="19229" relation="include">
        </childnode>
        <childnode refid="19220" relation="include">
        </childnode>
      </node>
      <node id="19225">
        <label>string</label>
      </node>
      <node id="19230">
        <label>unordered_set</label>
      </node>
      <node id="19215">
        <label>WSCoreBoundQueue.h</label>
        <link refid="_w_s_core_bound_queue_8h"/>
        <childnode refid="19216" relation="include">
        </childnode>
        <childnode refid="19217" relation="include">
        </childnode>
        <childnode refid="19234" relation="include">
        </childnode>
      </node>
      <node id="19233">
        <label>hwloc.h</label>
      </node>
      <node id="19214">
        <label>src/lib/taskscheduler/WSCoreBoundQueue.cpp</label>
        <link refid="WSCoreBoundQueue.cpp"/>
        <childnode refid="19215" relation="include">
        </childnode>
      </node>
      <node id="19224">
        <label>condition_variable</label>
      </node>
      <node id="19217">
        <label>WSCoreBoundQueuesScheduler.h</label>
        <link refid="_w_s_core_bound_queues_scheduler_8h"/>
        <childnode refid="19218" relation="include">
        </childnode>
        <childnode refid="19234" relation="include">
        </childnode>
      </node>
      <node id="19221">
        <label>vector</label>
      </node>
      <node id="19234">
        <label>AbstractCoreBoundQueue.h</label>
        <link refid="_abstract_core_bound_queue_8h"/>
        <childnode refid="19226" relation="include">
        </childnode>
        <childnode refid="19235" relation="include">
        </childnode>
      </node>
      <node id="19218">
        <label>AbstractCoreBoundQueuesScheduler.h</label>
        <link refid="_abstract_core_bound_queues_scheduler_8h"/>
        <childnode refid="19219" relation="include">
        </childnode>
        <childnode refid="19234" relation="include">
        </childnode>
        <childnode refid="19235" relation="include">
        </childnode>
      </node>
      <node id="19231">
        <label>iostream</label>
      </node>
      <node id="19216">
        <label>deque</label>
      </node>
      <node id="19222">
        <label>mutex</label>
      </node>
      <node id="19227">
        <label>thread</label>
      </node>
      <node id="19232">
        <label>helper/HwlocHelper.h</label>
        <link refid="_hwloc_helper_8h"/>
        <childnode refid="19233" relation="include">
        </childnode>
        <childnode refid="19221" relation="include">
        </childnode>
      </node>
      <node id="19229">
        <label>log4cxx/logger.h</label>
      </node>
      <node id="19223">
        <label>memory</label>
      </node>
      <node id="19220">
        <label>taskscheduler/Task.h</label>
        <link refid="_task_8h"/>
        <childnode refid="19221" relation="include">
        </childnode>
        <childnode refid="19222" relation="include">
        </childnode>
        <childnode refid="19223" relation="include">
        </childnode>
        <childnode refid="19224" relation="include">
        </childnode>
        <childnode refid="19225" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>WSCoreBoundQueue.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Apr<sp/>4,<sp/>2013</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>jwust</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_w_s_core_bound_queue_8h" kindref="compound">WSCoreBoundQueue.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="class_w_s_core_bound_queue_1aaeb2d68d0a121e2018d723a956fdd03d" refkind="member"><highlight class="normal"><ref refid="class_w_s_core_bound_queue_1aaeb2d68d0a121e2018d723a956fdd03d" kindref="member">WSCoreBoundQueue::WSCoreBoundQueue</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>core,<sp/><ref refid="class_w_s_core_bound_queues_scheduler" kindref="compound">WSCoreBoundQueuesScheduler</ref><sp/>*scheduler):<sp/><ref refid="class_abstract_core_bound_queue" kindref="compound">AbstractCoreBoundQueue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_core_bound_queue_1ac95d664429941c1498f375e957646137" kindref="member">_core</ref><sp/>=<sp/>core;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><ref refid="class_w_s_core_bound_queue_1a878e6026edf03c5fded17fdba1c49a51" kindref="member">_scheduler</ref><sp/>=<sp/>scheduler;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_core_bound_queue_1a33d99e5749f26892bb2fc917adc52eef" kindref="member">launchThread</ref>(<ref refid="class_abstract_core_bound_queue_1ac95d664429941c1498f375e957646137" kindref="member">_core</ref>);</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="class_w_s_core_bound_queue_1ad2c13174e5143f6f148a60bcdb4d6655" refkind="member"><highlight class="normal"><ref refid="class_w_s_core_bound_queue_1ad2c13174e5143f6f148a60bcdb4d6655" kindref="member">WSCoreBoundQueue::~WSCoreBoundQueue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_abstract_core_bound_queue_1a85ec39df5b0715322bd2377d131f61c2" kindref="member">_thread</ref><sp/>!=<sp/>NULL)<sp/><ref refid="class_w_s_core_bound_queue_1acdc16e62b97344c4751f83d3536f517e" kindref="member">stopQueue</ref>();</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="class_w_s_core_bound_queue_1a571622b487646821eeb82eb9035acb0e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_w_s_core_bound_queue_1a571622b487646821eeb82eb9035acb0e" kindref="member">WSCoreBoundQueue::executeTask</ref>()<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//infinite<sp/>thread<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//block<sp/>protected<sp/>by<sp/>_threadStatusMutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_abstract_core_bound_queue_1ae3052e927bc180940af268739d3cd156" kindref="member">_status</ref><sp/>==<sp/><ref refid="class_abstract_task_queue_1a181ee22624d1fe15e03534b049ca7447ab5b55d5fec71f3976fb1767477475a69" kindref="member">TO_STOP</ref>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lock<sp/>queue<sp/>to<sp/>get<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>ul(<ref refid="class_abstract_core_bound_queue_1ab57cf781e1daa5985057b5f1a471b5d2" kindref="member">_queueMutex</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Task&gt;<sp/>task;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>task<sp/>and<sp/>execute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_w_s_core_bound_queue_1aa1e941adb122967e622fad9ebf1c83d3" kindref="member">_runQueue</ref>.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>first<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>=<sp/><ref refid="class_w_s_core_bound_queue_1aa1e941adb122967e622fad9ebf1c83d3" kindref="member">_runQueue</ref>.front();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_w_s_core_bound_queue_1aa1e941adb122967e622fad9ebf1c83d3" kindref="member">_runQueue</ref>.pop_front();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ul.unlock();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>task<sp/>in<sp/>runQueue<sp/>-&gt;<sp/>try<sp/>to<sp/>steal<sp/>task<sp/>from<sp/>other<sp/>queue,<sp/>otherwise<sp/>sleep<sp/>and<sp/>wait<sp/>for<sp/>new<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>steal<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ul.unlock();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>=<sp/><ref refid="class_w_s_core_bound_queue_1a975ad2289aec9bab2a2a515a452ecc43" kindref="member">stealTasks</ref>();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!task){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ul.lock();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>queue<sp/>still<sp/>empty<sp/>go<sp/>to<sp/>sleep<sp/>and<sp/>wait<sp/>until<sp/>new<sp/>tasks<sp/>have<sp/>been<sp/>arrived</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_w_s_core_bound_queue_1aa1e941adb122967e622fad9ebf1c83d3" kindref="member">_runQueue</ref>.size()<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>thread<sp/>is<sp/>about<sp/>to<sp/>stop,<sp/>break<sp/>execution<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_abstract_core_bound_queue_1ae3052e927bc180940af268739d3cd156" kindref="member">_status</ref><sp/>!=<sp/><ref refid="class_abstract_task_queue_1a181ee22624d1fe15e03534b049ca7447abbf46a2afa080c3f9d355c407beaa902" kindref="member">RUN</ref>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_abstract_core_bound_queue_1aef36fd9aa88f29f500516395d3160e36" kindref="member">_condition</ref>.wait(ul);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//LOG4CXX_DEBUG(logger,<sp/>&quot;Started<sp/>executing<sp/>task&quot;<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>&amp;task<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/>&quot;<sp/>on<sp/>core<sp/>&quot;<sp/>&lt;&lt;<sp/>_core);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Running<sp/>task<sp/>&quot;<sp/>&lt;&lt;<sp/>task-&gt;vname()<sp/>&lt;&lt;<sp/>&quot;;<sp/>hex<sp/>&quot;<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>&amp;task<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/>&quot;<sp/>on<sp/>core<sp/>&quot;<sp/>&lt;&lt;<sp/>_core&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*task)();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Executed<sp/>task<sp/>&quot;<sp/>&lt;&lt;<sp/>task-&gt;vname()<sp/>&lt;&lt;<sp/>&quot;;<sp/>hex<sp/>&quot;<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>&amp;task<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/>&quot;<sp/>on<sp/>core<sp/>&quot;<sp/>&lt;&lt;<sp/>_core&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG4CXX_DEBUG(<ref refid="class_abstract_core_bound_queue_1aaa808d78eed24b10236611a12baa90c6" kindref="member">logger</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Executed<sp/>task<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>&amp;task<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>on<sp/>core<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_abstract_core_bound_queue_1ac95d664429941c1498f375e957646137" kindref="member">_core</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>notify<sp/>done<sp/>observers<sp/>that<sp/>task<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>task-&gt;notifyDoneObservers();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="class_w_s_core_bound_queue_1a975ad2289aec9bab2a2a515a452ecc43" refkind="member"><highlight class="normal">std::shared_ptr&lt;Task&gt;<sp/><ref refid="class_w_s_core_bound_queue_1a975ad2289aec9bab2a2a515a452ecc43" kindref="member">WSCoreBoundQueue::stealTasks</ref>()<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Task&gt;<sp/>task<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//check<sp/>scheduler<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_task_scheduler_1a8d6f6a94cb6592ae0113336467cee05f" kindref="member">WSCoreBoundQueuesScheduler::scheduler_status_t</ref><sp/>status<sp/>=<sp/><ref refid="class_w_s_core_bound_queue_1a878e6026edf03c5fded17fdba1c49a51" kindref="member">_scheduler</ref>-&gt;<ref refid="class_abstract_core_bound_queues_scheduler_1a2942be2fae11ee3cdb01ce1c545995eb" kindref="member">getSchedulerStatus</ref>();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/><ref refid="class_abstract_task_scheduler_1a3c169cdc3c29ab03d0c5c41a707575ceaea3b5199c163f0f07b405316ab54a8f1" kindref="member">WSCoreBoundQueuesScheduler::RUN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*queues<sp/>=<sp/><ref refid="class_w_s_core_bound_queue_1a878e6026edf03c5fded17fdba1c49a51" kindref="member">_scheduler</ref>-&gt;<ref refid="class_w_s_core_bound_queues_scheduler_1ac14bc5a7d46e8aaf387092ca85179f65" kindref="member">getTaskQueues</ref>();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queues<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_queues<sp/>=<sp/>queues-&gt;size();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(number_of_queues<sp/>&gt;<sp/>1){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>steal<sp/>from<sp/>the<sp/>next<sp/>queue<sp/>(we<sp/>only<sp/>check<sp/>number_of_queues<sp/>-1,<sp/>as<sp/>we<sp/>do<sp/>not<sp/>have<sp/>to<sp/>check<sp/>the<sp/>queue<sp/>taht<sp/>wants<sp/>to<sp/>steal)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>number_of_queues;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>steal<sp/>relative<sp/>from<sp/>the<sp/>current<sp/>queue<sp/>to<sp/>distribute<sp/>stealing<sp/>over<sp/>queues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_w_s_core_bound_queue" kindref="compound">WSCoreBoundQueue</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(queues-&gt;at((i<sp/>+<sp/><ref refid="class_abstract_core_bound_queue_1ac95d664429941c1498f375e957646137" kindref="member">_core</ref>)<sp/>%<sp/>number_of_queues))-&gt;<ref refid="class_w_s_core_bound_queue_1ad53ab184d45d7ef75437eccecbbdb10b" kindref="member">stealTask</ref>();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//push(task);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Queue<sp/>&quot;<sp/>&lt;&lt;<sp/>_core<sp/>&lt;&lt;<sp/>&quot;<sp/>stole<sp/>Task<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>task-&gt;vname()<sp/>&lt;&lt;<sp/>&quot;;<sp/>hex<sp/>&quot;<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>&amp;task<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/>&quot;<sp/>from<sp/>queue<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>task;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="class_w_s_core_bound_queue_1ad53ab184d45d7ef75437eccecbbdb10b" refkind="member"><highlight class="normal">std::shared_ptr&lt;Task&gt;<sp/><ref refid="class_w_s_core_bound_queue_1ad53ab184d45d7ef75437eccecbbdb10b" kindref="member">WSCoreBoundQueue::stealTask</ref>()<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Task&gt;<sp/>task<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hold<sp/>queueMutex,<sp/>to<sp/>avoid<sp/>race<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lk1(<ref refid="class_abstract_core_bound_queue_1ab57cf781e1daa5985057b5f1a471b5d2" kindref="member">_queueMutex</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dont<sp/>steal<sp/>tasks<sp/>if<sp/>thread<sp/>is<sp/>about<sp/>to<sp/>stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_abstract_core_bound_queue_1ae3052e927bc180940af268739d3cd156" kindref="member">_status</ref><sp/>==<sp/><ref refid="class_abstract_task_queue_1a181ee22624d1fe15e03534b049ca7447abbf46a2afa080c3f9d355c407beaa902" kindref="member">RUN</ref><sp/>&amp;&amp;<sp/><ref refid="class_w_s_core_bound_queue_1aa1e941adb122967e622fad9ebf1c83d3" kindref="member">_runQueue</ref>.size()<sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>=<sp/><ref refid="class_w_s_core_bound_queue_1aa1e941adb122967e622fad9ebf1c83d3" kindref="member">_runQueue</ref>.back();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_w_s_core_bound_queue_1aa1e941adb122967e622fad9ebf1c83d3" kindref="member">_runQueue</ref>.pop_back();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>task;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="class_w_s_core_bound_queue_1a21efd917aaee9cdc7a0768c37a2e3d8b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_w_s_core_bound_queue_1a21efd917aaee9cdc7a0768c37a2e3d8b" kindref="member">WSCoreBoundQueue::push</ref>(std::shared_ptr&lt;Task&gt;<sp/>task)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lk(<ref refid="class_abstract_core_bound_queue_1ab57cf781e1daa5985057b5f1a471b5d2" kindref="member">_queueMutex</ref>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="class_w_s_core_bound_queue_1aa1e941adb122967e622fad9ebf1c83d3" kindref="member">_runQueue</ref>.push_back(task);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_core_bound_queue_1aef36fd9aa88f29f500516395d3160e36" kindref="member">_condition</ref>.notify_one();</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="class_w_s_core_bound_queue_1acdc16e62b97344c4751f83d3536f517e" refkind="member"><highlight class="normal">std::vector&lt;std::shared_ptr&lt;Task&gt;<sp/>&gt;<sp/><ref refid="class_w_s_core_bound_queue_1acdc16e62b97344c4751f83d3536f517e" kindref="member">WSCoreBoundQueue::stopQueue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_abstract_core_bound_queue_1ae3052e927bc180940af268739d3cd156" kindref="member">_status</ref><sp/>!=<sp/><ref refid="class_abstract_task_queue_1a181ee22624d1fe15e03534b049ca7447a16003f747b26f2b4d59ec96bdbe5d3ed" kindref="member">STOPPED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>thread<sp/>to<sp/>be<sp/>stopped<sp/>is<sp/>either<sp/>executing<sp/>a<sp/>task,<sp/>or<sp/>waits<sp/>for<sp/>the<sp/>condition<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>status<sp/>to<sp/>&quot;TO_STOP&quot;<sp/>so<sp/>that<sp/>the<sp/>thread<sp/>either<sp/>quits<sp/>after<sp/>executing<sp/>the<sp/>task,<sp/>or<sp/>after<sp/>having<sp/>been<sp/>notified<sp/>by<sp/>the<sp/>condition<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>the<sp/>mutex<sp/>here,<sp/>otherwise,<sp/>we<sp/>might<sp/>call<sp/>notify<sp/>prior<sp/>to<sp/>the<sp/>thread<sp/>going<sp/>to<sp/>sleep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lk(<ref refid="class_abstract_core_bound_queue_1ab57cf781e1daa5985057b5f1a471b5d2" kindref="member">_queueMutex</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_abstract_core_bound_queue_1ae3052e927bc180940af268739d3cd156" kindref="member">_status</ref><sp/>=<sp/><ref refid="class_abstract_task_queue_1a181ee22624d1fe15e03534b049ca7447ab5b55d5fec71f3976fb1767477475a69" kindref="member">TO_STOP</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wake<sp/>up<sp/>thread<sp/>in<sp/>case<sp/>thread<sp/>is<sp/>sleeping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_abstract_core_bound_queue_1aef36fd9aa88f29f500516395d3160e36" kindref="member">_condition</ref>.notify_one();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_abstract_core_bound_queue_1a85ec39df5b0715322bd2377d131f61c2" kindref="member">_thread</ref>-&gt;join();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_abstract_core_bound_queue_1a85ec39df5b0715322bd2377d131f61c2" kindref="member">_thread</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_abstract_core_bound_queue_1a85ec39df5b0715322bd2377d131f61c2" kindref="member">_thread</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_abstract_core_bound_queue_1ae3052e927bc180940af268739d3cd156" kindref="member">_status</ref><sp/>=<sp/><ref refid="class_abstract_task_queue_1a181ee22624d1fe15e03534b049ca7447a16003f747b26f2b4d59ec96bdbe5d3ed" kindref="member">STOPPED</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_w_s_core_bound_queue_1a8d28b343377c7dabe8f160640b5d2966" kindref="member">emptyQueue</ref>();</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="class_w_s_core_bound_queue_1a8d28b343377c7dabe8f160640b5d2966" refkind="member"><highlight class="normal">std::vector&lt;std::shared_ptr&lt;Task&gt;<sp/>&gt;<sp/><ref refid="class_w_s_core_bound_queue_1a8d28b343377c7dabe8f160640b5d2966" kindref="member">WSCoreBoundQueue::emptyQueue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Task&gt;<sp/>&gt;<sp/>tmp;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lk(<ref refid="class_abstract_core_bound_queue_1ab57cf781e1daa5985057b5f1a471b5d2" kindref="member">_queueMutex</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="class_w_s_core_bound_queue_1aa1e941adb122967e622fad9ebf1c83d3" kindref="member">_runQueue</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="class_w_s_core_bound_queue_1aa1e941adb122967e622fad9ebf1c83d3" kindref="member">_runQueue</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.push_back(*it);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/captain/HPI/aepic/hyrise/src/lib/taskscheduler/WSCoreBoundQueue.cpp"/>
  </compounddef>
</doxygen>
