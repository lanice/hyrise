<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="parallel__sort_8hpp" kind="file">
    <compoundname>parallel_sort.hpp</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includes local="no">pthread.h</includes>
    <includes local="no">sys/time.h</includes>
    <includes local="no">queue</includes>
    <includes local="no">assert.h</includes>
    <incdepgraph>
      <node id="10908">
        <label>queue</label>
      </node>
      <node id="10909">
        <label>assert.h</label>
      </node>
      <node id="10903">
        <label>stdlib.h</label>
      </node>
      <node id="10901">
        <label>src/lib/helper/parallel_sort.hpp</label>
        <link refid="parallel_sort.hpp"/>
        <childnode refid="10902" relation="include">
        </childnode>
        <childnode refid="10903" relation="include">
        </childnode>
        <childnode refid="10904" relation="include">
        </childnode>
        <childnode refid="10905" relation="include">
        </childnode>
        <childnode refid="10906" relation="include">
        </childnode>
        <childnode refid="10907" relation="include">
        </childnode>
        <childnode refid="10908" relation="include">
        </childnode>
        <childnode refid="10909" relation="include">
        </childnode>
      </node>
      <node id="10906">
        <label>pthread.h</label>
      </node>
      <node id="10905">
        <label>vector</label>
      </node>
      <node id="10907">
        <label>sys/time.h</label>
      </node>
      <node id="10904">
        <label>iostream</label>
      </node>
      <node id="10902">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_parallel_sort" prot="public">ParallelSort</innerclass>
    <innerclass refid="struct_parallel_sort_1_1sort__arg__t" prot="private">ParallelSort::sort_arg_t</innerclass>
    <innerclass refid="struct_parallel_sort_1_1merge__arg__t" prot="private">ParallelSort::merge_arg_t</innerclass>
    <innerclass refid="class_parallel_sort_1_1merge__data__t" prot="private">ParallelSort::merge_data_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="parallel__sort_8hpp_1a0e9fe43b25f2abd857b0270971064fec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>void(T::*)(void *)</type>
            <declname>mem_fn</declname>
            <defname>mem_fn</defname>
          </param>
        </templateparamlist>
        <type>void *</type>
        <definition>void* thunk</definition>
        <argsstring>(void *p)</argsstring>
        <name>thunk</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/helper/parallel_sort.hpp" line="17" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/helper/parallel_sort.hpp" bodystart="17" bodyend="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SRC_LIB_HELPER_PARALLEL_SORT_HPP_</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SRC_LIB_HELPER_PARALLEL_SORT_HPP_</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(T::*mem_fn)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&gt;</highlight></codeline>
<codeline lineno="17" refid="parallel__sort_8hpp_1a0e9fe43b25f2abd857b0270971064fec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="parallel__sort_8hpp_1a0e9fe43b25f2abd857b0270971064fec" kindref="member">thunk</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>std::pair&lt;void<sp/>*,<sp/>void<sp/>*&gt;<sp/>*a<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::pair&lt;void<sp/>*,<sp/>void<sp/>*&gt;*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a-&gt;first)-&gt;*mem_fn)(a-&gt;second);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="25" refid="class_parallel_sort" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_parallel_sort" kindref="compound">ParallelSort</ref><sp/>{</highlight></codeline>
<codeline lineno="26" refid="struct_parallel_sort_1_1sort__arg__t" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="27" refid="struct_parallel_sort_1_1sort__arg__t_1ae810c320ba18bb26fe86b39532f5950c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>*<ref refid="struct_parallel_sort_1_1sort__arg__t_1ae810c320ba18bb26fe86b39532f5950c" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="28" refid="struct_parallel_sort_1_1sort__arg__t_1a9fee3f84f8bece96dc49e35c224b4e7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_parallel_sort_1_1sort__arg__t_1a9fee3f84f8bece96dc49e35c224b4e7a" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="29" refid="struct_parallel_sort_1_1sort__arg__t_1afc60aeffaafeec80a08823eb329e558b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_parallel_sort_1_1sort__arg__t_1afc60aeffaafeec80a08823eb329e558b" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="struct_parallel_sort_1_1sort__arg__t" kindref="compound">sort_arg_t</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="struct_parallel_sort_1_1merge__arg__t" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="33" refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>*<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="34" refid="struct_parallel_sort_1_1merge__arg__t_1a19842732e6bf39aba27d2e5b9aad55fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_parallel_sort_1_1merge__arg__t_1a19842732e6bf39aba27d2e5b9aad55fb" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="35" refid="struct_parallel_sort_1_1merge__arg__t_1a580ebd73696c2d0436cae15bcd750c18" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_parallel_sort_1_1merge__arg__t_1a580ebd73696c2d0436cae15bcd750c18" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="36" refid="struct_parallel_sort_1_1merge__arg__t_1a1b34d759631582da77346ee6386da539" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_parallel_sort_1_1merge__arg__t_1a1b34d759631582da77346ee6386da539" kindref="member">delete_data_when_done</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="struct_parallel_sort_1_1merge__arg__t" kindref="compound">merge_arg_t</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="class_parallel_sort_1_1merge__data__t" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_parallel_sort_1_1merge__data__t" kindref="compound">merge_data_t</ref><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41" refid="class_parallel_sort_1_1merge__data__t_1a5c47d13c42f50295dd5924e6177c0540" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="class_parallel_sort_1_1merge__data__t_1a5c47d13c42f50295dd5924e6177c0540" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="42" refid="class_parallel_sort_1_1merge__data__t_1a4f56e7efca6626871beb1d8e269234c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_parallel_sort_1_1merge__data__t_1a4f56e7efca6626871beb1d8e269234c3" kindref="member">slice</ref>;</highlight></codeline>
<codeline lineno="43" refid="class_parallel_sort_1_1merge__data__t_1a6737f627cf7f0b8103029c80a12cdfc9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_parallel_sort_1_1merge__data__t_1a6737f627cf7f0b8103029c80a12cdfc9" kindref="member">pos</ref>;</highlight></codeline>
<codeline lineno="44" refid="class_parallel_sort_1_1merge__data__t_1a5b0727951f91f28e79f5e81095684584" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_parallel_sort_1_1merge__data__t_1a5b0727951f91f28e79f5e81095684584" kindref="member">operator&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_parallel_sort_1_1merge__data__t" kindref="compound">merge_data_t</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_parallel_sort_1_1merge__data__t" kindref="compound">merge_data_t</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="class_parallel_sort_1_1merge__data__t_1a5c47d13c42f50295dd5924e6177c0540" kindref="member">value</ref><sp/>&gt;=<sp/>b.<ref refid="class_parallel_sort_1_1merge__data__t_1a5c47d13c42f50295dd5924e6177c0540" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="class_parallel_sort_1af43b80c7b09b9edc4372ce0769fc94e4" refkind="member"><highlight class="normal"><sp/><sp/>std::queue&lt;merge_arg_t&gt;<sp/><ref refid="class_parallel_sort_1af43b80c7b09b9edc4372ce0769fc94e4" kindref="member">pending_parts</ref>;</highlight></codeline>
<codeline lineno="50" refid="class_parallel_sort_1a0c41ae953ed40c3b20b54907b1d14251" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="class_parallel_sort_1a0c41ae953ed40c3b20b54907b1d14251" kindref="member">remaining_parts</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="class_parallel_sort_1a3974ce594a585f4bcdef1fa0f6616ff8" refkind="member"><highlight class="normal"><sp/><sp/>pthread_mutex_t<sp/><ref refid="class_parallel_sort_1a3974ce594a585f4bcdef1fa0f6616ff8" kindref="member">parts_mutex</ref>;</highlight></codeline>
<codeline lineno="53" refid="class_parallel_sort_1a02de217eec609d4184a3ce2551473940" refkind="member"><highlight class="normal"><sp/><sp/>pthread_mutex_t<sp/><ref refid="class_parallel_sort_1a02de217eec609d4184a3ce2551473940" kindref="member">parts_exist_mutex</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="class_parallel_sort_1ac28637308fd0f0b0ccb0bc47769565c5" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/>*<ref refid="class_parallel_sort_1ac28637308fd0f0b0ccb0bc47769565c5" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="56" refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="class_parallel_sort_1af9f961f7a85db4560aa25c0d4e96ee0e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_parallel_sort_1af9f961f7a85db4560aa25c0d4e96ee0e" kindref="member">sort_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(((<ref refid="struct_parallel_sort_1_1sort__arg__t" kindref="compound">sort_arg_t</ref><sp/>*)arg)-&gt;<ref refid="class_parallel_sort_1ac28637308fd0f0b0ccb0bc47769565c5" kindref="member">data</ref>-&gt;begin()<sp/>+<sp/>((<ref refid="struct_parallel_sort_1_1sort__arg__t" kindref="compound">sort_arg_t</ref><sp/>*)arg)-&gt;begin,<sp/>((<ref refid="struct_parallel_sort_1_1sort__arg__t" kindref="compound">sort_arg_t</ref><sp/>*)arg)-&gt;data-&gt;begin()<sp/>+<sp/>((<ref refid="struct_parallel_sort_1_1sort__arg__t" kindref="compound">sort_arg_t</ref><sp/>*)arg)-&gt;end);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="class_parallel_sort_1a33152ca83988b8c620da8a65947566de" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_parallel_sort_1a33152ca83988b8c620da8a65947566de" kindref="member">merge_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_parallel_sort_1_1merge__arg__t" kindref="compound">merge_arg_t</ref><sp/>a,<sp/>b,<sp/>c;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cont,<sp/>quit;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cont<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quit<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>waiting<sp/>=<sp/>0,<sp/>remaining<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;<ref refid="class_parallel_sort_1a3974ce594a585f4bcdef1fa0f6616ff8" kindref="member">parts_mutex</ref>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waiting<sp/>=<sp/><ref refid="class_parallel_sort_1af43b80c7b09b9edc4372ce0769fc94e4" kindref="member">pending_parts</ref>.size();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remaining<sp/>=<sp/><ref refid="class_parallel_sort_1a0c41ae953ed40c3b20b54907b1d14251" kindref="member">remaining_parts</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;<ref refid="class_parallel_sort_1a3974ce594a585f4bcdef1fa0f6616ff8" kindref="member">parts_mutex</ref>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waiting<sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;<ref refid="class_parallel_sort_1a3974ce594a585f4bcdef1fa0f6616ff8" kindref="member">parts_mutex</ref>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="class_parallel_sort_1af43b80c7b09b9edc4372ce0769fc94e4" kindref="member">pending_parts</ref>.front();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_parallel_sort_1af43b80c7b09b9edc4372ce0769fc94e4" kindref="member">pending_parts</ref>.pop();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/><ref refid="class_parallel_sort_1af43b80c7b09b9edc4372ce0769fc94e4" kindref="member">pending_parts</ref>.front();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_parallel_sort_1af43b80c7b09b9edc4372ce0769fc94e4" kindref="member">pending_parts</ref>.pop();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_parallel_sort_1a0c41ae953ed40c3b20b54907b1d14251" kindref="member">remaining_parts</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;<ref refid="class_parallel_sort_1a3974ce594a585f4bcdef1fa0f6616ff8" kindref="member">parts_mutex</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waiting<sp/>+<sp/>remaining<sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pthread_mutex_trylock(&amp;<ref refid="class_parallel_sort_1a02de217eec609d4184a3ce2551473940" kindref="member">parts_exist_mutex</ref>)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref><sp/>=<sp/><ref refid="class_parallel_sort_1a6b6c44683a71f8afee952a65dd96c544" kindref="member">merge_sorted</ref>(a,<sp/>b);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a19842732e6bf39aba27d2e5b9aad55fb" kindref="member">begin</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a580ebd73696c2d0436cae15bcd750c18" kindref="member">end</ref><sp/>=<sp/>c.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref>-&gt;size();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a1b34d759631582da77346ee6386da539" kindref="member">delete_data_when_done</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;<ref refid="class_parallel_sort_1a3974ce594a585f4bcdef1fa0f6616ff8" kindref="member">parts_mutex</ref>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_parallel_sort_1af43b80c7b09b9edc4372ce0769fc94e4" kindref="member">pending_parts</ref>.push(c);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_parallel_sort_1af43b80c7b09b9edc4372ce0769fc94e4" kindref="member">pending_parts</ref>.size()<sp/>&lt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_trylock(&amp;<ref refid="class_parallel_sort_1a02de217eec609d4184a3ce2551473940" kindref="member">parts_exist_mutex</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;<ref refid="class_parallel_sort_1a02de217eec609d4184a3ce2551473940" kindref="member">parts_exist_mutex</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;<ref refid="class_parallel_sort_1a3974ce594a585f4bcdef1fa0f6616ff8" kindref="member">parts_mutex</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="class_parallel_sort_1a6b6c44683a71f8afee952a65dd96c544" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>*<ref refid="class_parallel_sort_1a6b6c44683a71f8afee952a65dd96c544" kindref="member">merge_sorted</ref>(<ref refid="struct_parallel_sort_1_1merge__arg__t" kindref="compound">merge_arg_t</ref><sp/>left,<sp/><ref refid="struct_parallel_sort_1_1merge__arg__t" kindref="compound">merge_arg_t</ref><sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>*out<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i_left<sp/>=<sp/>left.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a19842732e6bf39aba27d2e5b9aad55fb" kindref="member">begin</ref>,<sp/>i_right<sp/>=<sp/>right.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a19842732e6bf39aba27d2e5b9aad55fb" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i_left<sp/>&lt;<sp/>left.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a580ebd73696c2d0436cae15bcd750c18" kindref="member">end</ref><sp/>&amp;&amp;<sp/>i_right<sp/>&lt;<sp/>right.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a580ebd73696c2d0436cae15bcd750c18" kindref="member">end</ref>)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*(left.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref>))[i_left]<sp/>&lt;<sp/>(*(right.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref>))[i_right])<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;push_back((*(left.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref>))[i_left++]);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;push_back((*(right.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref>))[i_right++]);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i_left<sp/>&lt;<sp/>left.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a580ebd73696c2d0436cae15bcd750c18" kindref="member">end</ref>)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;push_back((*(left.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref>))[i_left++]);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i_right<sp/>&lt;<sp/>right.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a580ebd73696c2d0436cae15bcd750c18" kindref="member">end</ref>)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;push_back((*(right.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref>))[i_right++]);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert((left.end<sp/>-<sp/>left.begin)<sp/>+<sp/>(right.end<sp/>-<sp/>right.begin)<sp/>==<sp/>out-&gt;size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a1b34d759631582da77346ee6386da539" kindref="member">delete_data_when_done</ref>)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>left.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(right.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a1b34d759631582da77346ee6386da539" kindref="member">delete_data_when_done</ref>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>right.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="class_parallel_sort_1afff68fbd5d5042891acb37e399ab6d1b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_parallel_sort_1afff68fbd5d5042891acb37e399ab6d1b" kindref="member">ParallelSort</ref>(std::vector&lt;T&gt;<sp/>*_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_thread_count)<sp/>:<sp/><ref refid="class_parallel_sort_1ac28637308fd0f0b0ccb0bc47769565c5" kindref="member">data</ref>(_data),<sp/><ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref>(_thread_count)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="class_parallel_sort_1a398534f2352da43ef5cf1bc3b96c1fab" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_parallel_sort_1a398534f2352da43ef5cf1bc3b96c1fab" kindref="member">sort</ref>()<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_parallel_sort_1_1sort__arg__t" kindref="compound">sort_arg_t</ref><sp/>*thread_data;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>timeval<sp/>t1,<sp/>t2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gettimeofday(&amp;t1,<sp/>nullptr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref><sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(<ref refid="class_parallel_sort_1ac28637308fd0f0b0ccb0bc47769565c5" kindref="member">data</ref>-&gt;begin(),<sp/><ref refid="class_parallel_sort_1ac28637308fd0f0b0ccb0bc47769565c5" kindref="member">data</ref>-&gt;end());</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>divide<sp/>input<sp/>data<sp/>on<sp/>threads<sp/>for<sp/>sorting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_t<sp/>*threads<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>pthread_t[<ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref>];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread_data<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_parallel_sort_1_1sort__arg__t" kindref="compound">sort_arg_t</ref>[<ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref>];</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>per_thread<sp/>=<sp/><ref refid="class_parallel_sort_1ac28637308fd0f0b0ccb0bc47769565c5" kindref="member">data</ref>-&gt;size()<sp/>/<sp/><ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>remainder<sp/>=<sp/><ref refid="class_parallel_sort_1ac28637308fd0f0b0ccb0bc47769565c5" kindref="member">data</ref>-&gt;size()<sp/>-<sp/>per_thread<sp/>*<sp/><ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref>;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>per_thread<sp/>+<sp/>(i<sp/>&lt;<sp/>remainder<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_data[i].<ref refid="struct_parallel_sort_1_1sort__arg__t_1ae810c320ba18bb26fe86b39532f5950c" kindref="member">data</ref><sp/>=<sp/><ref refid="class_parallel_sort_1ac28637308fd0f0b0ccb0bc47769565c5" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_data[i].<ref refid="struct_parallel_sort_1_1sort__arg__t_1a9fee3f84f8bece96dc49e35c224b4e7a" kindref="member">begin</ref><sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_data[i].<ref refid="struct_parallel_sort_1_1sort__arg__t_1afc60aeffaafeec80a08823eb329e558b" kindref="member">end</ref><sp/>=<sp/>begin<sp/>+<sp/>size;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_create(&amp;threads[i],<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>thunk&lt;ParallelSort,<sp/>&amp;ParallelSort::sort_thread&gt;,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::pair&lt;void<sp/>*,<sp/>void<sp/>*&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;thread_data[i]));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_join(threads[i],<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>threads;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gettimeofday(&amp;t2,<sp/>nullptr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;%f,&quot;,<sp/>t2.tv_sec<sp/>+<sp/>(double)t2.tv_usec<sp/>/<sp/>1000000<sp/>-<sp/>t1.tv_sec<sp/>-<sp/>(double)t1.tv_usec<sp/>/<sp/>1000000);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gettimeofday(&amp;t1,<sp/>nullptr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref><sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uses<sp/>a<sp/>single<sp/>2-way<sp/>merge<sp/>to<sp/>merge<sp/>the<sp/>two<sp/>sorted<sp/>parts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref><sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_parallel_sort_1_1merge__arg__t" kindref="compound">merge_arg_t</ref><sp/>a,<sp/>b;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref><sp/>=<sp/>thread_data[0].<ref refid="struct_parallel_sort_1_1sort__arg__t_1ae810c320ba18bb26fe86b39532f5950c" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a19842732e6bf39aba27d2e5b9aad55fb" kindref="member">begin</ref><sp/>=<sp/>thread_data[0].<ref refid="struct_parallel_sort_1_1sort__arg__t_1a9fee3f84f8bece96dc49e35c224b4e7a" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a580ebd73696c2d0436cae15bcd750c18" kindref="member">end</ref><sp/>=<sp/>thread_data[0].<ref refid="struct_parallel_sort_1_1sort__arg__t_1afc60aeffaafeec80a08823eb329e558b" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a1b34d759631582da77346ee6386da539" kindref="member">delete_data_when_done</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref><sp/>=<sp/>thread_data[1].<ref refid="struct_parallel_sort_1_1sort__arg__t_1ae810c320ba18bb26fe86b39532f5950c" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a19842732e6bf39aba27d2e5b9aad55fb" kindref="member">begin</ref><sp/>=<sp/>thread_data[1].<ref refid="struct_parallel_sort_1_1sort__arg__t_1a9fee3f84f8bece96dc49e35c224b4e7a" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a580ebd73696c2d0436cae15bcd750c18" kindref="member">end</ref><sp/>=<sp/>thread_data[1].<ref refid="struct_parallel_sort_1_1sort__arg__t_1afc60aeffaafeec80a08823eb329e558b" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a1b34d759631582da77346ee6386da539" kindref="member">delete_data_when_done</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>*out<sp/>=<sp/><ref refid="class_parallel_sort_1a6b6c44683a71f8afee952a65dd96c544" kindref="member">ParallelSort::merge_sorted</ref>(a,<sp/>b);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_parallel_sort_1ac28637308fd0f0b0ccb0bc47769565c5" kindref="member">data</ref>-&gt;swap(*out);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uses<sp/>a<sp/>single<sp/>n-way<sp/>merge<sp/>to<sp/>merge<sp/>the<sp/>sorted<sp/>parts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>about<sp/>2x<sp/>slower<sp/>than<sp/>the<sp/>solution<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>*out<sp/>=<sp/>new<sp/>std::vector&lt;T&gt;();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>merge_data_t<sp/>d;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::priority_queue&lt;merge_data_t&gt;<sp/>heap;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>thread_count;<sp/>i++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.pos<sp/>=<sp/>thread_data[i].begin;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.value<sp/>=<sp/>(*(thread_data[i].data))[d.pos];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.slice<sp/>=<sp/>i;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap.push(d);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(heap.size()<sp/>&gt;<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>heap.top();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap.pop();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out-&gt;push_back(d.value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.pos++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(d.pos<sp/>&lt;<sp/>thread_data[d.slice].end)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.value<sp/>=<sp/>(*(thread_data[d.slice].data))[d.pos];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap.push(d);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;swap(*out);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delete<sp/>out;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uses<sp/>threaded<sp/>2-way<sp/>merges<sp/>to<sp/>merge<sp/>pairs<sp/>of<sp/>sorted<sp/>parts<sp/>until</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>one<sp/>big<sp/>sorted<sp/>part<sp/>is<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_init(&amp;<ref refid="class_parallel_sort_1a3974ce594a585f4bcdef1fa0f6616ff8" kindref="member">parts_mutex</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_init(&amp;<ref refid="class_parallel_sort_1a02de217eec609d4184a3ce2551473940" kindref="member">parts_exist_mutex</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>merge_thread_count<sp/>=<sp/><ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref><sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(merge_thread_count<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>merge_thread_count<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_parallel_sort_1a0c41ae953ed40c3b20b54907b1d14251" kindref="member">remaining_parts</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_parallel_sort_1_1merge__arg__t" kindref="compound">merge_arg_t</ref><sp/>a;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref><sp/>=<sp/>thread_data[i].<ref refid="struct_parallel_sort_1_1sort__arg__t_1ae810c320ba18bb26fe86b39532f5950c" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a19842732e6bf39aba27d2e5b9aad55fb" kindref="member">begin</ref><sp/>=<sp/>thread_data[i].<ref refid="struct_parallel_sort_1_1sort__arg__t_1a9fee3f84f8bece96dc49e35c224b4e7a" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a580ebd73696c2d0436cae15bcd750c18" kindref="member">end</ref><sp/>=<sp/>thread_data[i].<ref refid="struct_parallel_sort_1_1sort__arg__t_1afc60aeffaafeec80a08823eb329e558b" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.<ref refid="struct_parallel_sort_1_1merge__arg__t_1a1b34d759631582da77346ee6386da539" kindref="member">delete_data_when_done</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_parallel_sort_1af43b80c7b09b9edc4372ce0769fc94e4" kindref="member">pending_parts</ref>.push(a);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_parallel_sort_1a0c41ae953ed40c3b20b54907b1d14251" kindref="member">remaining_parts</ref>++;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;<ref refid="class_parallel_sort_1a02de217eec609d4184a3ce2551473940" kindref="member">parts_exist_mutex</ref>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_t<sp/>*threads<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>pthread_t[merge_thread_count];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>merge_thread_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_create(&amp;threads[i],<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>thunk&lt;ParallelSort,<sp/>&amp;ParallelSort::merge_thread&gt;,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::pair&lt;void<sp/>*,<sp/>void<sp/>*&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>NULL));</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>merge_thread_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_join(threads[i],<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>threads;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_destroy(&amp;<ref refid="class_parallel_sort_1a3974ce594a585f4bcdef1fa0f6616ff8" kindref="member">parts_mutex</ref>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_destroy(&amp;<ref refid="class_parallel_sort_1a02de217eec609d4184a3ce2551473940" kindref="member">parts_exist_mutex</ref>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_parallel_sort_1_1merge__arg__t" kindref="compound">merge_arg_t</ref><sp/>res<sp/>=<sp/><ref refid="class_parallel_sort_1af43b80c7b09b9edc4372ce0769fc94e4" kindref="member">pending_parts</ref>.front();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_parallel_sort_1ac28637308fd0f0b0ccb0bc47769565c5" kindref="member">data</ref>-&gt;swap(*res.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>res.<ref refid="struct_parallel_sort_1_1merge__arg__t_1ae798642d3da8cd8bb26012a0cfc0b433" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gettimeofday(&amp;t2,<sp/>nullptr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;%f\n&quot;,<sp/>t2.tv_sec<sp/>+<sp/>(double)t2.tv_usec<sp/>/<sp/>1000000<sp/>-<sp/>t1.tv_sec<sp/>-<sp/>(double)t1.tv_usec<sp/>/<sp/>1000000);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref><sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>thread_data;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="class_parallel_sort_1abb98e58793762e57fedd8edf217e8e67" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_parallel_sort_1abb98e58793762e57fedd8edf217e8e67" kindref="member">sort</ref>(std::vector&lt;T&gt;<sp/>*<ref refid="class_parallel_sort_1ac28637308fd0f0b0ccb0bc47769565c5" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_parallel_sort_1a9ea905b0d31ac31cafca20499c68d71e" kindref="member">thread_count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_parallel_sort" kindref="compound">ParallelSort</ref><sp/>s(data,<sp/>thread_count);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>s.<ref refid="class_parallel_sort_1a398534f2352da43ef5cf1bc3b96c1fab" kindref="member">sort</ref>();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal">};</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>SRC_LIB_HELPER_PARALLEL_SORT_HPP_</highlight></codeline>
    </programlisting>
    <location file="/home/lanice/develop/epic/hyrise/src/lib/helper/parallel_sort.hpp"/>
  </compounddef>
</doxygen>
