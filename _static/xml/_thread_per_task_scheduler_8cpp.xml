<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="_thread_per_task_scheduler_8cpp" kind="file">
    <compoundname>ThreadPerTaskScheduler.cpp</compoundname>
    <includes refid="_thread_per_task_scheduler_8h" local="yes">ThreadPerTaskScheduler.h</includes>
    <incdepgraph>
      <node id="19090">
        <label>queue</label>
      </node>
      <node id="19088">
        <label>taskscheduler/AbstractTaskQueue.h</label>
        <link refid="_abstract_task_queue_8h"/>
        <childnode refid="19085" relation="include">
        </childnode>
        <childnode refid="19084" relation="include">
        </childnode>
        <childnode refid="19089" relation="include">
        </childnode>
        <childnode refid="19090" relation="include">
        </childnode>
        <childnode refid="19086" relation="include">
        </childnode>
        <childnode refid="19091" relation="include">
        </childnode>
        <childnode refid="19082" relation="include">
        </childnode>
      </node>
      <node id="19082">
        <label>taskscheduler/Task.h</label>
        <link refid="_task_8h"/>
        <childnode refid="19083" relation="include">
        </childnode>
        <childnode refid="19084" relation="include">
        </childnode>
        <childnode refid="19085" relation="include">
        </childnode>
        <childnode refid="19086" relation="include">
        </childnode>
        <childnode refid="19087" relation="include">
        </childnode>
      </node>
      <node id="19097">
        <label>stdexcept</label>
      </node>
      <node id="19087">
        <label>string</label>
      </node>
      <node id="19092">
        <label>unordered_set</label>
      </node>
      <node id="19079">
        <label>src/lib/taskscheduler/ThreadPerTaskScheduler.cpp</label>
        <link refid="ThreadPerTaskScheduler.cpp"/>
        <childnode refid="19080" relation="include">
        </childnode>
      </node>
      <node id="19095">
        <label>hwloc.h</label>
      </node>
      <node id="19086">
        <label>condition_variable</label>
      </node>
      <node id="19094">
        <label>helper/HwlocHelper.h</label>
        <link refid="_hwloc_helper_8h"/>
        <childnode refid="19095" relation="include">
        </childnode>
        <childnode refid="19083" relation="include">
        </childnode>
      </node>
      <node id="19083">
        <label>vector</label>
      </node>
      <node id="19093">
        <label>iostream</label>
      </node>
      <node id="19081">
        <label>AbstractTaskScheduler.h</label>
        <link refid="_abstract_task_scheduler_8h"/>
        <childnode refid="19082" relation="include">
        </childnode>
        <childnode refid="19088" relation="include">
        </childnode>
        <childnode refid="19085" relation="include">
        </childnode>
        <childnode refid="19092" relation="include">
        </childnode>
        <childnode refid="19093" relation="include">
        </childnode>
        <childnode refid="19091" relation="include">
        </childnode>
        <childnode refid="19094" relation="include">
        </childnode>
      </node>
      <node id="19096">
        <label>taskscheduler/SharedScheduler.h</label>
        <link refid="_shared_scheduler_8h"/>
        <childnode refid="19081" relation="include">
        </childnode>
        <childnode refid="19097" relation="include">
        </childnode>
      </node>
      <node id="19080">
        <label>ThreadPerTaskScheduler.h</label>
        <link refid="_thread_per_task_scheduler_8h"/>
        <childnode refid="19081" relation="include">
        </childnode>
        <childnode refid="19096" relation="include">
        </childnode>
        <childnode refid="19085" relation="include">
        </childnode>
        <childnode refid="19084" relation="include">
        </childnode>
        <childnode refid="19089" relation="include">
        </childnode>
        <childnode refid="19090" relation="include">
        </childnode>
      </node>
      <node id="19084">
        <label>mutex</label>
      </node>
      <node id="19089">
        <label>thread</label>
      </node>
      <node id="19091">
        <label>log4cxx/logger.h</label>
      </node>
      <node id="19085">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>ThreadPerTaskScheduler.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Jul<sp/>22,<sp/>2013</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>jwust</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_thread_per_task_scheduler_8h" kindref="compound">ThreadPerTaskScheduler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">log4cxx::LoggerPtr<sp/><ref refid="class_thread_per_task_scheduler_1a318614a9f40cfb544507115970cca7df" kindref="member">ThreadPerTaskScheduler::_logger</ref><sp/>=<sp/>log4cxx::Logger::getLogger(</highlight><highlight class="stringliteral">&quot;taskscheduler.ThreadPerTaskScheduler&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>register<sp/>Scheduler<sp/>at<sp/>SharedScheduler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacehyrise_1_1access_1ab840b3dd4740074d5269e1cacd5791cd" kindref="member">registered</ref><sp/><sp/>=</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>SharedScheduler::registerScheduler&lt;ThreadPerTaskScheduler&gt;(</highlight><highlight class="stringliteral">&quot;ThreadPerTaskScheduler&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="class_thread_per_task_scheduler_1ab02040ac6063818284d59b7501666d47" refkind="member"><highlight class="normal"><ref refid="class_thread_per_task_scheduler_1ab02040ac6063818284d59b7501666d47" kindref="member">ThreadPerTaskScheduler::ThreadPerTaskScheduler</ref>()<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><ref refid="class_thread_per_task_scheduler_1a92ea15f894a365f361943be225b4f557" kindref="member">_status</ref><sp/>=<sp/><ref refid="class_abstract_task_scheduler_1a3c169cdc3c29ab03d0c5c41a707575ceaea3b5199c163f0f07b405316ab54a8f1" kindref="member">RUN</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22" refid="class_thread_per_task_scheduler_1a91194a7f55c6707a14d65b7892989164" refkind="member"><highlight class="normal"><ref refid="class_thread_per_task_scheduler_1ab02040ac6063818284d59b7501666d47" kindref="member">ThreadPerTaskScheduler::ThreadPerTaskScheduler</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="class_thread_per_task_scheduler_1a92ea15f894a365f361943be225b4f557" kindref="member">_status</ref><sp/>=<sp/><ref refid="class_abstract_task_scheduler_1a3c169cdc3c29ab03d0c5c41a707575ceaea3b5199c163f0f07b405316ab54a8f1" kindref="member">RUN</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="class_thread_per_task_scheduler_1a890acdd03eb6961106969bb84aa7676f" refkind="member"><highlight class="normal"><ref refid="class_thread_per_task_scheduler_1a890acdd03eb6961106969bb84aa7676f" kindref="member">ThreadPerTaskScheduler::~ThreadPerTaskScheduler</ref>()<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Auto-generated<sp/>destructor<sp/>stub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>schedule<sp/>a<sp/>task<sp/>for<sp/>execution</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="class_thread_per_task_scheduler_1a3f4d8059aa5d1ed2f544616ea32d60f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thread_per_task_scheduler_1a3f4d8059aa5d1ed2f544616ea32d60f8" kindref="member">ThreadPerTaskScheduler::schedule</ref>(std::shared_ptr&lt;Task&gt;<sp/>task){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>simple<sp/>strategy:<sp/>check<sp/>if<sp/>task<sp/>is<sp/>ready<sp/>to<sp/>run<sp/>-&gt;<sp/>create<sp/>new<sp/>thread<sp/>and<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>store<sp/>in<sp/>wait<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lock<sp/>the<sp/>task<sp/>-<sp/>otherwise,<sp/>a<sp/>notify<sp/>might<sp/>happen<sp/>prior<sp/>to<sp/>the<sp/>task<sp/>being<sp/>added<sp/>to<sp/>the<sp/>wait<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>task-&gt;lockForNotifications();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;scheduled<sp/>task<sp/>&quot;<sp/>&lt;&lt;<sp/>task-&gt;vname()<sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;isReady()){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;start<sp/>thread<sp/>with<sp/>task<sp/>&quot;<sp/>&lt;&lt;<sp/>task-&gt;vname()<sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>*t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::thread(<ref refid="class_task_executor" kindref="compound">TaskExecutor</ref>(task));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;detach();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>task-&gt;addReadyObserver(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lk(<ref refid="class_thread_per_task_scheduler_1af8ff10c404e9064f38337a296a364152" kindref="member">_setMutex</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_thread_per_task_scheduler_1a44f506c63e605616c35d232b92cdf735" kindref="member">_waitSet</ref>.insert(task);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG4CXX_DEBUG(<ref refid="class_thread_per_task_scheduler_1a318614a9f40cfb544507115970cca7df" kindref="member">_logger</ref>,<sp/><sp/></highlight><highlight class="stringliteral">&quot;Task<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)task.get()<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>inserted<sp/>in<sp/>wait<sp/>queue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>task-&gt;unlockForNotifications();</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>shutdown<sp/>task<sp/>scheduler;<sp/>makes<sp/>sure<sp/>all<sp/>underlying<sp/>threads<sp/>are<sp/>stopped</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="class_thread_per_task_scheduler_1ac4b075112110a106af152c1029bd56e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thread_per_task_scheduler_1ac4b075112110a106af152c1029bd56e3" kindref="member">ThreadPerTaskScheduler::shutdown</ref>(){</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>notify<sp/>scheduler<sp/>that<sp/>a<sp/>given<sp/>task<sp/>is<sp/>ready</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_thread_per_task_scheduler_1a556a0ae2cf51269358cda74b5bb94f03" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thread_per_task_scheduler_1a556a0ae2cf51269358cda74b5bb94f03" kindref="member">ThreadPerTaskScheduler::notifyReady</ref>(std::shared_ptr&lt;Task&gt;<sp/>task)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>task<sp/>from<sp/>wait<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="class_thread_per_task_scheduler_1af8ff10c404e9064f38337a296a364152" kindref="member">_setMutex</ref>.lock();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/><ref refid="class_thread_per_task_scheduler_1a44f506c63e605616c35d232b92cdf735" kindref="member">_waitSet</ref>.erase(task);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="class_thread_per_task_scheduler_1af8ff10c404e9064f38337a296a364152" kindref="member">_setMutex</ref>.unlock();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>task<sp/>was<sp/>found<sp/>in<sp/>wait<sp/>set,<sp/>schedule<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;task<sp/>ready:<sp/>&quot;<sp/>&lt;&lt;<sp/>task-&gt;vname()<sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>*t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::thread(<ref refid="class_task_executor" kindref="compound">TaskExecutor</ref>(task));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;detach();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;task<sp/>ready<sp/>fail:<sp/>&quot;<sp/>&lt;&lt;<sp/>task-&gt;vname()<sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>never<sp/>happen,<sp/>but<sp/>check<sp/>to<sp/>identify<sp/>potential<sp/>race<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG4CXX_ERROR(<ref refid="class_thread_per_task_scheduler_1a318614a9f40cfb544507115970cca7df" kindref="member">_logger</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Task<sp/>that<sp/>notified<sp/>to<sp/>be<sp/>ready<sp/>to<sp/>run<sp/>was<sp/>not<sp/>found<sp/>/<sp/>found<sp/>more<sp/>than<sp/>once<sp/>in<sp/>waitSet!<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacestd_1aa2f6c380fda0f127ac99017940bef1e9" kindref="member">std::to_string</ref>(tmp));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/vagrant/lanice/src/lib/taskscheduler/ThreadPerTaskScheduler.cpp"/>
  </compounddef>
</doxygen>
