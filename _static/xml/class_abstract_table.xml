<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="class_abstract_table" kind="class" prot="public" abstract="yes">
    <compoundname>AbstractTable</compoundname>
    <basecompoundref refid="class_abstract_resource" prot="public" virt="non-virtual">AbstractResource</basecompoundref>
    <derivedcompoundref refid="classhyrise_1_1storage_1_1_horizontal_table" prot="public" virt="non-virtual">hyrise::storage::HorizontalTable</derivedcompoundref>
    <derivedcompoundref refid="classhyrise_1_1storage_1_1_mutable_vertical_table" prot="public" virt="non-virtual">hyrise::storage::MutableVerticalTable</derivedcompoundref>
    <derivedcompoundref refid="classhyrise_1_1storage_1_1_simple_store" prot="public" virt="non-virtual">hyrise::storage::SimpleStore</derivedcompoundref>
    <derivedcompoundref refid="classhyrise_1_1storage_1_1_store" prot="public" virt="non-virtual">hyrise::storage::Store</derivedcompoundref>
    <derivedcompoundref refid="classhyrise_1_1storage_1_1_table_range_view" prot="public" virt="non-virtual">hyrise::storage::TableRangeView</derivedcompoundref>
    <derivedcompoundref refid="class_pointer_calculator" prot="public" virt="non-virtual">PointerCalculator</derivedcompoundref>
    <derivedcompoundref refid="class_raw_table" prot="public" virt="non-virtual">RawTable</derivedcompoundref>
    <derivedcompoundref refid="class_table" prot="public" virt="non-virtual">Table</derivedcompoundref>
    <includes refid="_abstract_table_8h" local="no">AbstractTable.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_abstract_table_1af76ff827deb697db8077a90c450381ab" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="class_abstract_dictionary" kindref="compound">AbstractDictionary</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;AbstractDictionary&gt; AbstractTable::SharedDictionaryPtr</definition>
        <argsstring></argsstring>
        <name>SharedDictionaryPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="64" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_abstract_table_1ad92c3c3f60882f7e2e4d5f49ebc3d505" prot="private" static="no" mutable="no">
        <type><ref refid="structunique__id" kindref="compound">unique_id</ref></type>
        <definition>unique_id AbstractTable::_uuid</definition>
        <argsstring></argsstring>
        <name>_uuid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="532" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" bodystart="532" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_abstract_table_1a435f72c573988b1438935fe0519da3a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref></type>
        <definition>hyrise::storage::atable_ptr_t AbstractTable::copy_structure</definition>
        <argsstring>(const field_list_t *fields=nullptr, bool reuse_dict=false, size_t initial_size=0, bool with_containers=true, bool compressed=false) const </argsstring>
        <name>copy_structure</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1a19cf39981ad939290f3611779b1b3449">copy_structure</reimplementedby>
        <reimplementedby refid="class_pointer_calculator_1a60d1d6c937774a1ea6915636b8d74934">copy_structure</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1a543918e6d7d613759b751eb8b3a75f79">copy_structure</reimplementedby>
        <reimplementedby refid="class_table_1ac8659d11a2cf7d0662311b7e0067b4a9">copy_structure</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1aecf3f597b161a4750901206edce9ca0e">copy_structure</reimplementedby>
        <reimplementedby refid="class_raw_table_1a7c4ecf556c9057a303ff12a85c4b1f2e">copy_structure</reimplementedby>
        <param>
          <type>const <ref refid="namespacehyrise_1_1storage_1aa2c4369081de5fd9f081ba05ae7531f7" kindref="member">field_list_t</ref> *</type>
          <declname>fields</declname>
          <defval><ref refid="csb__tree_8cpp_1ab979d9d4b4923f7c54d6caa6e1a61936" kindref="member">nullptr</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reuse_dict</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>initial_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>with_containers</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>compressed</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy the table&apos;s structure. Returns a pointer to an <ref refid="class_abstract_table" kindref="compound">AbstractTable</ref> with a copy of the current table&apos;s structure, containing all fields specified in the first parameter or all if left empty, as well as the current table&apos;s dictionary for those fields in case reuse_dict is set to true.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fields</parametername>
</parameternamelist>
<parameterdescription>
<para>List of fields to be copied (all if empty or nullptr). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reuse_dict</parametername>
</parameternamelist>
<parameterdescription>
<para>Also copy the table&apos;s dictionary (default=false). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial size of the returned table (default=0). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_containers</parametername>
</parameternamelist>
<parameterdescription>
<para>Only used by derived classes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compressed</parametername>
</parameternamelist>
<parameterdescription>
<para>Sets the compressed storage for the new table </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="79" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="23" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1aca6d9c647c92a66bd658c4c58250c715" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref></type>
        <definition>hyrise::storage::atable_ptr_t AbstractTable::copy_structure_modifiable</definition>
        <argsstring>(const field_list_t *fields=nullptr, size_t initial_size=0, bool with_containers=true) const </argsstring>
        <name>copy_structure_modifiable</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1a9004585af0562d0c9a46711d66f8582a">copy_structure_modifiable</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1aabafdeebf9458fbdcd917c00479dc07e">copy_structure_modifiable</reimplementedby>
        <reimplementedby refid="class_table_1ab65a5c456748e558a4066992fa055f84">copy_structure_modifiable</reimplementedby>
        <reimplementedby refid="class_raw_table_1ae9ca0c7f7691e95c3edb8748c897a3cc">copy_structure_modifiable</reimplementedby>
        <param>
          <type>const <ref refid="namespacehyrise_1_1storage_1aa2c4369081de5fd9f081ba05ae7531f7" kindref="member">field_list_t</ref> *</type>
          <declname>fields</declname>
          <defval><ref refid="csb__tree_8cpp_1ab979d9d4b4923f7c54d6caa6e1a61936" kindref="member">nullptr</ref></defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>initial_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>with_containers</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy the table&apos;s structure modifiable. Returns a pointer to an <ref refid="class_abstract_table" kindref="compound">AbstractTable</ref> with a copy of the current table&apos;s structure, containing all fields specified in the first parameter or all if left empty, as well as the current table&apos;s dictionary-type for each field, without values for future modification.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fields</parametername>
</parameternamelist>
<parameterdescription>
<para>List of fields to be copied (all if empty or nullptr). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial size of the returned table (default=0). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>with_containers</parametername>
</parameternamelist>
<parameterdescription>
<para>Only used by derived classes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="93" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="54" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1aea155de835135df953603e9dcbb731c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="storage__types_8h_1aa70e7ba5eb63399a65e9cfb52c2bd86e" kindref="member">ValueIdList</ref></type>
        <definition>ValueIdList AbstractTable::copyValueIds</definition>
        <argsstring>(size_t row, const field_list_t *fields=nullptr) const </argsstring>
        <name>copyValueIds</name>
        <param>
          <type>size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const <ref refid="namespacehyrise_1_1storage_1aa2c4369081de5fd9f081ba05ae7531f7" kindref="member">field_list_t</ref> *</type>
          <declname>fields</declname>
          <defval><ref refid="csb__tree_8cpp_1ab979d9d4b4923f7c54d6caa6e1a61936" kindref="member">nullptr</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value-IDs for a certain row. Returns a ValueIdList object containing a vector of ValueIds for all specified fields in a given row.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row from which to extract the ValueIDs. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fields</parametername>
</parameternamelist>
<parameterdescription>
<para>List of respected fields (all if empty). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="104" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="86" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a4d4d85fd352353254fe01a72a9635a64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="class_column_metadata" kindref="compound">ColumnMetadata</ref> *</type>
        <definition>virtual const ColumnMetadata* AbstractTable::metadataAt</definition>
        <argsstring>(size_t column, size_t row=0, table_id_t table_id=0) const =0</argsstring>
        <name>metadataAt</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_horizontal_table_1a9b98c3f38b1a70142c56e9ea4a9fd72e">metadataAt</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1af4c1058ac3b36b4158ded27ad1e6c00a">metadataAt</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1a6ea4c55b6738d41e86f19b15685ad1a4">metadataAt</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1aab14539cc8f384c354d1b10ff63c62f2">metadataAt</reimplementedby>
        <reimplementedby refid="class_pointer_calculator_1a8b02aaae5e63b1b27d518c57a308ea7b">metadataAt</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1a42b86a67e914cf6b2a2f0a61c722aba6">metadataAt</reimplementedby>
        <reimplementedby refid="class_table_1a73cdae68558b55149d278b49a34b99c3">metadataAt</reimplementedby>
        <reimplementedby refid="class_raw_table_1a8e05295f2073cda22da23201c9047cda">metadataAt</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>column</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>row</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="storage__types_8h_1ab1b21fbdc9fcb935021666db9c910755" kindref="member">table_id_t</ref></type>
          <declname>table_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the metadata for a certain column. Returns a pointer to a <ref refid="class_column_metadata" kindref="compound">ColumnMetadata</ref> object for a specified column. <simplesect kind="note"><para>Must be implemented by any derived class!</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column for which to return the metadata. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row in that column (default=0). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the table from which to extract (default=0). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="116"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a8b854b19026e75eebc02942499a82a21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="storage__types_8h_1a8776c82cf4ebeb0f86f0e83709870655" kindref="member">metadata_vec_t</ref></type>
        <definition>metadata_vec_t AbstractTable::metadata</definition>
        <argsstring>() const </argsstring>
        <name>metadata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returs a list of references to metadata of this table.</para><para>The list is newly created for all calls to this method, but the references stay the same. Thus calling this method incurrs a linear cost to the width of the table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="125" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="297" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1ad20e4bbda0d8f1d257cbb62f4c0be91c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="class_abstract_table_1af76ff827deb697db8077a90c450381ab" kindref="member">SharedDictionaryPtr</ref> &amp;</type>
        <definition>virtual const SharedDictionaryPtr&amp; AbstractTable::dictionaryAt</definition>
        <argsstring>(size_t column, size_t row=0, table_id_t table_id=0) const =0</argsstring>
        <name>dictionaryAt</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_horizontal_table_1ae7f59e9b7ea9a405b3d3b0a21b6e0df1">dictionaryAt</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1aad9595b04d94c073c963c41d3543a5ea">dictionaryAt</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1a5cc14c3c7d9ae2726e11dd8a6aed212d">dictionaryAt</reimplementedby>
        <reimplementedby refid="class_pointer_calculator_1a562260e4503193f2052f6deefb0ca122">dictionaryAt</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1aeb97a977a531969f6d4eac66b695b8c4">dictionaryAt</reimplementedby>
        <reimplementedby refid="class_table_1a19611a08af12ca41ae65c5d7ed7f1317">dictionaryAt</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1a886c94c965280985eb4dfcdb6e65c10f">dictionaryAt</reimplementedby>
        <reimplementedby refid="class_raw_table_1ae327763bb17cde7ffd1d3ba43add989b">dictionaryAt</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>column</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>row</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="storage__types_8h_1ab1b21fbdc9fcb935021666db9c910755" kindref="member">table_id_t</ref></type>
          <declname>table_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the dictionary for a certain column. <simplesect kind="note"><para>Must be implemented by any derived class!</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column from which to extract the dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row in that column (default=0). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the table from which to extract (default=0). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="135"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a619607163a0f93d8bc90c3f3a66822ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="class_abstract_table_1af76ff827deb697db8077a90c450381ab" kindref="member">SharedDictionaryPtr</ref> &amp;</type>
        <definition>virtual const SharedDictionaryPtr&amp; AbstractTable::dictionaryByTableId</definition>
        <argsstring>(size_t column, table_id_t table_id) const =0</argsstring>
        <name>dictionaryByTableId</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_horizontal_table_1aab2d74ccf11679ee5f1bf77bbef34550">dictionaryByTableId</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1a6bc8ef98e38227d0a11dabbcefa3c3fa">dictionaryByTableId</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1a3bd3f6f4500b608289185c66b8b2eb68">dictionaryByTableId</reimplementedby>
        <reimplementedby refid="class_pointer_calculator_1afec8ff877a34cb7d7dd84dcdba2c6053">dictionaryByTableId</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1aefae310dd013419d63adf33dad9ea13d">dictionaryByTableId</reimplementedby>
        <reimplementedby refid="class_table_1a4aee66485c27b931387601b18d53a5d9">dictionaryByTableId</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1affe55ed8a3d5fbab52cce5457344c41a">dictionaryByTableId</reimplementedby>
        <reimplementedby refid="class_raw_table_1a18745b268b68daf43a79aaf127b0b4c9">dictionaryByTableId</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>column</declname>
        </param>
        <param>
          <type><ref refid="storage__types_8h_1ab1b21fbdc9fcb935021666db9c910755" kindref="member">table_id_t</ref></type>
          <declname>table_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the dictionary for a certain column by table ID. <simplesect kind="note"><para>Must be implemented by any derived class!</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column from which to extract the dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the table from which to extract. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="145"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1ab1d04fdc926954e4027fb883abab1d73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_abstract_table_1af76ff827deb697db8077a90c450381ab" kindref="member">SharedDictionaryPtr</ref> &gt; *</type>
        <definition>std::vector&lt; AbstractTable::SharedDictionaryPtr &gt; * AbstractTable::dictionaries</definition>
        <argsstring>() const </argsstring>
        <name>dictionaries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get all dictionaries. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="152" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="76" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a0acc1fa146aef09f9de31768e67dfa72" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void AbstractTable::setDictionaryAt</definition>
        <argsstring>(SharedDictionaryPtr dict, size_t column, size_t row=0, table_id_t table_id=0)=0</argsstring>
        <name>setDictionaryAt</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_horizontal_table_1a2ff3549ce85aa9f6aaec72a6ec0f0b3c">setDictionaryAt</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1a975c517757c0c37003d566dc41c182d6">setDictionaryAt</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1a29d3395392cb2147f03e6d3d4dd5feef">setDictionaryAt</reimplementedby>
        <reimplementedby refid="class_pointer_calculator_1acd845d45bae50032a1dff6209f15099d">setDictionaryAt</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1a860030016eb93f2585f93665a0d50504">setDictionaryAt</reimplementedby>
        <reimplementedby refid="class_table_1a0c60535f5231afeef6066fc74df32e1e">setDictionaryAt</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1a14b32151f2728839601cd62c548007be">setDictionaryAt</reimplementedby>
        <reimplementedby refid="class_raw_table_1ab94c80351fdc0913d50c2f2b527a8f55">setDictionaryAt</reimplementedby>
        <param>
          <type><ref refid="class_abstract_table_1af76ff827deb697db8077a90c450381ab" kindref="member">SharedDictionaryPtr</ref></type>
          <declname>dict</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>column</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>row</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="storage__types_8h_1ab1b21fbdc9fcb935021666db9c910755" kindref="member">table_id_t</ref></type>
          <declname>table_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the dictionary for a certain column. <simplesect kind="note"><para>Must be implemented by any derived class!</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dict</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary to be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column for which to set the dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row in that column (default=0). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the table (default=0). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="164"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a50b40ae8ca0b789dd8ded3fc51a6f5fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="storage__types_8h_1ad8ed01ff3ff33333d8e19db4d2818bb6" kindref="member">DataType</ref></type>
        <definition>DataType AbstractTable::typeOfColumn</definition>
        <argsstring>(size_t column) const </argsstring>
        <name>typeOfColumn</name>
        <param>
          <type>size_t</type>
          <declname>column</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type of the column. <simplesect kind="note"><para>Must be implemented by any derived class!</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column from which to extract the type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="173" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="289" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a2b3fde5fb0c70f288eda47c4c66bb151" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t AbstractTable::size</definition>
        <argsstring>() const =0</argsstring>
        <name>size</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_horizontal_table_1ab9a3113bf5e1c67f039b2b8c4ce358c9">size</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1a2e8a3b054c6cfd99a5b970870823380e">size</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1a17edaa8ad1c6cacc25f048a94e995413">size</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1a8bdc4ab5d7bde93a57a008c3ed6e11d3">size</reimplementedby>
        <reimplementedby refid="class_pointer_calculator_1ac7daa76130599340823242d515b4929c">size</reimplementedby>
        <reimplementedby refid="class_table_1a4f91a50448df40f79c8077378b06ac6e">size</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1a5e1c2e4d60e386be7b36a357911ea4e1">size</reimplementedby>
        <reimplementedby refid="class_raw_table_1a21078f3425fb3e155b2f454bbc49be6e">size</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of rows in the table <simplesect kind="note"><para>Must be implemented by any derived class! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="180"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a9ba326d4ed695ff02dcdc0dd125fd16c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t AbstractTable::columnCount</definition>
        <argsstring>() const =0</argsstring>
        <name>columnCount</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_horizontal_table_1ab5dec23fb5a4728d56fce0377df2327b">columnCount</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1aac60eebabc154fadd77d2b1eae49e4e2">columnCount</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1ab3ea09f22be82464f870e75a22cc5c2e">columnCount</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1a8303af1fb3c774d652a4e108fdcbaa14">columnCount</reimplementedby>
        <reimplementedby refid="class_pointer_calculator_1a7701458e19eff9c9be5d510974be6905">columnCount</reimplementedby>
        <reimplementedby refid="class_table_1a4a09938a2928bb5765700bcb2fd98d8f">columnCount</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1a9aa8038cd2f12844b006f675d9ae7547">columnCount</reimplementedby>
        <reimplementedby refid="class_raw_table_1acfc8ef42e5efe91846c74d4d331a8d9c">columnCount</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of columns. <simplesect kind="note"><para>Must be implemented by any derived class! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="187"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1aaea606e4fd8c92a43febced405de1c6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacehyrise_1_1storage_1a5a47ffe4fe6daf66aeeaec19ed0ea5ec" kindref="member">field_t</ref></type>
        <definition>size_t AbstractTable::numberOfColumn</definition>
        <argsstring>(const std::string &amp;column) const </argsstring>
        <name>numberOfColumn</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>column</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of a column by its name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the column as String. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="194" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="269" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1af8c5434b261abfcab191852f575b4c5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string AbstractTable::nameOfColumn</definition>
        <argsstring>(size_t column) const </argsstring>
        <name>nameOfColumn</name>
        <param>
          <type>size_t</type>
          <declname>column</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the name of a column by its number.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the column as numeric value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="201" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="293" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1ae717cc86960b6488a8585d920a5f3b3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_value_id" kindref="compound">ValueId</ref></type>
        <definition>virtual ValueId AbstractTable::getValueId</definition>
        <argsstring>(size_t column, size_t row) const =0</argsstring>
        <name>getValueId</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_horizontal_table_1ad140eea8bd82bfdd62285c3445ebcecb">getValueId</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1a8b5ef2de8e2366e8a947bf105a225e72">getValueId</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1a6d3a809f89bd19c18f299c00aca8f381">getValueId</reimplementedby>
        <reimplementedby refid="class_pointer_calculator_1a8d277cfce49eb5655569ce1d131984ef">getValueId</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1a1c8eb8d8dd8585277452dd2ffbf49283">getValueId</reimplementedby>
        <reimplementedby refid="class_table_1af101f8e71447639c3ab7833a13886ab9">getValueId</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1a988d95545a47b56ad9f3eb560bf1756c">getValueId</reimplementedby>
        <reimplementedby refid="class_raw_table_1a5d4eca8f65f2209c0356f427d16952c9">getValueId</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>column</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the value-ID of a cell. <simplesect kind="note"><para>Must be implemented by any derived class!</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column number of the cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row number of the cell. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="211"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a2be48affbc5a0060e2d17128be9e91b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void AbstractTable::setValueId</definition>
        <argsstring>(size_t column, size_t row, const ValueId valueId)</argsstring>
        <name>setValueId</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_horizontal_table_1acab29a1dc52a179fcdf503518824e297">setValueId</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1a1bf39d10a598f4adb2874901c3d701e9">setValueId</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1aa94975b3c60131b10c65580ebfae8bd3">setValueId</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1af47e8e9bff335b9040548fb48e7dcac7">setValueId</reimplementedby>
        <reimplementedby refid="class_table_1af7ee2349ecdb06c7b0d26ce8a6d0bc5c">setValueId</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1a99c4d0b57761231933baef127b97337e">setValueId</reimplementedby>
        <reimplementedby refid="class_raw_table_1ade953dcd93ad8d2466e49897fbbf4d56">setValueId</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>column</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const <ref refid="class_value_id" kindref="compound">ValueId</ref></type>
          <declname>valueId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the value ID of a cell. <simplesect kind="note"><para>Should be implemented in derived classes or throws runtime error!</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column number of the cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row number of the cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valueId</parametername>
</parameternamelist>
<parameterdescription>
<para>New value-ID of the cell. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="222" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a019861d7ed5abee8c15a0511c3cbf051" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void AbstractTable::reserve</definition>
        <argsstring>(size_t nr_of_values)</argsstring>
        <name>reserve</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1a2054cb5501dfca6e6cfc632b41ba3e02">reserve</reimplementedby>
        <reimplementedby refid="class_table_1a41968edd4b3878f6fb899efc6ec61d22">reserve</reimplementedby>
        <reimplementedby refid="class_raw_table_1a70dfd7302ccf2f5111a0f6afa4666232">reserve</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>nr_of_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reorganizes the bit vector of a certain column. <simplesect kind="warning"><para>Throws runtime error if not implemented!</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nr_of_values</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of values that must fit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="231" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a92d707d52cdeabfc3cf254693b913a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void AbstractTable::resize</definition>
        <argsstring>(size_t rows)</argsstring>
        <name>resize</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1a35a5d0e91ac84a1d9b8bd0d79b4a9784">resize</reimplementedby>
        <reimplementedby refid="class_table_1a2a48728158c6b6ecb0bcae58be4895c2">resize</reimplementedby>
        <reimplementedby refid="class_raw_table_1a4c947d70e2ba5b3b2d7309db499ed33d">resize</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize the table to the given number of rows based on the parameter <simplesect kind="warning"><para>Throws runtime error if not implemented</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>The new number of rows in this table </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="240" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a53bb2089cbb287804e3160abe893e657" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>unsigned</type>
        <definition>virtual unsigned AbstractTable::partitionCount</definition>
        <argsstring>() const =0</argsstring>
        <name>partitionCount</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_horizontal_table_1a5fbcde9e97162287b0749ed46d10f93a">partitionCount</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1ad8ace15f1c0ff95ea5ea69179c3b8605">partitionCount</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1a05242ad591e7bf45552976d92f153a65">partitionCount</reimplementedby>
        <reimplementedby refid="class_pointer_calculator_1a232f2adbbe75c832c399b7fad631db3b">partitionCount</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1ae62bcfaedba68c3b7a30ec66bf7e63b0">partitionCount</reimplementedby>
        <reimplementedby refid="class_table_1a86a8548c8b311536e41b45096261b58c">partitionCount</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1addc1af4ae70ab87603f3c62f254245f7">partitionCount</reimplementedby>
        <reimplementedby refid="class_raw_table_1a7a742fd0d8f450efbacb3c7e6c0549c6">partitionCount</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of partitions in this table. <simplesect kind="note"><para>Must be implemented by any derived class! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="246"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1ac89c7ce56dca98bdfdd67263a4165447" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t AbstractTable::partitionWidth</definition>
        <argsstring>(size_t slice) const =0</argsstring>
        <name>partitionWidth</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_horizontal_table_1a52f3379727b74492647a3a8f57e57f18">partitionWidth</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1a9fd302f8ea48f3063b2c91a403217d56">partitionWidth</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1a3869bdd16c7ea19d60f72f26a8dcea03">partitionWidth</reimplementedby>
        <reimplementedby refid="class_pointer_calculator_1a105b02332c4d1468e278249c4652732c">partitionWidth</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1abc91f16bc62697823b643d0a1cdfe587">partitionWidth</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1a3b1cbce6fc67883e62894434272060a9">partitionWidth</reimplementedby>
        <reimplementedby refid="class_table_1aa719106b71b721f8c4e9eae292ca9275">partitionWidth</reimplementedby>
        <reimplementedby refid="class_raw_table_1ad5db7b2c999a1726916adb1c07e9a020">partitionWidth</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>slice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the width of a specified partition in number of attributes. <simplesect kind="note"><para>Must be implemented by any derived class!</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slice</parametername>
</parameternamelist>
<parameterdescription>
<para>The slice of interest. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="255"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a7646e80f6c075dd018bd73a70751113a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void AbstractTable::print</definition>
        <argsstring>(size_t limit=(size_t)-1) const </argsstring>
        <name>print</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1a1d80a52b004da49b7c36d1ccab5fa907">print</reimplementedby>
        <reimplementedby refid="class_pointer_calculator_1ac3e776173bb02f4b6bdfefaf91f952a4">print</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1a8d223a57ea5e103ba44c9326807540e5">print</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1a25465773b2ade0b731684630f0113a69">print</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>limit</declname>
          <defval>(size_t)-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the table </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="261" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="285" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1af5330c0a617946ad538cacea21ba7639" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="storage__types_8h_1ab1b21fbdc9fcb935021666db9c910755" kindref="member">table_id_t</ref></type>
        <definition>virtual table_id_t AbstractTable::subtableCount</definition>
        <argsstring>() const =0</argsstring>
        <name>subtableCount</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_horizontal_table_1a0302034e49dbcb14da017788e27b6bf1">subtableCount</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1aec2d656c2516df31c4d6c30ecd8a04f7">subtableCount</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1a14d67dbdaf5635c9470590519644ce19">subtableCount</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1ab6387e4a41779275e8fcd5fa6c2b9422">subtableCount</reimplementedby>
        <reimplementedby refid="class_pointer_calculator_1a55007cc7d49881dad15026eb398112a6">subtableCount</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1aacfdb44faa6e7c76b8698c19fe581c7c">subtableCount</reimplementedby>
        <reimplementedby refid="class_table_1aaef6c4697755acbb35d1dcb05cc38905">subtableCount</reimplementedby>
        <reimplementedby refid="class_raw_table_1a662f974833f302a2014b30ceb099a88d">subtableCount</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of horizontal subtables. <simplesect kind="note"><para>Must be implemented by any derived class! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="267"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a21786cf05c9871539e32e583b1e717c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_value_id" kindref="compound">ValueId</ref></type>
        <definition>ValueId AbstractTable::getValueIdForValue</definition>
        <argsstring>(const size_t column, const T value, const bool create=false, const table_id_t table_id=0) const </argsstring>
        <name>getValueIdForValue</name>
        <param>
          <type>const size_t</type>
          <declname>column</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>create</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="storage__types_8h_1ab1b21fbdc9fcb935021666db9c910755" kindref="member">table_id_t</ref></type>
          <declname>table_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Templated method to retrieve the value-ID for a given value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column containing the value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>create</parametername>
</parameternamelist>
<parameterdescription>
<para>Create the value if it is not existing (default=false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the table containing the value (default=0). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="279" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" bodystart="279" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1acd7ea07c9b1605ca53c7608c7c3b2ea5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_value_id" kindref="compound">ValueId</ref></type>
        <definition>ValueId AbstractTable::getValueIdForValueByTableId</definition>
        <argsstring>(const size_t column, const T value, const bool create=false, const table_id_t table_id=0) const </argsstring>
        <name>getValueIdForValueByTableId</name>
        <param>
          <type>const size_t</type>
          <declname>column</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>create</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="storage__types_8h_1ab1b21fbdc9fcb935021666db9c910755" kindref="member">table_id_t</ref></type>
          <declname>table_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Templated method to retrieve the value-ID for a given value. Calls dictionaryByTableId(...) instead of dictionaryAt(...)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column containing the value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>create</parametername>
</parameternamelist>
<parameterdescription>
<para>Create the value if it is not existing (default=false) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the table containing the value (default=0). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="316" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" bodystart="316" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a55de3a5a31acf6898fb9ddd287b760e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool AbstractTable::valueExists</definition>
        <argsstring>(const field_t column, const T value, const table_id_t table_id=0) const </argsstring>
        <name>valueExists</name>
        <param>
          <type>const <ref refid="storage__types_8h_1a5ce4ecb27464dc24ba394527510dd89b" kindref="member">field_t</ref></type>
          <declname>column</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="storage__types_8h_1ab1b21fbdc9fcb935021666db9c910755" kindref="member">table_id_t</ref></type>
          <declname>table_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Templated method, checks whether or not a value is contained in a column.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column to check. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to look for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the table (default=0). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="349" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a0aa362f5b907b4d79c2fb43889a8970b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AbstractTable::setValue</definition>
        <argsstring>(size_t column, size_t row, const T &amp;value)</argsstring>
        <name>setValue</name>
        <param>
          <type>size_t</type>
          <declname>column</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Templated base method for setting a value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row of the cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be assigned to the cell. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="362" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" bodystart="362" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1af380b8fd7715abe5988f53b885920e0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T AbstractTable::getValueForValueId</definition>
        <argsstring>(const field_t column, const ValueId valueId) const </argsstring>
        <name>getValueForValueId</name>
        <param>
          <type>const <ref refid="storage__types_8h_1a5ce4ecb27464dc24ba394527510dd89b" kindref="member">field_t</ref></type>
          <declname>column</declname>
        </param>
        <param>
          <type>const <ref refid="class_value_id" kindref="compound">ValueId</ref></type>
          <declname>valueId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Templated method for retrieving a value by its ID.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column containing the value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valueId</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the value to be returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="388" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" bodystart="388" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a6648aba614a398c3243a60b18d5d7dbf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T AbstractTable::getValue</definition>
        <argsstring>(const field_t column, const size_t row) const </argsstring>
        <name>getValue</name>
        <param>
          <type>const <ref refid="storage__types_8h_1a5ce4ecb27464dc24ba394527510dd89b" kindref="member">field_t</ref></type>
          <declname>column</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Templated method for retrieving a value from a cell.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row of the cell. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="405" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" bodystart="405" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1aac6e3940c4b756a4c627ece2c008782c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T AbstractTable::getValue</definition>
        <argsstring>(const field_name_t &amp;column_name, const size_t row) const </argsstring>
        <name>getValue</name>
        <param>
          <type>const <ref refid="storage__types_8h_1ad64b8c8026a86f643d173acbb694b4f8" kindref="member">field_name_t</ref> &amp;</type>
          <declname>column_name</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Templated method for retrieving a value from a cell.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row of the cell. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="425" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" bodystart="425" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a67489daa606ed64ce9874b509451e3d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string AbstractTable::printValue</definition>
        <argsstring>(size_t column, size_t row) const </argsstring>
        <name>printValue</name>
        <param>
          <type>size_t</type>
          <declname>column</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print the value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the cell containing the value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row of the cell containing the value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="437" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a4361f683288a0d1360227b309ca625f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AbstractTable::copyValueFrom</definition>
        <argsstring>(const hyrise::storage::c_atable_ptr_t &amp;source, const size_t src_col, const size_t src_row, const size_t dst_col, const size_t dst_row)</argsstring>
        <name>copyValueFrom</name>
        <param>
          <type>const <ref refid="namespacehyrise_1_1storage_1a1c9f919a7a3f09a8b304a98f1ebad3ee" kindref="member">hyrise::storage::c_atable_ptr_t</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>src_col</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>src_row</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>dst_col</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>dst_row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Templated method for copying a value from another table.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_table" kindref="compound">Table</ref> from which to copy the value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_col</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the source cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row of the source cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_col</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the target cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row of the target cell. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="450" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" bodystart="450" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a2f6d1df59bdb78f8454ea8c06c89216d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AbstractTable::copyValueFrom</definition>
        <argsstring>(const hyrise::storage::c_atable_ptr_t &amp;source, size_t src_col, size_t src_row, size_t dst_col, size_t dst_row)</argsstring>
        <name>copyValueFrom</name>
        <param>
          <type>const <ref refid="namespacehyrise_1_1storage_1a1c9f919a7a3f09a8b304a98f1ebad3ee" kindref="member">hyrise::storage::c_atable_ptr_t</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_col</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_row</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_col</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies a value from another table by column and row.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_table" kindref="compound">Table</ref> from which to copy the value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_col</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the source cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row of the source cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_col</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the target cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row of the target cell. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="465"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a06029159a39fac33676c09daa3f7f849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AbstractTable::copyValueFrom</definition>
        <argsstring>(const hyrise::storage::c_atable_ptr_t &amp;source, size_t src_col, ValueId vid, size_t dst_col, size_t dst_row)</argsstring>
        <name>copyValueFrom</name>
        <param>
          <type>const <ref refid="namespacehyrise_1_1storage_1a1c9f919a7a3f09a8b304a98f1ebad3ee" kindref="member">hyrise::storage::c_atable_ptr_t</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_col</declname>
        </param>
        <param>
          <type><ref refid="class_value_id" kindref="compound">ValueId</ref></type>
          <declname>vid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_col</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies a value from another table by column and value-ID.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_table" kindref="compound">Table</ref> from which to copy the value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_col</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the source cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vid</parametername>
</parameternamelist>
<parameterdescription>
<para>Value-ID in the source Column. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_col</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the target cell. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row of the target cell. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="477" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="122" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1ad4973d95d29deb5142d6e6b308346a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AbstractTable::copyRowFrom</definition>
        <argsstring>(const hyrise::storage::c_atable_ptr_t &amp;source, size_t src_row, size_t dst_row, bool copy_values=true, bool use_memcpy=true)</argsstring>
        <name>copyRowFrom</name>
        <param>
          <type>const <ref refid="namespacehyrise_1_1storage_1a1c9f919a7a3f09a8b304a98f1ebad3ee" kindref="member">hyrise::storage::c_atable_ptr_t</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_row</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_row</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copy_values</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>use_memcpy</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies a row from another table with or without values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_table" kindref="compound">Table</ref> from which to copy the value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row in the source table. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row in the target table. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy_values</parametername>
</parameternamelist>
<parameterdescription>
<para>Also copy the values (default=true). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_memcpy</parametername>
</parameternamelist>
<parameterdescription>
<para>Use memcpy for the copying (default=true). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="489" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="138" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a8e1d6f1b61390fc3e6954fbaa1f7745f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AbstractTable::write</definition>
        <argsstring>(const std::string &amp;filename) const </argsstring>
        <name>write</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the table data into a file as-is.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file to be written to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="497" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="164" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1af716c04f38a6ab47b277911baf050c9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AbstractTable::contentEquals</definition>
        <argsstring>(const hyrise::storage::c_atable_ptr_t &amp;other) const </argsstring>
        <name>contentEquals</name>
        <param>
          <type>const <ref refid="namespacehyrise_1_1storage_1a1c9f919a7a3f09a8b304a98f1ebad3ee" kindref="member">hyrise::storage::c_atable_ptr_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test for equality of this table&apos;s content with another table&apos;s.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_table" kindref="compound">Table</ref> to compare content to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="506" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="217" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a87134964b75abb36c49d0c44455d23e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacehyrise_1_1storage_1a21d5e900c20019710828c453eaded1ee" kindref="member">hyrise::storage::atable_ptr_t</ref></type>
        <definition>virtual hyrise::storage::atable_ptr_t AbstractTable::copy</definition>
        <argsstring>() const =0</argsstring>
        <name>copy</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_horizontal_table_1a1027f0c9d70a1b7a37c1566bcf50d3b2">copy</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1a29cc063da0c028e6bd57545512ca4a0e">copy</reimplementedby>
        <reimplementedby refid="class_pointer_calculator_1a9682236645d573e4a55fa6a25bb7b76c">copy</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1a3b4cce0dba667c2bac3593dad5a254e5">copy</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1a643a2342a8e73fafd8d2bd68d2f5c141">copy</reimplementedby>
        <reimplementedby refid="class_table_1abac05af8a4b561c460b82c6562c5f458">copy</reimplementedby>
        <reimplementedby refid="class_raw_table_1a33d1e6ccd93af0e6c26d4f4961879285">copy</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1a542554a914a1ef379f9c4172f4676a41">copy</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create of copy of this table. <simplesect kind="note"><para>Must be implemented by any derived class! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="513"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a3467bc6159aa361db993c3fc56584789" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="_abstract_table_8h_1ae3a004c859daed205eb7639b1e993ce4" kindref="member">attr_vectors_t</ref></type>
        <definition>const attr_vectors_t AbstractTable::getAttributeVectors</definition>
        <argsstring>(size_t column) const </argsstring>
        <name>getAttributeVectors</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1adec3396e2d9b86008c2824d724b47c0c">getAttributeVectors</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1a39bc1cf482300b9d92d16ebe3e78040a">getAttributeVectors</reimplementedby>
        <reimplementedby refid="class_table_1a67a078932297b90aba2aeb12a675faea">getAttributeVectors</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>column</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get underlying attribute vectors for column</para><para>This method returns a struct containing the reference to the attribute vector and the offset of the attribut in this vector. This allows a direct access to the memory and keeping the high-level data structures. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="522" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="304" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1a4262181544d5392b71735518088631ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void AbstractTable::debugStructure</definition>
        <argsstring>(size_t level=0) const </argsstring>
        <name>debugStructure</name>
        <reimplementedby refid="classhyrise_1_1storage_1_1_horizontal_table_1ae73480e3e69f186a35adf8c95c63d02b">debugStructure</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_mutable_vertical_table_1af87628b89131906a77b8b2659fe940dd">debugStructure</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_table_range_view_1a1f6e49531a81df6390717b43b3d77e9e">debugStructure</reimplementedby>
        <reimplementedby refid="class_pointer_calculator_1aa1c50ecf298b9d1843de7c8e4e6e4939">debugStructure</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_store_1aeefceb701251fc593f8872a89b6ead8d">debugStructure</reimplementedby>
        <reimplementedby refid="class_table_1a1259e9256ea0f37a264eb43c2e215835">debugStructure</reimplementedby>
        <reimplementedby refid="classhyrise_1_1storage_1_1_simple_store_1aa6181dddf27e89aa0110e09667ab9940">debugStructure</reimplementedby>
        <reimplementedby refid="class_raw_table_1a349e0eb48d675835737135ee0090968d">debugStructure</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="524" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="308" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1af820249fa63adfdd1e678572555f6886" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structunique__id" kindref="compound">unique_id</ref></type>
        <definition>unique_id AbstractTable::getUuid</definition>
        <argsstring>() const </argsstring>
        <name>getUuid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="526" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="312" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="class_abstract_table_1ade4da17f60dbde2148f25b849528f624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AbstractTable::setUuid</definition>
        <argsstring>(unique_id=unique_id())</argsstring>
        <name>setUuid</name>
        <param>
          <type><ref refid="structunique__id" kindref="compound">unique_id</ref></type>
          <defname>u</defname>
          <defval><ref refid="structunique__id" kindref="compound">unique_id</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="528" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.cpp" bodystart="316" bodyend="321"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Abstract table is the magic base class for all data storages, it is used in many different ways, in containers, plain tables, intermediate results and more. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1521">
        <label>hyrise::storage::TableRangeView</label>
        <link refid="classhyrise_1_1storage_1_1_table_range_view"/>
        <childnode refid="1515" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1517">
        <label>hyrise::storage::HorizontalTable</label>
        <link refid="classhyrise_1_1storage_1_1_horizontal_table"/>
        <childnode refid="1515" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1524">
        <label>Table</label>
        <link refid="class_table"/>
        <childnode refid="1515" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1515">
        <label>AbstractTable</label>
        <link refid="class_abstract_table"/>
        <childnode refid="1516" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1518">
        <label>hyrise::storage::MutableVerticalTable</label>
        <link refid="classhyrise_1_1storage_1_1_mutable_vertical_table"/>
        <childnode refid="1515" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1516">
        <label>AbstractResource</label>
        <link refid="class_abstract_resource"/>
      </node>
      <node id="1520">
        <label>hyrise::storage::Store</label>
        <link refid="classhyrise_1_1storage_1_1_store"/>
        <childnode refid="1515" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1522">
        <label>PointerCalculator</label>
        <link refid="class_pointer_calculator"/>
        <childnode refid="1515" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1519">
        <label>hyrise::storage::SimpleStore</label>
        <link refid="classhyrise_1_1storage_1_1_simple_store"/>
        <childnode refid="1515" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1523">
        <label>RawTable</label>
        <link refid="class_raw_table"/>
        <childnode refid="1515" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1525">
        <label>AbstractTable</label>
        <link refid="class_abstract_table"/>
        <childnode refid="1526" relation="public-inheritance">
        </childnode>
        <childnode refid="1527" relation="usage">
          <edgelabel>-_uuid</edgelabel>
        </childnode>
      </node>
      <node id="1526">
        <label>AbstractResource</label>
        <link refid="class_abstract_resource"/>
      </node>
      <node id="1527">
        <label>unique_id</label>
        <link refid="structunique__id"/>
      </node>
    </collaborationgraph>
    <location file="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" line="60" bodyfile="/home/captain/HPI/aepic/hyrise/src/lib/storage/AbstractTable.h" bodystart="60" bodyend="533"/>
    <listofallmembers>
      <member refid="class_abstract_table_1ad92c3c3f60882f7e2e4d5f49ebc3d505" prot="private" virt="non-virtual"><scope>AbstractTable</scope><name>_uuid</name></member>
      <member refid="class_abstract_table_1a9ba326d4ed695ff02dcdc0dd125fd16c" prot="public" virt="pure-virtual"><scope>AbstractTable</scope><name>columnCount</name></member>
      <member refid="class_abstract_table_1af716c04f38a6ab47b277911baf050c9d" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>contentEquals</name></member>
      <member refid="class_abstract_table_1a87134964b75abb36c49d0c44455d23e2" prot="public" virt="pure-virtual"><scope>AbstractTable</scope><name>copy</name></member>
      <member refid="class_abstract_table_1a435f72c573988b1438935fe0519da3a7" prot="public" virt="virtual"><scope>AbstractTable</scope><name>copy_structure</name></member>
      <member refid="class_abstract_table_1aca6d9c647c92a66bd658c4c58250c715" prot="public" virt="virtual"><scope>AbstractTable</scope><name>copy_structure_modifiable</name></member>
      <member refid="class_abstract_table_1ad4973d95d29deb5142d6e6b308346a42" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>copyRowFrom</name></member>
      <member refid="class_abstract_table_1a4361f683288a0d1360227b309ca625f6" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>copyValueFrom</name></member>
      <member refid="class_abstract_table_1a2f6d1df59bdb78f8454ea8c06c89216d" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>copyValueFrom</name></member>
      <member refid="class_abstract_table_1a06029159a39fac33676c09daa3f7f849" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>copyValueFrom</name></member>
      <member refid="class_abstract_table_1aea155de835135df953603e9dcbb731c3" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>copyValueIds</name></member>
      <member refid="class_abstract_table_1a4262181544d5392b71735518088631ff" prot="public" virt="virtual"><scope>AbstractTable</scope><name>debugStructure</name></member>
      <member refid="class_abstract_table_1ab1d04fdc926954e4027fb883abab1d73" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>dictionaries</name></member>
      <member refid="class_abstract_table_1ad20e4bbda0d8f1d257cbb62f4c0be91c" prot="public" virt="pure-virtual"><scope>AbstractTable</scope><name>dictionaryAt</name></member>
      <member refid="class_abstract_table_1a619607163a0f93d8bc90c3f3a66822ff" prot="public" virt="pure-virtual"><scope>AbstractTable</scope><name>dictionaryByTableId</name></member>
      <member refid="class_abstract_table_1a3467bc6159aa361db993c3fc56584789" prot="public" virt="virtual"><scope>AbstractTable</scope><name>getAttributeVectors</name></member>
      <member refid="class_abstract_table_1af820249fa63adfdd1e678572555f6886" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>getUuid</name></member>
      <member refid="class_abstract_table_1a6648aba614a398c3243a60b18d5d7dbf" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>getValue</name></member>
      <member refid="class_abstract_table_1aac6e3940c4b756a4c627ece2c008782c" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>getValue</name></member>
      <member refid="class_abstract_table_1af380b8fd7715abe5988f53b885920e0c" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>getValueForValueId</name></member>
      <member refid="class_abstract_table_1ae717cc86960b6488a8585d920a5f3b3d" prot="public" virt="pure-virtual"><scope>AbstractTable</scope><name>getValueId</name></member>
      <member refid="class_abstract_table_1a21786cf05c9871539e32e583b1e717c4" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>getValueIdForValue</name></member>
      <member refid="class_abstract_table_1acd7ea07c9b1605ca53c7608c7c3b2ea5" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>getValueIdForValueByTableId</name></member>
      <member refid="class_abstract_table_1a8b854b19026e75eebc02942499a82a21" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>metadata</name></member>
      <member refid="class_abstract_table_1a4d4d85fd352353254fe01a72a9635a64" prot="public" virt="pure-virtual"><scope>AbstractTable</scope><name>metadataAt</name></member>
      <member refid="class_abstract_table_1af8c5434b261abfcab191852f575b4c5a" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>nameOfColumn</name></member>
      <member refid="class_abstract_table_1aaea606e4fd8c92a43febced405de1c6c" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>numberOfColumn</name></member>
      <member refid="class_abstract_table_1a53bb2089cbb287804e3160abe893e657" prot="public" virt="pure-virtual"><scope>AbstractTable</scope><name>partitionCount</name></member>
      <member refid="class_abstract_table_1ac89c7ce56dca98bdfdd67263a4165447" prot="public" virt="pure-virtual"><scope>AbstractTable</scope><name>partitionWidth</name></member>
      <member refid="class_abstract_table_1a7646e80f6c075dd018bd73a70751113a" prot="public" virt="virtual"><scope>AbstractTable</scope><name>print</name></member>
      <member refid="class_abstract_table_1a67489daa606ed64ce9874b509451e3d9" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>printValue</name></member>
      <member refid="class_abstract_table_1a019861d7ed5abee8c15a0511c3cbf051" prot="public" virt="virtual"><scope>AbstractTable</scope><name>reserve</name></member>
      <member refid="class_abstract_table_1a92d707d52cdeabfc3cf254693b913a81" prot="public" virt="virtual"><scope>AbstractTable</scope><name>resize</name></member>
      <member refid="class_abstract_table_1a0acc1fa146aef09f9de31768e67dfa72" prot="public" virt="pure-virtual"><scope>AbstractTable</scope><name>setDictionaryAt</name></member>
      <member refid="class_abstract_table_1ade4da17f60dbde2148f25b849528f624" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>setUuid</name></member>
      <member refid="class_abstract_table_1a0aa362f5b907b4d79c2fb43889a8970b" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>setValue</name></member>
      <member refid="class_abstract_table_1a2be48affbc5a0060e2d17128be9e91b9" prot="public" virt="virtual"><scope>AbstractTable</scope><name>setValueId</name></member>
      <member refid="class_abstract_table_1af76ff827deb697db8077a90c450381ab" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>SharedDictionaryPtr</name></member>
      <member refid="class_abstract_table_1a2b3fde5fb0c70f288eda47c4c66bb151" prot="public" virt="pure-virtual"><scope>AbstractTable</scope><name>size</name></member>
      <member refid="class_abstract_table_1af5330c0a617946ad538cacea21ba7639" prot="public" virt="pure-virtual"><scope>AbstractTable</scope><name>subtableCount</name></member>
      <member refid="class_abstract_table_1a50b40ae8ca0b789dd8ded3fc51a6f5fd" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>typeOfColumn</name></member>
      <member refid="class_abstract_table_1a55de3a5a31acf6898fb9ddd287b760e3" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>valueExists</name></member>
      <member refid="class_abstract_table_1a8e1d6f1b61390fc3e6954fbaa1f7745f" prot="public" virt="non-virtual"><scope>AbstractTable</scope><name>write</name></member>
      <member refid="class_abstract_resource_1acbf6801fec7bf1acf0d90a4fb5d5c706" prot="public" virt="virtual"><scope>AbstractTable</scope><name>~AbstractResource</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
