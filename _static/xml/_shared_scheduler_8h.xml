<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="_shared_scheduler_8h" kind="file">
    <compoundname>SharedScheduler.h</compoundname>
    <includes refid="_abstract_task_scheduler_8h" local="no">taskscheduler/AbstractTaskScheduler.h</includes>
    <includes local="no">stdexcept</includes>
    <includedby refid="bin_2hyrise_2main_8cpp" local="yes">src/bin/hyrise/main.cpp</includedby>
    <includedby refid="_request_parse_task_8cpp" local="yes">src/lib/access/system/RequestParseTask.cpp</includedby>
    <includedby refid="_async_connection_8cpp" local="yes">src/lib/net/AsyncConnection.cpp</includedby>
    <includedby refid="_central_priority_scheduler_8h" local="no">src/lib/taskscheduler/CentralPriorityScheduler.h</includedby>
    <includedby refid="_central_scheduler_8h" local="no">src/lib/taskscheduler/CentralScheduler.h</includedby>
    <includedby refid="_core_bound_priority_queues_scheduler_8cpp" local="yes">src/lib/taskscheduler/CoreBoundPriorityQueuesScheduler.cpp</includedby>
    <includedby refid="_core_bound_queues_scheduler_8cpp" local="yes">src/lib/taskscheduler/CoreBoundQueuesScheduler.cpp</includedby>
    <includedby refid="_thread_per_task_scheduler_8h" local="no">src/lib/taskscheduler/ThreadPerTaskScheduler.h</includedby>
    <includedby refid="_w_s_core_bound_priority_queues_scheduler_8cpp" local="yes">src/lib/taskscheduler/WSCoreBoundPriorityQueuesScheduler.cpp</includedby>
    <includedby refid="_w_s_core_bound_queues_scheduler_8cpp" local="yes">src/lib/taskscheduler/WSCoreBoundQueuesScheduler.cpp</includedby>
    <incdepgraph>
      <node id="18867">
        <label>queue</label>
      </node>
      <node id="18865">
        <label>taskscheduler/AbstractTaskQueue.h</label>
        <link refid="_abstract_task_queue_8h"/>
        <childnode refid="18862" relation="include">
        </childnode>
        <childnode refid="18861" relation="include">
        </childnode>
        <childnode refid="18866" relation="include">
        </childnode>
        <childnode refid="18867" relation="include">
        </childnode>
        <childnode refid="18863" relation="include">
        </childnode>
        <childnode refid="18868" relation="include">
        </childnode>
        <childnode refid="18859" relation="include">
        </childnode>
      </node>
      <node id="18859">
        <label>taskscheduler/Task.h</label>
        <link refid="_task_8h"/>
        <childnode refid="18860" relation="include">
        </childnode>
        <childnode refid="18861" relation="include">
        </childnode>
        <childnode refid="18862" relation="include">
        </childnode>
        <childnode refid="18863" relation="include">
        </childnode>
        <childnode refid="18864" relation="include">
        </childnode>
      </node>
      <node id="18873">
        <label>stdexcept</label>
      </node>
      <node id="18864">
        <label>string</label>
      </node>
      <node id="18869">
        <label>unordered_set</label>
      </node>
      <node id="18872">
        <label>hwloc.h</label>
      </node>
      <node id="18863">
        <label>condition_variable</label>
      </node>
      <node id="18871">
        <label>helper/HwlocHelper.h</label>
        <link refid="_hwloc_helper_8h"/>
        <childnode refid="18872" relation="include">
        </childnode>
        <childnode refid="18860" relation="include">
        </childnode>
      </node>
      <node id="18860">
        <label>vector</label>
      </node>
      <node id="18870">
        <label>iostream</label>
      </node>
      <node id="18858">
        <label>taskscheduler/AbstractTaskScheduler.h</label>
        <link refid="_abstract_task_scheduler_8h"/>
        <childnode refid="18859" relation="include">
        </childnode>
        <childnode refid="18865" relation="include">
        </childnode>
        <childnode refid="18862" relation="include">
        </childnode>
        <childnode refid="18869" relation="include">
        </childnode>
        <childnode refid="18870" relation="include">
        </childnode>
        <childnode refid="18868" relation="include">
        </childnode>
        <childnode refid="18871" relation="include">
        </childnode>
      </node>
      <node id="18857">
        <label>src/lib/taskscheduler/SharedScheduler.h</label>
        <link refid="SharedScheduler.h"/>
        <childnode refid="18858" relation="include">
        </childnode>
        <childnode refid="18873" relation="include">
        </childnode>
      </node>
      <node id="18861">
        <label>mutex</label>
      </node>
      <node id="18866">
        <label>thread</label>
      </node>
      <node id="18868">
        <label>log4cxx/logger.h</label>
      </node>
      <node id="18862">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="18883">
        <label>src/lib/taskscheduler/CoreBoundQueuesScheduler.cpp</label>
        <link refid="_core_bound_queues_scheduler_8cpp"/>
      </node>
      <node id="18881">
        <label>src/lib/taskscheduler/CentralScheduler.cpp</label>
        <link refid="_central_scheduler_8cpp"/>
      </node>
      <node id="18876">
        <label>src/lib/access/system/RequestParseTask.cpp</label>
        <link refid="_request_parse_task_8cpp"/>
      </node>
      <node id="18885">
        <label>src/lib/taskscheduler/ThreadPerTaskScheduler.cpp</label>
        <link refid="_thread_per_task_scheduler_8cpp"/>
      </node>
      <node id="18886">
        <label>src/lib/taskscheduler/WSCoreBoundPriorityQueuesScheduler.cpp</label>
        <link refid="_w_s_core_bound_priority_queues_scheduler_8cpp"/>
      </node>
      <node id="18880">
        <label>src/lib/taskscheduler/CentralScheduler.h</label>
        <link refid="_central_scheduler_8h"/>
        <childnode refid="18881" relation="include">
        </childnode>
      </node>
      <node id="18882">
        <label>src/lib/taskscheduler/CoreBoundPriorityQueuesScheduler.cpp</label>
        <link refid="_core_bound_priority_queues_scheduler_8cpp"/>
      </node>
      <node id="18879">
        <label>src/lib/taskscheduler/CentralPriorityScheduler.cpp</label>
        <link refid="_central_priority_scheduler_8cpp"/>
      </node>
      <node id="18887">
        <label>src/lib/taskscheduler/WSCoreBoundQueuesScheduler.cpp</label>
        <link refid="_w_s_core_bound_queues_scheduler_8cpp"/>
      </node>
      <node id="18875">
        <label>src/bin/hyrise/main.cpp</label>
        <link refid="bin_2hyrise_2main_8cpp"/>
      </node>
      <node id="18878">
        <label>src/lib/taskscheduler/CentralPriorityScheduler.h</label>
        <link refid="_central_priority_scheduler_8h"/>
        <childnode refid="18879" relation="include">
        </childnode>
      </node>
      <node id="18874">
        <label>src/lib/taskscheduler/SharedScheduler.h</label>
        <link refid="SharedScheduler.h"/>
        <childnode refid="18875" relation="include">
        </childnode>
        <childnode refid="18876" relation="include">
        </childnode>
        <childnode refid="18877" relation="include">
        </childnode>
        <childnode refid="18878" relation="include">
        </childnode>
        <childnode refid="18880" relation="include">
        </childnode>
        <childnode refid="18882" relation="include">
        </childnode>
        <childnode refid="18883" relation="include">
        </childnode>
        <childnode refid="18884" relation="include">
        </childnode>
        <childnode refid="18886" relation="include">
        </childnode>
        <childnode refid="18887" relation="include">
        </childnode>
      </node>
      <node id="18884">
        <label>src/lib/taskscheduler/ThreadPerTaskScheduler.h</label>
        <link refid="_thread_per_task_scheduler_8h"/>
        <childnode refid="18885" relation="include">
        </childnode>
      </node>
      <node id="18877">
        <label>src/lib/net/AsyncConnection.cpp</label>
        <link refid="_async_connection_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_abstract_task_scheduler_factory" prot="public">AbstractTaskSchedulerFactory</innerclass>
    <innerclass refid="struct_task_scheduler_factory" prot="public">TaskSchedulerFactory</innerclass>
    <innerclass refid="class_scheduler_exception" prot="public">SchedulerException</innerclass>
    <innerclass refid="class_shared_scheduler" prot="public">SharedScheduler</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>SharedScheduler.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>May<sp/>24,<sp/>2012</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>jwust</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SRC_LIB_TASKSCHEDULER_SHAREDSCHEDULER_H_</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SRC_LIB_TASKSCHEDULER_SHAREDSCHEDULER_H_</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_abstract_task_scheduler_8h" kindref="compound">taskscheduler/AbstractTaskScheduler.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="struct_abstract_task_scheduler_factory" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_abstract_task_scheduler_factory" kindref="compound">AbstractTaskSchedulerFactory</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_abstract_task_scheduler" kindref="compound">AbstractTaskScheduler</ref><sp/>*<sp/><ref refid="struct_abstract_task_scheduler_factory_1a036bed421c21d4436eb4bd348c6a3fa2" kindref="member">create</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cores)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="17" refid="struct_abstract_task_scheduler_factory_1a9e9ce1aa374b984b15bc1929c9e1aa92" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_abstract_task_scheduler_factory_1a9e9ce1aa374b984b15bc1929c9e1aa92" kindref="member">~AbstractTaskSchedulerFactory</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="18"><highlight class="normal">};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="22" refid="struct_task_scheduler_factory" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_task_scheduler_factory" kindref="compound" tooltip="Factory for schedulers, implements abstract factory pattern.">TaskSchedulerFactory</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_abstract_task_scheduler_factory" kindref="compound">AbstractTaskSchedulerFactory</ref><sp/>{</highlight></codeline>
<codeline lineno="23" refid="struct_task_scheduler_factory_1a23e756afc99e86a56b246973049039d8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_task_scheduler" kindref="compound">AbstractTaskScheduler</ref><sp/>*<sp/><ref refid="struct_task_scheduler_factory_1a23e756afc99e86a56b246973049039d8" kindref="member">create</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cores)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(cores);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="class_scheduler_exception" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_scheduler_exception" kindref="compound" tooltip="For all Scheduler related exceptions.">SchedulerException</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::runtime_error<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31" refid="class_scheduler_exception_1aa15392c4041084624a0e2e437bd7dde2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_scheduler_exception_1aa15392c4041084624a0e2e437bd7dde2" kindref="member">SchedulerException</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message):<sp/>std::runtime_error(message){}</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>Singleton;<sp/>provides<sp/>reference<sp/>to<sp/>a<sp/>shared<sp/>scheduler<sp/>object;<sp/>scheduler<sp/>is<sp/>set<sp/>by<sp/>string;<sp/>schedulers<sp/>can<sp/>registers</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="class_shared_scheduler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_shared_scheduler" kindref="compound">SharedScheduler</ref>{</highlight></codeline>
<codeline lineno="38" refid="class_shared_scheduler_1ac8d03cefb98838b557730a8ce9408f49" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;<sp/>std::string,<sp/>AbstractTaskSchedulerFactory<sp/>*<sp/>&gt;<sp/><ref refid="class_shared_scheduler_1ac8d03cefb98838b557730a8ce9408f49" kindref="member">factory_map_t</ref>;</highlight></codeline>
<codeline lineno="39" refid="class_shared_scheduler_1a4ae504aea1a1f953190e6e85b0622cc3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_shared_scheduler_1ac8d03cefb98838b557730a8ce9408f49" kindref="member">factory_map_t</ref><sp/><ref refid="class_shared_scheduler_1a4ae504aea1a1f953190e6e85b0622cc3" kindref="member">_schedulers</ref>;</highlight></codeline>
<codeline lineno="40" refid="class_shared_scheduler_1aafdf047bfd43a65f3ad3db6f8c02575d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_task_scheduler" kindref="compound">AbstractTaskScheduler</ref><sp/>*<sp/><ref refid="class_shared_scheduler_1aafdf047bfd43a65f3ad3db6f8c02575d" kindref="member">_sharedScheduler</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="class_shared_scheduler_1aef0da1bac016b1dd4bf65cbb0f660b25" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_shared_scheduler_1aef0da1bac016b1dd4bf65cbb0f660b25" kindref="member">SharedScheduler</ref>(){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_shared_scheduler_1aafdf047bfd43a65f3ad3db6f8c02575d" kindref="member">_sharedScheduler</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_shared_scheduler_1a5ae5c9aea9e1d9d9db4e90c5f97cccd9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_shared_scheduler_1a5ae5c9aea9e1d9d9db4e90c5f97cccd9" kindref="member">~SharedScheduler</ref>(){</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_shared_scheduler_1a4ae504aea1a1f953190e6e85b0622cc3" kindref="member">_schedulers</ref>.clear();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_shared_scheduler_1aafdf047bfd43a65f3ad3db6f8c02575d" kindref="member">_sharedScheduler</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TaskSchedulerClass&gt;</highlight></codeline>
<codeline lineno="54" refid="class_shared_scheduler_1a289f87a7badc079ee676accc9551321f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_shared_scheduler_1a289f87a7badc079ee676accc9551321f" kindref="member">registerScheduler</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;scheduler){</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;sharedScheduler<sp/>=<sp/><ref refid="class_shared_scheduler_1a8339d8db9b226ca95bca5dcc31f216f5" kindref="member">SharedScheduler::getInstance</ref>();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_abstract_task_scheduler_factory" kindref="compound">AbstractTaskSchedulerFactory</ref><sp/>*<sp/>factory<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_task_scheduler_factory" kindref="compound" tooltip="Factory for schedulers, implements abstract factory pattern.">TaskSchedulerFactory&lt;TaskSchedulerClass&gt;</ref>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>sharedScheduler.addScheduler(scheduler,<sp/>factory);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="class_shared_scheduler_1a9824d616ade198f080ca24585159cdc2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_shared_scheduler_1a9824d616ade198f080ca24585159cdc2" kindref="member">addScheduler</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;scheduler,<sp/><ref refid="struct_abstract_task_scheduler_factory" kindref="compound">AbstractTaskSchedulerFactory</ref><sp/>*<sp/>factory){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_shared_scheduler_1a4ae504aea1a1f953190e6e85b0622cc3" kindref="member">_schedulers</ref>[scheduler]<sp/>=<sp/>factory;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="class_shared_scheduler_1abf2a6e9583cd5ae12aff86f85dbee891" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_shared_scheduler_1abf2a6e9583cd5ae12aff86f85dbee891" kindref="member">isInitialized</ref>(){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_shared_scheduler_1aafdf047bfd43a65f3ad3db6f8c02575d" kindref="member">_sharedScheduler</ref><sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="class_shared_scheduler_1aee12bff614b19e1146f6c1a1a670c307" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_shared_scheduler_1aee12bff614b19e1146f6c1a1a670c307" kindref="member">init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;scheduler,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cores<sp/>=<sp/><ref refid="_hwloc_helper_8cpp_1a5852d7c54d41ff6c71f33e4b89a5f059" kindref="member">getNumberOfCoresOnSystem</ref>()){</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_shared_scheduler_1aafdf047bfd43a65f3ad3db6f8c02575d" kindref="member">_sharedScheduler</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_scheduler_exception" kindref="compound" tooltip="For all Scheduler related exceptions.">SchedulerException</ref>(</highlight><highlight class="stringliteral">&quot;Scheduler<sp/>has<sp/>already<sp/>been<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_shared_scheduler_1a4ae504aea1a1f953190e6e85b0622cc3" kindref="member">_schedulers</ref>.find(scheduler)<sp/>!=<sp/><ref refid="class_shared_scheduler_1a4ae504aea1a1f953190e6e85b0622cc3" kindref="member">_schedulers</ref>.end()){</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_shared_scheduler_1aafdf047bfd43a65f3ad3db6f8c02575d" kindref="member">_sharedScheduler</ref><sp/>=<sp/><ref refid="class_shared_scheduler_1a4ae504aea1a1f953190e6e85b0622cc3" kindref="member">_schedulers</ref>[scheduler]-&gt;create(cores);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_scheduler_exception" kindref="compound" tooltip="For all Scheduler related exceptions.">SchedulerException</ref>(</highlight><highlight class="stringliteral">&quot;Requested<sp/>scheduler<sp/>was<sp/>not<sp/>registered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/>*<sp/>stops<sp/>current<sp/>scheduler<sp/>gracefully;<sp/>starts<sp/>new<sp/>scheduler</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="class_shared_scheduler_1a7d79c6b9dd9bd763b2f7e8b8222060c3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_shared_scheduler_1a7d79c6b9dd9bd763b2f7e8b8222060c3" kindref="member">resetScheduler</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;scheduler,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cores<sp/>=<sp/><ref refid="_hwloc_helper_8cpp_1a5852d7c54d41ff6c71f33e4b89a5f059" kindref="member">getNumberOfCoresOnSystem</ref>()){</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_shared_scheduler_1aafdf047bfd43a65f3ad3db6f8c02575d" kindref="member">_sharedScheduler</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_shared_scheduler_1aafdf047bfd43a65f3ad3db6f8c02575d" kindref="member">_sharedScheduler</ref>-&gt;<ref refid="class_abstract_task_scheduler_1a2be53dd1c0676d50f2fd4cc97bce4406" kindref="member">shutdown</ref>();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_shared_scheduler_1a4ae504aea1a1f953190e6e85b0622cc3" kindref="member">_schedulers</ref>.find(scheduler)<sp/>!=<sp/><ref refid="class_shared_scheduler_1a4ae504aea1a1f953190e6e85b0622cc3" kindref="member">_schedulers</ref>.end()){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_shared_scheduler_1aafdf047bfd43a65f3ad3db6f8c02575d" kindref="member">_sharedScheduler</ref><sp/>=<sp/><ref refid="class_shared_scheduler_1a4ae504aea1a1f953190e6e85b0622cc3" kindref="member">_schedulers</ref>[scheduler]-&gt;create(cores);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class_scheduler_exception" kindref="compound" tooltip="For all Scheduler related exceptions.">SchedulerException</ref>(</highlight><highlight class="stringliteral">&quot;Requested<sp/>scheduler<sp/>was<sp/>not<sp/>registered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="class_shared_scheduler_1a10e97e4f3ccc5046ff9844d855ee0c9c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_abstract_task_scheduler" kindref="compound">AbstractTaskScheduler</ref><sp/>*<sp/><ref refid="class_shared_scheduler_1a10e97e4f3ccc5046ff9844d855ee0c9c" kindref="member">getScheduler</ref>()<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_shared_scheduler_1aafdf047bfd43a65f3ad3db6f8c02575d" kindref="member">_sharedScheduler</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="class_shared_scheduler_1a8339d8db9b226ca95bca5dcc31f216f5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_shared_scheduler" kindref="compound">SharedScheduler</ref><sp/>&amp;<ref refid="class_shared_scheduler_1a8339d8db9b226ca95bca5dcc31f216f5" kindref="member">getInstance</ref>(){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_shared_scheduler" kindref="compound">SharedScheduler</ref><sp/>s;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal">};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>SRC_LIB_TASKSCHEDULER_SHAREDSCHEDULER_H_</highlight></codeline>
    </programlisting>
    <location file="/home/vagrant/lanice/src/lib/taskscheduler/SharedScheduler.h"/>
  </compounddef>
</doxygen>
