<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="expression__types_8cpp" kind="file">
    <compoundname>expression_types.cpp</compoundname>
    <includes refid="expression__types_8h" local="yes">expression_types.h</includes>
    <includes local="no">stdexcept</includes>
    <incdepgraph>
      <node id="2848">
        <label>stdexcept</label>
      </node>
      <node id="2846">
        <label>string</label>
      </node>
      <node id="2845">
        <label>map</label>
      </node>
      <node id="2847">
        <label>json.h</label>
      </node>
      <node id="2844">
        <label>expression_types.h</label>
        <link refid="expression__types_8h"/>
        <childnode refid="2845" relation="include">
        </childnode>
        <childnode refid="2846" relation="include">
        </childnode>
        <childnode refid="2847" relation="include">
        </childnode>
      </node>
      <node id="2843">
        <label>src/lib/access/expressions/expression_types.cpp</label>
        <link refid="expression_types.cpp"/>
        <childnode refid="2844" relation="include">
        </childnode>
        <childnode refid="2848" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="expression__types_8cpp_1acfcdf47083bfcae8da7c925130d93cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="expression__types_8h_1a6b227c2086984787afea2b4e490dcd5b" kindref="member">expression_map_t</ref></type>
        <definition>expression_map_t getExpressionMap</definition>
        <argsstring>()</argsstring>
        <name>getExpressionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.cpp" line="6" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.cpp" bodystart="6" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="expression__types_8cpp_1a0811783a7de9bcf2a2ca0739f20da590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="expression__types_8h_1a76fd92e9011f572a00d00383849a5bf5" kindref="member">predicate_map_t</ref></type>
        <definition>predicate_map_t getPredicateMap</definition>
        <argsstring>()</argsstring>
        <name>getPredicateMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.cpp" line="15" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.cpp" bodystart="15" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="expression__types_8cpp_1a9aa1d4a3b96198829e669e8f37a9f245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4" kindref="member">PredicateType::type</ref></type>
        <definition>PredicateType::type parsePredicateType</definition>
        <argsstring>(const Json::Value &amp;value)</argsstring>
        <name>parsePredicateType</name>
        <param>
          <type>const Json::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.cpp" line="37" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.cpp" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="expression__types_8cpp_1a0da444b0186a6a8d6e3a5970afeec527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720" kindref="member">ExpressionType</ref></type>
        <definition>ExpressionType parseExpressionType</definition>
        <argsstring>(const Json::Value &amp;value)</argsstring>
        <name>parseExpressionType</name>
        <param>
          <type>const Json::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.cpp" line="43" column="1" bodyfile="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.cpp" bodystart="43" bodyend="47"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Hasso-Plattner-Institut<sp/>fuer<sp/>Softwaresystemtechnik<sp/>GmbH.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="expression__types_8h" kindref="compound">expression_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="expression__types_8cpp_1acfcdf47083bfcae8da7c925130d93cbd" refkind="member"><highlight class="normal"><ref refid="expression__types_8h_1a6b227c2086984787afea2b4e490dcd5b" kindref="member">expression_map_t</ref><sp/><ref refid="expression__types_8cpp_1acfcdf47083bfcae8da7c925130d93cbd" kindref="member">getExpressionMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><ref refid="expression__types_8h_1a6b227c2086984787afea2b4e490dcd5b" kindref="member">expression_map_t</ref><sp/>d;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;AND&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a865555c9f2e0458a7078486aa1b3254f" kindref="member">AND</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;OR&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a96727447c0ad447987df1c6415aef074" kindref="member">OR</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;NOT&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a0378ebc895849163b249d0b330257dd6" kindref="member">NOT</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;EQ&quot;</highlight><highlight class="normal">]<sp/>=<sp/><sp/><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720a47e37fde0578f430e743261e91a51139" kindref="member">EXP_EQ</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="expression__types_8cpp_1a0811783a7de9bcf2a2ca0739f20da590" refkind="member"><highlight class="normal"><ref refid="expression__types_8h_1a76fd92e9011f572a00d00383849a5bf5" kindref="member">predicate_map_t</ref><sp/><ref refid="expression__types_8cpp_1a0811783a7de9bcf2a2ca0739f20da590" kindref="member">getPredicateMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><ref refid="expression__types_8h_1a76fd92e9011f572a00d00383849a5bf5" kindref="member">predicate_map_t</ref><sp/>d;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;EQ&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4aecbf999dec18480f89ed3e7b8f33f746" kindref="member">PredicateType::EqualsExpression</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;EQ_V&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4ae6b4899469126b734579c7d3073f1596" kindref="member">PredicateType::EqualsExpressionValue</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;LT&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a8c0dfd582c27af2f6c00b1cc30e1723b" kindref="member">PredicateType::LessThanExpression</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;GT&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a17020976118c2cc2127d0c60d6e17468" kindref="member">PredicateType::GreaterThanExpression</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;LT_V&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a4ab3d07c49bc4a9299720615b1bb6c3c" kindref="member">PredicateType::LessThanExpressionValue</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;GT_V&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a666ecff5c2bf54dc5663302137090fab" kindref="member">PredicateType::GreaterThanExpressionValue</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;LTE_V&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4ab9c4c3c614968b4b8d420f141dce4c99" kindref="member">PredicateType::LessThanEqualsExpressionValue</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;GTE_V&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4ae9bae8f4842c9c33b711d2d5f1af54a4" kindref="member">PredicateType::GreaterThanEqualsExpressionValue</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;EQ_R&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4aac2c8f67acde5a3c0af73c254dfd6744" kindref="member">PredicateType::EqualsExpressionRaw</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;LT_R&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4aa73eaedb5aedf02d4d84010651b32eb1" kindref="member">PredicateType::LessThanExpressionRaw</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;GT_R&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a48d9b027ddc83f042229dccfc2ad8f03" kindref="member">PredicateType::GreaterThanExpressionRaw</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;BETWEEN&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a72d9c49e33f267f776f86271c8cef637" kindref="member">PredicateType::BetweenExpression</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;COMPOUND&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4ac2077bbe0198712a2bbfa7f02f041e56" kindref="member">PredicateType::CompoundExpression</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;NEG&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a7536be078490f330cb5e61dd057417b3" kindref="member">PredicateType::NegateExpression</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;AND&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a60bdbd1b416610a640dfffe9919aca6c" kindref="member">PredicateType::AND</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;OR&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a3ff86da6498bd889c76820144ecfd860" kindref="member">PredicateType::OR</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>d[</highlight><highlight class="stringliteral">&quot;NOT&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4a40c0fea54ab0a7158cb810684feb1170" kindref="member">PredicateType::NOT</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="expression__types_8h_1a9aa1d4a3b96198829e669e8f37a9f245" refkind="member"><highlight class="normal"><ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4" kindref="member">PredicateType::type</ref><sp/><ref refid="expression__types_8cpp_1a9aa1d4a3b96198829e669e8f37a9f245" kindref="member">parsePredicateType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Json::Value<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.isString())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="expression__types_8cpp_1a0811783a7de9bcf2a2ca0739f20da590" kindref="member">getPredicateMap</ref>()[value.asString()];</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.isNumeric())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="struct_predicate_type_1a826cc813b7b1e81f4ba5b0a15441afa4" kindref="member">PredicateType::type</ref>)<sp/>value.asInt();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Predicate<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>value.asString()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>could<sp/>not<sp/>be<sp/>parsed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="expression__types_8h_1a0da444b0186a6a8d6e3a5970afeec527" refkind="member"><highlight class="normal"><ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720" kindref="member">ExpressionType</ref><sp/><ref refid="expression__types_8cpp_1a0da444b0186a6a8d6e3a5970afeec527" kindref="member">parseExpressionType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Json::Value<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.isString())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="expression__types_8cpp_1acfcdf47083bfcae8da7c925130d93cbd" kindref="member">getExpressionMap</ref>()[value.asString()];</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.isNumeric())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="expression__types_8h_1a51ad9989dafb48362f7e9354d68fe720" kindref="member">ExpressionType</ref>)<sp/>value.asInt();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Expression<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>value.asString()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>could<sp/>not<sp/>be<sp/>parsed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/lanice/develop/epic/hyrise/src/lib/access/expressions/expression_types.cpp"/>
  </compounddef>
</doxygen>
